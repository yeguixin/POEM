-----label-----
1
-----code-----
void CWE226_Sensitive_Information_Uncleared_Before_Release__w32_wchar_t_declare_17_bad()
{
    int j;
    for(j = 0; j < 1; j++)
    {
        {
            wchar_t password[100] = L"";
            size_t passwordLen = 0;
            HANDLE hUser;
            wchar_t * username = L"User";
            wchar_t * domain = L"Domain";
            if (fgetws(password, 100, stdin) == NULL)
            {
                printLine("fgetws() failed");
                /* Restore NUL terminator if fgetws fails */
                password[0] = L'\0';
            }
            /* Remove the carriage return from the string that is inserted by fgetws() */
            passwordLen = wcslen(password);
            if (passwordLen > 0)
            {
                password[passwordLen-1] = L'\0';
            }
            /* Use the password in LogonUser() to establish that it is "sensitive" */
            if (LogonUserW(
                        username,
                        domain,
                        password,
                        LOGON32_LOGON_NETWORK,
                        LOGON32_PROVIDER_DEFAULT,
                        &hUser) != 0)
            {
                printLine("User logged in successfully.");
                CloseHandle(hUser);
            }
            else
            {
                printLine("Unable to login.");
            }
            /* FLAW: Release password from the stack without first clearing the buffer */
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
6,7
7,8
7,9
9,10
11,12
11,13
11,14
11,15
12,13
13,14
13,15
14,15
17,18
17,19
18,19
21,22
22,23
24,25
25,26
25,27
25,28
25,29
25,30
25,31
25,32
25,33
25,34
26,27
27,28
27,29
29,30
29,31
29,32
31,32
33,34
35,36
36,37
36,38
37,38
39,40
39,41
41,42
43,44
44,45
44,46
45,46
47,48
49,50
50,51
50,52
52,53
52,54
52,55
55,56
57,58
58,59
58,60
60,61
60,62
60,63
63,64
65,66
65,67
66,67
66,68
67,68
67,69
67,70
67,71
68,69
70,71
73,74
75,76
77,78
77,79
78,79
79,80
79,81
80,81
83,84
84,85
84,86
85,86
85,87
86,87
90,91
91,92
91,93
92,93
94,95
94,96
95,96
97,98
99,100
99,101
100,101
100,102
101,102
104,105
105,106
106,107
106,108
107,108
107,109
108,109
110,111
110,112
111,112
115,116
115,117
115,118
116,117
116,118
117,118
117,119
117,120
117,121
117,122
117,123
117,124
118,119
120,121
122,123
124,125
126,127
128,129
130,131
131,132
134,135
134,136
135,136
136,137
136,138
137,138
140,141
141,142
141,143
142,143
144,145
146,147
147,148
148,149
148,150
149,150
-----nextToken-----
2,4,8,10,15,16,19,20,23,28,30,32,34,38,40,42,46,48,51,53,54,56,59,61,62,64,69,71,72,74,76,81,82,87,88,89,93,96,98,102,103,109,112,113,114,119,121,123,125,127,129,132,133,138,139,143,145,150,151
-----computeFrom-----
13,14
13,15
17,18
17,19
66,67
66,68
84,85
84,86
91,92
91,93
100,101
100,102
106,107
106,108
110,111
110,112
116,117
116,118
-----guardedBy-----
71,87
102,112
132,145
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE226_Sensitive_Information_Uncleared_Before_Release__w32_wchar_t_declare_17_bad(){    int j;    for(j = 0; j < 1; j++)    {        {            wchar_t password[100] = L"";            size_t passwordLen = 0;            HANDLE hUser;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Release password from the stack without first clearing the buffer */        }    }}
void
CWE226_Sensitive_Information_Uncleared_Before_Release__w32_wchar_t_declare_17_bad()
CWE226_Sensitive_Information_Uncleared_Before_Release__w32_wchar_t_declare_17_bad
{    int j;    for(j = 0; j < 1; j++)    {        {            wchar_t password[100] = L"";            size_t passwordLen = 0;            HANDLE hUser;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Release password from the stack without first clearing the buffer */        }    }}
int j;
int j;
int
j
j
for(j = 0; j < 1; j++)    {        {            wchar_t password[100] = L"";            size_t passwordLen = 0;            HANDLE hUser;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Release password from the stack without first clearing the buffer */        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        {            wchar_t password[100] = L"";            size_t passwordLen = 0;            HANDLE hUser;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Release password from the stack without first clearing the buffer */        }    }
{            wchar_t password[100] = L"";            size_t passwordLen = 0;            HANDLE hUser;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Release password from the stack without first clearing the buffer */        }
wchar_t password[100] = L"";
wchar_t password[100] = L"";
wchar_t
password[100] = L""
password
[100]
100
= L""
L""
size_t passwordLen = 0;
size_t passwordLen = 0;
size_t
size_t
passwordLen = 0
passwordLen
= 0
0
HANDLE hUser;
HANDLE hUser;
HANDLE
HANDLE
hUser
hUser
wchar_t * username = L"User";
wchar_t * username = L"User";
wchar_t
* username = L"User"
*
username
= L"User"
L"User"
wchar_t * domain = L"Domain";
wchar_t * domain = L"Domain";
wchar_t
* domain = L"Domain"
*
domain
= L"Domain"
L"Domain"
if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }
fgetws(password, 100, stdin) == NULL
fgetws(password, 100, stdin)
fgetws
fgetws
password
password
100
stdin
stdin
NULL
NULL
{                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }
printLine("fgetws() failed");
printLine("fgetws() failed")
printLine
printLine
"fgetws() failed"
password[0] = L'\0';
password[0] = L'\0'
password[0]
password
password
0
L'\0'
passwordLen = wcslen(password);
passwordLen = wcslen(password)
passwordLen
passwordLen
wcslen(password)
wcslen
wcslen
password
password
if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }
passwordLen > 0
passwordLen
passwordLen
0
{                password[passwordLen-1] = L'\0';            }
password[passwordLen-1] = L'\0';
password[passwordLen-1] = L'\0'
password[passwordLen-1]
password
password
passwordLen-1
passwordLen
passwordLen
1
L'\0'
if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }
LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0
LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser)
LogonUserW
LogonUserW
username
username
domain
domain
password
password
LOGON32_LOGON_NETWORK
LOGON32_LOGON_NETWORK
LOGON32_PROVIDER_DEFAULT
LOGON32_PROVIDER_DEFAULT
&hUser
hUser
hUser
0
{                printLine("User logged in successfully.");                CloseHandle(hUser);            }
printLine("User logged in successfully.");
printLine("User logged in successfully.")
printLine
printLine
"User logged in successfully."
CloseHandle(hUser);
CloseHandle(hUser)
CloseHandle
CloseHandle
hUser
hUser
{                printLine("Unable to login.");            }
printLine("Unable to login.");
printLine("Unable to login.")
printLine
printLine
"Unable to login."
-----joern-----
(41,60,0)
(49,60,0)
(29,60,0)
(47,34,0)
(59,60,0)
(33,44,0)
(34,29,0)
(24,44,0)
(28,60,0)
(61,18,0)
(0,58,0)
(56,7,0)
(5,61,0)
(25,38,0)
(1,48,0)
(43,9,0)
(3,44,0)
(12,10,0)
(29,31,0)
(26,60,0)
(4,6,0)
(23,44,0)
(60,57,0)
(46,7,0)
(40,20,0)
(44,39,0)
(27,10,0)
(15,29,0)
(16,44,0)
(30,44,0)
(8,60,0)
(13,39,0)
(54,9,0)
(52,60,0)
(37,20,0)
(20,6,0)
(17,48,0)
(53,22,0)
(32,60,0)
(35,22,0)
(6,20,0)
(31,29,0)
(7,10,0)
(39,44,0)
(42,20,0)
(58,18,0)
(45,53,0)
(14,27,0)
(38,50,0)
(11,34,0)
(44,33,0)
(51,10,0)
(19,31,0)
(21,55,0)
(48,60,0)
(36,33,0)
(2,7,1)
(46,56,1)
(27,10,1)
(39,44,1)
(53,45,1)
(5,58,1)
(24,34,1)
(28,48,1)
(23,24,1)
(30,3,1)
(6,4,1)
(48,17,1)
(1,32,1)
(21,34,1)
(51,12,1)
(15,6,1)
(34,29,1)
(24,21,1)
(7,10,1)
(56,10,1)
(49,28,1)
(38,25,1)
(32,7,1)
(0,39,1)
(33,36,1)
(20,42,1)
(42,37,1)
(39,13,1)
(56,27,1)
(27,14,1)
(11,29,1)
(45,6,1)
(6,20,1)
(34,47,1)
(4,20,1)
(47,11,1)
(58,0,1)
(14,38,1)
(16,23,1)
(14,61,1)
(25,39,1)
(40,49,1)
(36,30,1)
(35,53,1)
(61,5,1)
(19,15,1)
(10,51,1)
(3,16,1)
(44,33,1)
(7,46,1)
(31,19,1)
(13,44,1)
(15,35,1)
(17,1,1)
(37,40,1)
(29,31,1)
(17,7,2)
(7,10,2)
(19,7,2)
(31,7,2)
(58,39,2)
(11,7,2)
(1,7,2)
(6,7,2)
(47,7,2)
(40,7,2)
(38,39,2)
(13,7,2)
(29,7,2)
(20,7,2)
(37,7,2)
(14,7,2)
(56,7,2)
(61,39,2)
(30,7,2)
(35,6,2)
(6,20,2)
(5,39,2)
(36,7,2)
(33,7,2)
(42,7,2)
(24,7,2)
(46,7,2)
(0,39,2)
(32,7,2)
(29,31,2)
(27,7,2)
(27,10,2)
(39,44,2)
(4,7,2)
(34,29,2)
(34,7,2)
(44,33,2)
(21,34,2)
(48,7,2)
(23,7,2)
(39,7,2)
(45,6,2)
(15,7,2)
(7,7,2)
(49,7,2)
(25,39,2)
(28,7,2)
(3,7,2)
(16,7,2)
(53,6,2)
(44,7,2)
-----------------------------------
(0,"User logged in successfully.")
(1,passwordLen)
(2,RET)
(3,LOGON32_LOGON_NETWORK)
(4,NULL)
(5,hUser)
(6,fgetws(password, 100, stdin)
(7,j < 1)
(8,hUser)
(9,)
(10,j = 0)
(11,passwordLen)
(12,j)
(13,0)
(14,j)
(15,passwordLen)
(16,password)
(17,0)
(18,)
(19,password)
(20,fgetws(password, 100, stdin)
(21,\\\'\\\\0\\\')
(22,)
(23,domain)
(24,username)
(25,"Unable to login.")
(26,passwordLen)
(27,j++)
(28,"User")
(29,passwordLen = wcslen(password)
(30,LOGON32_PROVIDER_DEFAULT)
(31,wcslen(password)
(32,"")
(33,&hUser)
(34,passwordLen > 0)
(35,\\\'\\\\0\\\')
(36,hUser)
(37,100)
(38,printLine("Unable to login.")
(39,LogonUserW(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(40,password)
(41,if (LogonUserW(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(42,stdin)
(43,j)
(44,LogonUserW(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(45,"fgetws()
(46,1)
(47,0)
(48,passwordLen = 0)
(49,"Domain")
(50,)
(51,0)
(52,if (fgetws(password, 100, stdin)
(53,printLine("fgetws()
(54,for(j = 0; j < 1; j++)
(55,)
(56,j)
(57,)
(58,printLine("User logged in successfully.")
(59,if (passwordLen > 0)
(60,)
(61,CloseHandle(hUser)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
