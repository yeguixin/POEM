-----label-----
1
-----code-----
void CWE226_Sensitive_Information_Uncleared_Before_Release__w32_wchar_t_alloca_16_bad()
{
    while(1)
    {
        {
            wchar_t * password = (wchar_t *)ALLOCA(100*sizeof(wchar_t));
            size_t passwordLen = 0;
            HANDLE hUser;
            wchar_t * username = L"User";
            wchar_t * domain = L"Domain";
            /* Initialize password */
            password[0] = L'\0';
            if (fgetws(password, 100, stdin) == NULL)
            {
                printLine("fgetws() failed");
                /* Restore NUL terminator if fgetws fails */
                password[0] = L'\0';
            }
            /* Remove the carriage return from the string that is inserted by fgetws() */
            passwordLen = wcslen(password);
            if (passwordLen > 0)
            {
                password[passwordLen-1] = L'\0';
            }
            /* Use the password in LogonUser() to establish that it is "sensitive" */
            if (LogonUserW(
                        username,
                        domain,
                        password,
                        LOGON32_LOGON_NETWORK,
                        LOGON32_PROVIDER_DEFAULT,
                        &hUser) != 0)
            {
                printLine("User logged in successfully.");
                CloseHandle(hUser);
            }
            else
            {
                printLine("Unable to login.");
            }
            /* FLAW: Release password from the stack without first clearing the buffer */
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
8,9
8,10
9,10
9,11
9,12
9,13
9,14
9,15
9,16
9,17
9,18
9,19
10,11
11,12
11,13
13,14
13,15
13,16
16,17
17,18
17,19
18,19
18,20
20,21
22,23
22,24
23,24
25,26
25,27
27,28
28,29
28,30
31,32
32,33
32,34
33,34
35,36
35,37
37,38
39,40
40,41
40,42
41,42
43,44
45,46
46,47
46,48
48,49
48,50
48,51
51,52
53,54
54,55
54,56
56,57
56,58
56,59
59,60
61,62
62,63
62,64
63,64
63,65
64,65
68,69
68,70
69,70
69,71
70,71
70,72
70,73
70,74
71,72
73,74
76,77
78,79
80,81
80,82
81,82
82,83
82,84
83,84
86,87
87,88
87,89
88,89
88,90
89,90
93,94
94,95
94,96
95,96
97,98
97,99
98,99
100,101
102,103
102,104
103,104
103,105
104,105
107,108
108,109
109,110
109,111
110,111
110,112
111,112
113,114
113,115
114,115
118,119
118,120
118,121
119,120
119,121
120,121
120,122
120,123
120,124
120,125
120,126
120,127
121,122
123,124
125,126
127,128
129,130
131,132
133,134
134,135
137,138
137,139
138,139
139,140
139,141
140,141
143,144
144,145
144,146
145,146
147,148
149,150
150,151
151,152
151,153
152,153
-----nextToken-----
2,4,7,12,14,15,19,21,24,26,29,30,34,36,38,42,44,47,49,50,52,55,57,58,60,65,66,67,72,74,75,77,79,84,85,90,91,92,96,99,101,105,106,112,115,116,117,122,124,126,128,130,132,135,136,141,142,146,148,153,154,155
-----computeFrom-----
25,26
25,27
62,63
62,64
69,70
69,71
87,88
87,89
94,95
94,96
103,104
103,105
109,110
109,111
113,114
113,115
119,120
119,121
-----guardedBy-----
74,90
105,115
135,148
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE226_Sensitive_Information_Uncleared_Before_Release__w32_wchar_t_alloca_16_bad(){    while(1)    {        {            wchar_t * password = (wchar_t *)ALLOCA(100*sizeof(wchar_t));            size_t passwordLen = 0;            HANDLE hUser;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            /* Initialize password */            password[0] = L'\0';            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Release password from the stack without first clearing the buffer */        }        break;    }}
void
CWE226_Sensitive_Information_Uncleared_Before_Release__w32_wchar_t_alloca_16_bad()
CWE226_Sensitive_Information_Uncleared_Before_Release__w32_wchar_t_alloca_16_bad
{    while(1)    {        {            wchar_t * password = (wchar_t *)ALLOCA(100*sizeof(wchar_t));            size_t passwordLen = 0;            HANDLE hUser;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            /* Initialize password */            password[0] = L'\0';            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Release password from the stack without first clearing the buffer */        }        break;    }}
while(1)    {        {            wchar_t * password = (wchar_t *)ALLOCA(100*sizeof(wchar_t));            size_t passwordLen = 0;            HANDLE hUser;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            /* Initialize password */            password[0] = L'\0';            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Release password from the stack without first clearing the buffer */        }        break;    }
1
{        {            wchar_t * password = (wchar_t *)ALLOCA(100*sizeof(wchar_t));            size_t passwordLen = 0;            HANDLE hUser;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            /* Initialize password */            password[0] = L'\0';            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Release password from the stack without first clearing the buffer */        }        break;    }
{            wchar_t * password = (wchar_t *)ALLOCA(100*sizeof(wchar_t));            size_t passwordLen = 0;            HANDLE hUser;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            /* Initialize password */            password[0] = L'\0';            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Release password from the stack without first clearing the buffer */        }
wchar_t * password = (wchar_t *)ALLOCA(100*sizeof(wchar_t));
wchar_t * password = (wchar_t *)ALLOCA(100*sizeof(wchar_t));
wchar_t
* password = (wchar_t *)ALLOCA(100*sizeof(wchar_t))
*
password
= (wchar_t *)ALLOCA(100*sizeof(wchar_t))
(wchar_t *)ALLOCA(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
ALLOCA(100*sizeof(wchar_t))
ALLOCA
ALLOCA
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

size_t passwordLen = 0;
size_t passwordLen = 0;
size_t
size_t
passwordLen = 0
passwordLen
= 0
0
HANDLE hUser;
HANDLE hUser;
HANDLE
HANDLE
hUser
hUser
wchar_t * username = L"User";
wchar_t * username = L"User";
wchar_t
* username = L"User"
*
username
= L"User"
L"User"
wchar_t * domain = L"Domain";
wchar_t * domain = L"Domain";
wchar_t
* domain = L"Domain"
*
domain
= L"Domain"
L"Domain"
password[0] = L'\0';
password[0] = L'\0'
password[0]
password
password
0
L'\0'
if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }
fgetws(password, 100, stdin) == NULL
fgetws(password, 100, stdin)
fgetws
fgetws
password
password
100
stdin
stdin
NULL
NULL
{                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }
printLine("fgetws() failed");
printLine("fgetws() failed")
printLine
printLine
"fgetws() failed"
password[0] = L'\0';
password[0] = L'\0'
password[0]
password
password
0
L'\0'
passwordLen = wcslen(password);
passwordLen = wcslen(password)
passwordLen
passwordLen
wcslen(password)
wcslen
wcslen
password
password
if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }
passwordLen > 0
passwordLen
passwordLen
0
{                password[passwordLen-1] = L'\0';            }
password[passwordLen-1] = L'\0';
password[passwordLen-1] = L'\0'
password[passwordLen-1]
password
password
passwordLen-1
passwordLen
passwordLen
1
L'\0'
if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }
LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0
LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser)
LogonUserW
LogonUserW
username
username
domain
domain
password
password
LOGON32_LOGON_NETWORK
LOGON32_LOGON_NETWORK
LOGON32_PROVIDER_DEFAULT
LOGON32_PROVIDER_DEFAULT
&hUser
hUser
hUser
0
{                printLine("User logged in successfully.");                CloseHandle(hUser);            }
printLine("User logged in successfully.");
printLine("User logged in successfully.")
printLine
printLine
"User logged in successfully."
CloseHandle(hUser);
CloseHandle(hUser)
CloseHandle
CloseHandle
hUser
hUser
{                printLine("Unable to login.");            }
printLine("Unable to login.");
printLine("Unable to login.")
printLine
printLine
"Unable to login."
break;
-----joern-----
(53,28,0)
(44,3,0)
(33,49,0)
(57,27,0)
(45,64,0)
(31,19,0)
(52,64,0)
(38,4,0)
(8,28,0)
(20,52,0)
(1,59,0)
(42,59,0)
(29,5,0)
(41,57,0)
(36,52,0)
(17,40,0)
(49,52,0)
(24,57,0)
(19,27,0)
(27,52,0)
(3,59,0)
(28,8,0)
(61,3,0)
(27,19,0)
(7,9,0)
(18,53,0)
(23,3,0)
(58,52,0)
(55,52,0)
(0,3,0)
(21,59,0)
(63,52,0)
(30,1,0)
(15,14,0)
(37,1,0)
(47,21,0)
(21,8,0)
(46,1,0)
(16,10,0)
(5,4,0)
(14,2,0)
(12,37,0)
(11,52,0)
(22,49,0)
(50,52,0)
(8,21,0)
(13,3,0)
(60,27,0)
(6,2,0)
(3,10,0)
(19,59,0)
(3,13,0)
(59,52,0)
(56,3,0)
(25,13,0)
(59,21,0)
(21,47,0)
(32,52,0)
(43,28,0)
(1,37,0)
(34,1,0)
(10,3,0)
(51,35,0)
(54,38,0)
(48,52,0)
(28,53,0)
(40,26,0)
(62,45,1)
(33,59,1)
(60,37,1)
(0,57,1)
(18,43,1)
(49,22,1)
(57,27,1)
(21,47,1)
(1,59,1)
(54,13,1)
(11,55,1)
(37,12,1)
(13,3,1)
(10,16,1)
(37,1,1)
(30,50,1)
(21,8,1)
(45,40,1)
(0,7,1)
(16,56,1)
(31,60,1)
(5,29,1)
(62,39,1)
(6,14,1)
(23,44,1)
(3,59,1)
(41,27,1)
(7,57,1)
(1,46,1)
(59,21,1)
(56,61,1)
(15,37,1)
(40,17,1)
(8,28,1)
(17,13,1)
(3,10,1)
(28,53,1)
(13,25,1)
(34,30,1)
(42,39,1)
(25,3,1)
(55,49,1)
(24,41,1)
(22,33,1)
(19,59,1)
(61,23,1)
(38,54,1)
(45,5,1)
(53,18,1)
(60,6,1)
(12,1,1)
(43,42,1)
(50,11,1)
(44,0,1)
(27,19,1)
(29,38,1)
(14,15,1)
(19,31,1)
(46,34,1)
(57,24,1)
(28,53,2)
(43,39,2)
(7,57,2)
(54,13,2)
(44,39,2)
(25,39,2)
(60,39,2)
(29,13,2)
(1,39,2)
(19,39,2)
(59,21,2)
(31,39,2)
(1,59,2)
(17,13,2)
(24,39,2)
(13,3,2)
(40,13,2)
(21,39,2)
(33,39,2)
(19,59,2)
(10,39,2)
(53,39,2)
(45,39,2)
(27,39,2)
(34,39,2)
(12,39,2)
(13,39,2)
(37,1,2)
(61,39,2)
(27,19,2)
(8,28,2)
(56,39,2)
(8,39,2)
(3,39,2)
(21,47,2)
(46,39,2)
(5,13,2)
(22,39,2)
(57,27,2)
(23,39,2)
(30,39,2)
(37,39,2)
(0,39,2)
(3,59,2)
(50,39,2)
(42,39,2)
(57,39,2)
(38,13,2)
(21,8,2)
(3,10,2)
(55,39,2)
(14,37,2)
(28,39,2)
(18,39,2)
(6,37,2)
(49,39,2)
(41,39,2)
(11,39,2)
(15,37,2)
(16,39,2)
(59,39,2)
-----------------------------------
(0,username)
(1,fgetws(password, 100, stdin)
(2,)
(3,LogonUserW(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(4,)
(5,CloseHandle(hUser)
(6,\\\'\\\\0\\\')
(7,\\\'\\\\0\\\')
(8,ALLOCA(100*sizeof(wchar_t)
(9,)
(10,&hUser)
(11,"Domain")
(12,NULL)
(13,LogonUserW(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(14,printLine("fgetws()
(15,"fgetws()
(16,hUser)
(17,"Unable to login.")
(18,wchar_t)
(19,wcslen(password)
(20,passwordLen)
(21,(wchar_t *)
(22,0)
(23,password)
(24,0)
(25,0)
(26,)
(27,passwordLen = wcslen(password)
(28,100*sizeof(wchar_t)
(29,hUser)
(30,password)
(31,password)
(32,hUser)
(33,passwordLen)
(34,100)
(35,)
(36,password)
(37,fgetws(password, 100, stdin)
(38,printLine("User logged in successfully.")
(39,1)
(40,printLine("Unable to login.")
(41,passwordLen)
(42,password)
(43,100)
(44,domain)
(45,break;)
(46,stdin)
(47,wchar_t *)
(48,if (fgetws(password, 100, stdin)
(49,passwordLen = 0)
(50,\\\'\\\\0\\\')
(51,while(1)
(52,)
(53,sizeof(wchar_t)
(54,"User logged in successfully.")
(55,"User")
(56,LOGON32_PROVIDER_DEFAULT)
(57,passwordLen > 0)
(58,if (passwordLen > 0)
(59,* password = (wchar_t *)
(60,passwordLen)
(61,LOGON32_LOGON_NETWORK)
(62,RET)
(63,if (LogonUserW(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(64,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
