-----label-----
0
-----code-----
static void good1()
{
    if(STATIC_CONST_FALSE)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        {
            char * password = (char *)ALLOCA(100*sizeof(char));
            size_t passwordLen = 0;
            HANDLE hUser;
            char * username = "User";
            char * domain = "Domain";
            /* Initialize password */
            password[0] = '\0';
            if (fgets(password, 100, stdin) == NULL)
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                password[0] = '\0';
            }
            /* Remove the carriage return from the string that is inserted by fgets() */
            passwordLen = strlen(password);
            if (passwordLen > 0)
            {
                password[passwordLen-1] = '\0';
            }
            /* Use the password in LogonUser() to establish that it is "sensitive" */
            if (LogonUserA(
                        username,
                        domain,
                        password,
                        LOGON32_LOGON_NETWORK,
                        LOGON32_PROVIDER_DEFAULT,
                        &hUser) != 0)
            {
                printLine("User logged in successfully.");
                CloseHandle(hUser);
            }
            else
            {
                printLine("Unable to login.");
            }
            passwordLen = strlen(password);
            /* FIX: Clear password prior to release from stack */
            SecureZeroMemory(password, passwordLen * sizeof(char));
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
6,9
7,8
9,10
10,11
11,12
11,13
12,13
15,16
16,17
16,18
16,19
16,20
16,21
16,22
16,23
16,24
16,25
16,26
16,27
16,28
17,18
18,19
18,20
20,21
20,22
20,23
23,24
24,25
24,26
25,26
25,27
27,28
29,30
29,31
30,31
32,33
32,34
34,35
35,36
35,37
38,39
39,40
39,41
40,41
42,43
42,44
44,45
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
55,56
55,57
55,58
58,59
60,61
61,62
61,63
63,64
63,65
63,66
66,67
68,69
69,70
69,71
70,71
70,72
71,72
75,76
75,77
76,77
76,78
77,78
77,79
77,80
77,81
78,79
80,81
83,84
85,86
87,88
87,89
88,89
89,90
89,91
90,91
93,94
94,95
94,96
95,96
95,97
96,97
100,101
101,102
101,103
102,103
104,105
104,106
105,106
107,108
109,110
109,111
110,111
110,112
111,112
114,115
115,116
116,117
116,118
117,118
117,119
118,119
120,121
120,122
121,122
125,126
125,127
125,128
126,127
126,128
127,128
127,129
127,130
127,131
127,132
127,133
127,134
128,129
130,131
132,133
134,135
136,137
138,139
140,141
141,142
144,145
144,146
145,146
146,147
146,148
147,148
150,151
151,152
151,153
152,153
154,155
156,157
157,158
158,159
158,160
159,160
162,163
163,164
163,165
164,165
166,167
166,168
167,168
169,170
171,172
172,173
172,174
172,175
173,174
175,176
177,178
177,179
178,179
180,181
181,182
181,183
-----nextToken-----
2,4,8,13,14,19,21,22,26,28,31,33,36,37,41,43,45,49,51,54,56,57,59,62,64,65,67,72,73,74,79,81,82,84,86,91,92,97,98,99,103,106,108,112,113,119,122,123,124,129,131,133,135,137,139,142,143,148,149,153,155,160,161,165,168,170,174,176,179,182,183
-----computeFrom-----
32,33
32,34
69,70
69,71
76,77
76,78
94,95
94,96
101,102
101,103
110,111
110,112
116,117
116,118
120,121
120,122
126,127
126,128
163,164
163,165
177,178
177,179
-----guardedBy-----
81,97
112,122
142,155
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;
-----ast_node-----
static void good1(){    if(STATIC_CONST_FALSE)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            char * password = (char *)ALLOCA(100*sizeof(char));            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            /* Initialize password */            password[0] = '\0';            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            passwordLen = strlen(password);            /* FIX: Clear password prior to release from stack */            SecureZeroMemory(password, passwordLen * sizeof(char));        }    }}
static void
good1()
good1
{    if(STATIC_CONST_FALSE)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            char * password = (char *)ALLOCA(100*sizeof(char));            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            /* Initialize password */            password[0] = '\0';            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            passwordLen = strlen(password);            /* FIX: Clear password prior to release from stack */            SecureZeroMemory(password, passwordLen * sizeof(char));        }    }}
if(STATIC_CONST_FALSE)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            char * password = (char *)ALLOCA(100*sizeof(char));            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            /* Initialize password */            password[0] = '\0';            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            passwordLen = strlen(password);            /* FIX: Clear password prior to release from stack */            SecureZeroMemory(password, passwordLen * sizeof(char));        }    }
STATIC_CONST_FALSE
STATIC_CONST_FALSE
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        {            char * password = (char *)ALLOCA(100*sizeof(char));            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            /* Initialize password */            password[0] = '\0';            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            passwordLen = strlen(password);            /* FIX: Clear password prior to release from stack */            SecureZeroMemory(password, passwordLen * sizeof(char));        }    }
{            char * password = (char *)ALLOCA(100*sizeof(char));            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            /* Initialize password */            password[0] = '\0';            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            passwordLen = strlen(password);            /* FIX: Clear password prior to release from stack */            SecureZeroMemory(password, passwordLen * sizeof(char));        }
char * password = (char *)ALLOCA(100*sizeof(char));
char * password = (char *)ALLOCA(100*sizeof(char));
char
* password = (char *)ALLOCA(100*sizeof(char))
*
password
= (char *)ALLOCA(100*sizeof(char))
(char *)ALLOCA(100*sizeof(char))
char *
char
*
*
ALLOCA(100*sizeof(char))
ALLOCA
ALLOCA
100*sizeof(char)
100
sizeof(char)
char
char

size_t passwordLen = 0;
size_t passwordLen = 0;
size_t
size_t
passwordLen = 0
passwordLen
= 0
0
HANDLE hUser;
HANDLE hUser;
HANDLE
HANDLE
hUser
hUser
char * username = "User";
char * username = "User";
char
* username = "User"
*
username
= "User"
"User"
char * domain = "Domain";
char * domain = "Domain";
char
* domain = "Domain"
*
domain
= "Domain"
"Domain"
password[0] = '\0';
password[0] = '\0'
password[0]
password
password
0
'\0'
if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }
fgets(password, 100, stdin) == NULL
fgets(password, 100, stdin)
fgets
fgets
password
password
100
stdin
stdin
NULL
NULL
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
password[0] = '\0';
password[0] = '\0'
password[0]
password
password
0
'\0'
passwordLen = strlen(password);
passwordLen = strlen(password)
passwordLen
passwordLen
strlen(password)
strlen
strlen
password
password
if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }
passwordLen > 0
passwordLen
passwordLen
0
{                password[passwordLen-1] = '\0';            }
password[passwordLen-1] = '\0';
password[passwordLen-1] = '\0'
password[passwordLen-1]
password
password
passwordLen-1
passwordLen
passwordLen
1
'\0'
if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }
LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0
LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser)
LogonUserA
LogonUserA
username
username
domain
domain
password
password
LOGON32_LOGON_NETWORK
LOGON32_LOGON_NETWORK
LOGON32_PROVIDER_DEFAULT
LOGON32_PROVIDER_DEFAULT
&hUser
hUser
hUser
0
{                printLine("User logged in successfully.");                CloseHandle(hUser);            }
printLine("User logged in successfully.");
printLine("User logged in successfully.")
printLine
printLine
"User logged in successfully."
CloseHandle(hUser);
CloseHandle(hUser)
CloseHandle
CloseHandle
hUser
hUser
{                printLine("Unable to login.");            }
printLine("Unable to login.");
printLine("Unable to login.")
printLine
printLine
"Unable to login."
passwordLen = strlen(password);
passwordLen = strlen(password)
passwordLen
passwordLen
strlen(password)
strlen
strlen
password
password
SecureZeroMemory(password, passwordLen * sizeof(char));
SecureZeroMemory(password, passwordLen * sizeof(char))
SecureZeroMemory
SecureZeroMemory
password
password
passwordLen * sizeof(char)
passwordLen
passwordLen
sizeof(char)
char
char

-----joern-----
(41,51,0)
(51,37,0)
(5,56,0)
(12,19,0)
(16,34,0)
(13,95,0)
(23,82,0)
(19,12,0)
(61,86,0)
(6,52,0)
(48,61,0)
(86,73,0)
(24,38,0)
(60,91,0)
(94,21,0)
(38,24,0)
(36,88,0)
(25,73,0)
(47,37,0)
(19,73,0)
(35,1,0)
(95,46,0)
(77,43,0)
(68,21,0)
(88,86,0)
(1,56,0)
(63,95,0)
(40,31,0)
(11,88,0)
(64,27,0)
(24,70,0)
(37,47,0)
(7,29,0)
(44,55,0)
(18,14,0)
(83,29,0)
(28,19,0)
(29,19,0)
(2,12,0)
(85,73,0)
(51,86,0)
(9,47,0)
(70,24,0)
(95,63,0)
(88,31,0)
(10,86,0)
(58,53,0)
(42,73,0)
(65,73,0)
(76,29,0)
(20,91,0)
(55,43,0)
(33,66,0)
(24,86,0)
(72,61,0)
(15,18,0)
(82,34,0)
(12,86,0)
(73,49,0)
(34,86,0)
(93,73,0)
(75,73,0)
(46,73,0)
(62,79,0)
(69,95,0)
(50,46,0)
(96,7,0)
(92,42,0)
(31,88,0)
(21,73,0)
(30,95,0)
(3,78,0)
(4,95,0)
(27,79,0)
(95,86,0)
(34,82,0)
(32,73,0)
(45,54,0)
(61,1,0)
(84,37,0)
(80,88,0)
(90,46,0)
(53,81,0)
(39,73,0)
(37,51,0)
(26,86,0)
(29,7,0)
(52,74,0)
(59,95,0)
(82,73,0)
(10,66,0)
(71,10,0)
(17,5,0)
(95,21,0)
(79,38,0)
(91,19,0)
(95,78,0)
(67,77,0)
(78,95,0)
(66,73,0)
(57,10,0)
(37,82,0)
(79,27,0)
(7,52,0)
(7,86,0)
(87,42,0)
(51,73,0)
(86,24,0)
(89,63,0)
(38,79,0)
(8,73,0)
(63,89,1)
(88,36,1)
(90,50,1)
(27,64,1)
(15,22,1)
(72,48,1)
(31,40,1)
(29,76,1)
(61,86,1)
(17,31,1)
(62,26,1)
(86,24,1)
(84,41,1)
(7,29,1)
(6,7,1)
(13,59,1)
(95,21,1)
(10,86,1)
(77,67,1)
(26,22,1)
(1,35,1)
(10,57,1)
(94,42,1)
(57,71,1)
(21,68,1)
(18,15,1)
(37,47,1)
(28,31,1)
(59,30,1)
(19,12,1)
(50,21,1)
(24,70,1)
(95,46,1)
(55,44,1)
(29,19,1)
(78,3,1)
(30,4,1)
(91,20,1)
(76,83,1)
(91,19,1)
(2,28,1)
(67,55,1)
(69,52,1)
(51,37,1)
(24,38,1)
(16,23,1)
(31,88,1)
(82,34,1)
(36,80,1)
(64,62,1)
(96,91,1)
(88,86,1)
(40,88,1)
(41,82,1)
(53,58,1)
(92,86,1)
(28,1,1)
(68,94,1)
(0,18,1)
(23,77,1)
(47,9,1)
(0,51,1)
(80,11,1)
(44,78,1)
(37,82,1)
(7,86,1)
(51,86,1)
(46,90,1)
(33,10,1)
(71,46,1)
(52,6,1)
(9,84,1)
(38,79,1)
(87,92,1)
(4,69,1)
(5,17,1)
(95,63,1)
(61,72,1)
(42,87,1)
(95,86,1)
(34,16,1)
(12,2,1)
(23,53,1)
(89,13,1)
(83,96,1)
(69,91,1)
(78,95,1)
(3,95,1)
(48,5,1)
(12,86,1)
(60,19,1)
(34,86,1)
(35,61,1)
(79,27,1)
(66,33,1)
(20,60,1)
(11,66,1)
(58,78,1)
(91,22,2)
(78,95,2)
(47,22,2)
(64,22,2)
(36,22,2)
(42,22,2)
(82,34,2)
(11,22,2)
(72,31,2)
(24,22,2)
(83,91,2)
(86,22,2)
(61,86,2)
(37,47,2)
(46,22,2)
(44,78,2)
(4,22,2)
(62,22,2)
(87,22,2)
(79,27,2)
(30,22,2)
(24,38,2)
(86,24,2)
(79,22,2)
(69,22,2)
(61,31,2)
(29,19,2)
(1,31,2)
(20,22,2)
(31,22,2)
(10,86,2)
(37,82,2)
(88,22,2)
(34,22,2)
(33,22,2)
(89,22,2)
(15,22,2)
(41,22,2)
(29,91,2)
(67,78,2)
(21,22,2)
(80,22,2)
(55,78,2)
(92,22,2)
(10,22,2)
(82,22,2)
(95,21,2)
(40,22,2)
(31,88,2)
(88,86,2)
(50,22,2)
(95,86,2)
(84,22,2)
(60,22,2)
(66,22,2)
(53,78,2)
(51,22,2)
(95,46,2)
(59,22,2)
(13,22,2)
(7,91,2)
(38,22,2)
(63,22,2)
(19,12,2)
(68,22,2)
(12,86,2)
(90,22,2)
(76,91,2)
(95,63,2)
(27,22,2)
(23,22,2)
(3,22,2)
(51,86,2)
(7,29,2)
(7,86,2)
(58,78,2)
(18,22,2)
(48,31,2)
(77,78,2)
(26,22,2)
(37,22,2)
(19,22,2)
(94,22,2)
(78,22,2)
(9,22,2)
(38,79,2)
(95,22,2)
(71,22,2)
(2,22,2)
(17,31,2)
(52,91,2)
(24,70,2)
(51,37,2)
(34,86,2)
(5,31,2)
(91,19,2)
(6,91,2)
(57,22,2)
(96,91,2)
(28,22,2)
(35,31,2)
(16,22,2)
(12,22,2)
-----------------------------------
(0,RET)
(1,password[0] = \\\'\\\\0\\\')
(2,password)
(3,0)
(4,domain)
(5,printLine("fgets()
(6,\\\'\\\\0\\\')
(7,password[passwordLen-1])
(8,if (LogonUserA(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(9,char)
(10,password[0])
(11,password)
(12,strlen(password)
(13,LOGON32_PROVIDER_DEFAULT)
(14,)
(15,"Benign, fixed string")
(16,password)
(17,"fgets()
(18,printLine("Benign, fixed string")
(19,passwordLen = strlen(password)
(20,0)
(21,* username = "User")
(22,STATIC_CONST_FALSE)
(23,passwordLen)
(24,(char *)
(25,passwordLen)
(26,password)
(27,sizeof(char)
(28,passwordLen)
(29,passwordLen-1)
(30,password)
(31,fgets(password, 100, stdin)
(32,hUser)
(33,\\\'\\\\0\\\')
(34,strlen(password)
(35,\\\'\\\\0\\\')
(36,stdin)
(37,passwordLen * sizeof(char)
(38,ALLOCA(100*sizeof(char)
(39,domain)
(40,NULL)
(41,password)
(42,passwordLen = 0)
(43,)
(44,"User logged in successfully.")
(45,if(STATIC_CONST_FALSE)
(46,* domain = "Domain")
(47,sizeof(char)
(48,password)
(49,)
(50,domain)
(51,SecureZeroMemory(password, passwordLen * sizeof(char)
(52,password[passwordLen-1] = \\\'\\\\0\\\')
(53,printLine("Unable to login.")
(54,)
(55,printLine("User logged in successfully.")
(56,)
(57,0)
(58,"Unable to login.")
(59,LOGON32_LOGON_NETWORK)
(60,passwordLen)
(61,password[0])
(62,100)
(63,&hUser)
(64,char)
(65,password)
(66,password[0] = \\\'\\\\0\\\')
(67,hUser)
(68,"User")
(69,username)
(70,char *)
(71,password)
(72,0)
(73,)
(74,)
(75,if (fgets(password, 100, stdin)
(76,1)
(77,CloseHandle(hUser)
(78,LogonUserA(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(79,100*sizeof(char)
(80,100)
(81,)
(82,passwordLen = strlen(password)
(83,passwordLen)
(84,passwordLen)
(85,username)
(86,* password = (char *)
(87,0)
(88,fgets(password, 100, stdin)
(89,hUser)
(90,"Domain")
(91,passwordLen > 0)
(92,passwordLen)
(93,if (passwordLen > 0)
(94,username)
(95,LogonUserA(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(96,password)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
