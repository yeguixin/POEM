-----label-----
0
-----code-----
static void good2()
{
    if(globalReturnsTrue())
    {
        {
            char * password = (char *)ALLOCA(100*sizeof(char));
            size_t passwordLen = 0;
            HANDLE hUser;
            char * username = "User";
            char * domain = "Domain";
            /* Initialize password */
            password[0] = '\0';
            if (fgets(password, 100, stdin) == NULL)
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                password[0] = '\0';
            }
            /* Remove the carriage return from the string that is inserted by fgets() */
            passwordLen = strlen(password);
            if (passwordLen > 0)
            {
                password[passwordLen-1] = '\0';
            }
            /* Use the password in LogonUser() to establish that it is "sensitive" */
            if (LogonUserA(
                        username,
                        domain,
                        password,
                        LOGON32_LOGON_NETWORK,
                        LOGON32_PROVIDER_DEFAULT,
                        &hUser) != 0)
            {
                printLine("User logged in successfully.");
                CloseHandle(hUser);
            }
            else
            {
                printLine("Unable to login.");
            }
            passwordLen = strlen(password);
            /* FIX: Clear password prior to release from stack */
            SecureZeroMemory(password, passwordLen * sizeof(char));
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
8,9
10,11
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
11,23
12,13
13,14
13,15
15,16
15,17
15,18
18,19
19,20
19,21
20,21
20,22
22,23
24,25
24,26
25,26
27,28
27,29
29,30
30,31
30,32
33,34
34,35
34,36
35,36
37,38
37,39
39,40
41,42
42,43
42,44
43,44
45,46
47,48
48,49
48,50
50,51
50,52
50,53
53,54
55,56
56,57
56,58
58,59
58,60
58,61
61,62
63,64
64,65
64,66
65,66
65,67
66,67
70,71
70,72
71,72
71,73
72,73
72,74
72,75
72,76
73,74
75,76
78,79
80,81
82,83
82,84
83,84
84,85
84,86
85,86
88,89
89,90
89,91
90,91
90,92
91,92
95,96
96,97
96,98
97,98
99,100
99,101
100,101
102,103
104,105
104,106
105,106
105,107
106,107
109,110
110,111
111,112
111,113
112,113
112,114
113,114
115,116
115,117
116,117
120,121
120,122
120,123
121,122
121,123
122,123
122,124
122,125
122,126
122,127
122,128
122,129
123,124
125,126
127,128
129,130
131,132
133,134
135,136
136,137
139,140
139,141
140,141
141,142
141,143
142,143
145,146
146,147
146,148
147,148
149,150
151,152
152,153
153,154
153,155
154,155
157,158
158,159
158,160
159,160
161,162
161,163
162,163
164,165
166,167
167,168
167,169
167,170
168,169
170,171
172,173
172,174
173,174
175,176
176,177
176,178
-----nextToken-----
2,4,9,14,16,17,21,23,26,28,31,32,36,38,40,44,46,49,51,52,54,57,59,60,62,67,68,69,74,76,77,79,81,86,87,92,93,94,98,101,103,107,108,114,117,118,119,124,126,128,130,132,134,137,138,143,144,148,150,155,156,160,163,165,169,171,174,177,178
-----computeFrom-----
27,28
27,29
64,65
64,66
71,72
71,73
89,90
89,91
96,97
96,98
105,106
105,107
111,112
111,113
115,116
115,117
121,122
121,123
158,159
158,160
172,173
172,174
-----guardedBy-----
76,92
107,117
137,150
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;
-----ast_node-----
static void good2(){    if(globalReturnsTrue())    {        {            char * password = (char *)ALLOCA(100*sizeof(char));            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            /* Initialize password */            password[0] = '\0';            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            passwordLen = strlen(password);            /* FIX: Clear password prior to release from stack */            SecureZeroMemory(password, passwordLen * sizeof(char));        }    }}
static void
good2()
good2
{    if(globalReturnsTrue())    {        {            char * password = (char *)ALLOCA(100*sizeof(char));            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            /* Initialize password */            password[0] = '\0';            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            passwordLen = strlen(password);            /* FIX: Clear password prior to release from stack */            SecureZeroMemory(password, passwordLen * sizeof(char));        }    }}
if(globalReturnsTrue())    {        {            char * password = (char *)ALLOCA(100*sizeof(char));            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            /* Initialize password */            password[0] = '\0';            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            passwordLen = strlen(password);            /* FIX: Clear password prior to release from stack */            SecureZeroMemory(password, passwordLen * sizeof(char));        }    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        {            char * password = (char *)ALLOCA(100*sizeof(char));            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            /* Initialize password */            password[0] = '\0';            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            passwordLen = strlen(password);            /* FIX: Clear password prior to release from stack */            SecureZeroMemory(password, passwordLen * sizeof(char));        }    }
{            char * password = (char *)ALLOCA(100*sizeof(char));            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            /* Initialize password */            password[0] = '\0';            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            passwordLen = strlen(password);            /* FIX: Clear password prior to release from stack */            SecureZeroMemory(password, passwordLen * sizeof(char));        }
char * password = (char *)ALLOCA(100*sizeof(char));
char * password = (char *)ALLOCA(100*sizeof(char));
char
* password = (char *)ALLOCA(100*sizeof(char))
*
password
= (char *)ALLOCA(100*sizeof(char))
(char *)ALLOCA(100*sizeof(char))
char *
char
*
*
ALLOCA(100*sizeof(char))
ALLOCA
ALLOCA
100*sizeof(char)
100
sizeof(char)
char
char

size_t passwordLen = 0;
size_t passwordLen = 0;
size_t
size_t
passwordLen = 0
passwordLen
= 0
0
HANDLE hUser;
HANDLE hUser;
HANDLE
HANDLE
hUser
hUser
char * username = "User";
char * username = "User";
char
* username = "User"
*
username
= "User"
"User"
char * domain = "Domain";
char * domain = "Domain";
char
* domain = "Domain"
*
domain
= "Domain"
"Domain"
password[0] = '\0';
password[0] = '\0'
password[0]
password
password
0
'\0'
if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }
fgets(password, 100, stdin) == NULL
fgets(password, 100, stdin)
fgets
fgets
password
password
100
stdin
stdin
NULL
NULL
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
password[0] = '\0';
password[0] = '\0'
password[0]
password
password
0
'\0'
passwordLen = strlen(password);
passwordLen = strlen(password)
passwordLen
passwordLen
strlen(password)
strlen
strlen
password
password
if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }
passwordLen > 0
passwordLen
passwordLen
0
{                password[passwordLen-1] = '\0';            }
password[passwordLen-1] = '\0';
password[passwordLen-1] = '\0'
password[passwordLen-1]
password
password
passwordLen-1
passwordLen
passwordLen
1
'\0'
if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }
LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0
LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser)
LogonUserA
LogonUserA
username
username
domain
domain
password
password
LOGON32_LOGON_NETWORK
LOGON32_LOGON_NETWORK
LOGON32_PROVIDER_DEFAULT
LOGON32_PROVIDER_DEFAULT
&hUser
hUser
hUser
0
{                printLine("User logged in successfully.");                CloseHandle(hUser);            }
printLine("User logged in successfully.");
printLine("User logged in successfully.")
printLine
printLine
"User logged in successfully."
CloseHandle(hUser);
CloseHandle(hUser)
CloseHandle
CloseHandle
hUser
hUser
{                printLine("Unable to login.");            }
printLine("Unable to login.");
printLine("Unable to login.")
printLine
printLine
"Unable to login."
passwordLen = strlen(password);
passwordLen = strlen(password)
passwordLen
passwordLen
strlen(password)
strlen
strlen
password
password
SecureZeroMemory(password, passwordLen * sizeof(char));
SecureZeroMemory(password, passwordLen * sizeof(char))
SecureZeroMemory
SecureZeroMemory
password
password
passwordLen * sizeof(char)
passwordLen
passwordLen
sizeof(char)
char
char

-----joern-----
(66,59,0)
(37,2,0)
(25,80,0)
(82,80,0)
(40,13,0)
(57,65,0)
(44,80,0)
(46,32,0)
(75,22,0)
(70,19,0)
(29,35,0)
(70,51,0)
(3,82,0)
(47,75,0)
(71,89,0)
(89,71,0)
(7,36,0)
(20,53,0)
(13,19,0)
(16,14,0)
(54,18,0)
(43,70,0)
(89,51,0)
(23,14,0)
(60,35,0)
(58,0,0)
(27,62,0)
(86,67,0)
(43,18,0)
(36,13,0)
(77,43,0)
(67,70,0)
(59,70,0)
(14,35,0)
(12,19,0)
(21,19,0)
(67,82,0)
(65,70,0)
(33,25,0)
(18,22,0)
(39,14,0)
(45,19,0)
(62,90,0)
(71,55,0)
(64,14,0)
(87,19,0)
(14,64,0)
(1,43,0)
(13,59,0)
(53,70,0)
(2,19,0)
(17,0,0)
(68,55,0)
(80,25,0)
(14,0,0)
(85,19,0)
(10,79,0)
(82,74,0)
(51,9,0)
(38,14,0)
(53,91,0)
(74,82,0)
(92,36,0)
(31,91,0)
(81,93,0)
(76,91,0)
(91,53,0)
(15,69,0)
(84,19,0)
(14,30,0)
(34,30,0)
(5,2,0)
(55,71,0)
(59,13,0)
(91,13,0)
(26,46,0)
(93,19,0)
(82,67,0)
(53,46,0)
(67,19,0)
(25,70,0)
(80,19,0)
(69,90,0)
(9,51,0)
(73,28,0)
(48,65,0)
(19,50,0)
(83,71,0)
(72,19,0)
(28,52,0)
(5,70,0)
(56,57,0)
(8,65,0)
(6,93,0)
(51,89,0)
(14,70,0)
(41,5,0)
(51,70,0)
(4,5,0)
(49,74,0)
(0,19,0)
(30,14,0)
(65,57,0)
(24,14,0)
(42,70,0)
(35,19,0)
(61,19,0)
(78,65,0)
(88,64,0)
(53,91,1)
(93,6,1)
(44,28,1)
(80,25,1)
(37,5,1)
(18,54,1)
(68,83,1)
(82,74,1)
(2,37,1)
(16,46,1)
(89,71,1)
(14,70,1)
(51,89,1)
(55,68,1)
(88,38,1)
(54,43,1)
(62,27,1)
(36,7,1)
(65,70,1)
(11,63,1)
(15,30,1)
(83,42,1)
(86,80,1)
(49,3,1)
(17,58,1)
(23,24,1)
(46,26,1)
(31,20,1)
(26,53,1)
(92,13,1)
(16,36,1)
(47,57,1)
(53,70,1)
(43,70,1)
(51,9,1)
(7,92,1)
(70,51,1)
(64,88,1)
(65,48,1)
(36,13,1)
(25,33,1)
(8,78,1)
(81,70,1)
(39,16,1)
(1,75,1)
(91,76,1)
(77,1,1)
(28,73,1)
(27,69,1)
(82,80,1)
(3,86,1)
(24,39,1)
(20,36,1)
(14,64,1)
(44,62,1)
(57,56,1)
(30,34,1)
(13,59,1)
(11,67,1)
(29,0,1)
(67,70,1)
(91,13,1)
(40,57,1)
(78,2,1)
(56,65,1)
(74,49,1)
(35,60,1)
(0,17,1)
(6,81,1)
(75,47,1)
(42,63,1)
(30,14,1)
(41,4,1)
(66,40,1)
(58,93,1)
(38,23,1)
(48,8,1)
(5,70,1)
(69,15,1)
(14,0,1)
(73,30,1)
(71,55,1)
(76,31,1)
(60,29,1)
(33,44,1)
(14,35,1)
(67,82,1)
(5,41,1)
(25,70,1)
(59,66,1)
(40,18,1)
(59,70,1)
(34,14,1)
(57,65,1)
(4,35,1)
(43,77,1)
(44,63,2)
(80,63,2)
(82,80,2)
(51,63,2)
(76,36,2)
(78,63,2)
(46,36,2)
(31,36,2)
(14,70,2)
(4,63,2)
(93,63,2)
(80,25,2)
(5,63,2)
(43,57,2)
(43,70,2)
(25,63,2)
(49,63,2)
(89,63,2)
(58,63,2)
(42,63,2)
(16,63,2)
(7,63,2)
(88,63,2)
(82,63,2)
(29,63,2)
(13,59,2)
(67,70,2)
(25,70,2)
(81,63,2)
(2,63,2)
(35,63,2)
(70,63,2)
(91,36,2)
(92,63,2)
(14,64,2)
(57,65,2)
(59,70,2)
(41,63,2)
(51,9,2)
(14,35,2)
(89,71,2)
(30,63,2)
(13,63,2)
(55,63,2)
(47,57,2)
(20,36,2)
(27,30,2)
(39,63,2)
(77,57,2)
(48,63,2)
(68,63,2)
(18,57,2)
(53,36,2)
(57,63,2)
(75,57,2)
(65,63,2)
(66,63,2)
(54,57,2)
(6,63,2)
(67,82,2)
(37,63,2)
(71,55,2)
(26,36,2)
(38,63,2)
(83,63,2)
(67,63,2)
(69,30,2)
(60,63,2)
(82,74,2)
(64,63,2)
(30,14,2)
(23,63,2)
(5,70,2)
(15,30,2)
(53,91,2)
(3,63,2)
(51,89,2)
(71,63,2)
(86,63,2)
(73,30,2)
(33,63,2)
(56,63,2)
(14,63,2)
(17,63,2)
(1,57,2)
(36,13,2)
(34,63,2)
(40,63,2)
(14,0,2)
(28,30,2)
(36,63,2)
(70,51,2)
(62,30,2)
(91,13,2)
(24,63,2)
(53,70,2)
(0,63,2)
(74,63,2)
(65,70,2)
(8,63,2)
(59,63,2)
-----------------------------------
(0,* username = "User")
(1,password)
(2,password[0] = \\\'\\\\0\\\')
(3,passwordLen)
(4,password)
(5,password[0])
(6,0)
(7,0)
(8,100)
(9,char *)
(10,if(globalReturnsTrue()
(11,RET)
(12,domain)
(13,passwordLen = strlen(password)
(14,LogonUserA(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(15,"User logged in successfully.")
(16,username)
(17,"User")
(18,password[0] = \\\'\\\\0\\\')
(19,)
(20,password)
(21,if (LogonUserA(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(22,)
(23,LOGON32_LOGON_NETWORK)
(24,password)
(25,strlen(password)
(26,\\\'\\\\0\\\')
(27,hUser)
(28,printLine("Unable to login.")
(29,domain)
(30,LogonUserA(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(31,passwordLen)
(32,)
(33,password)
(34,0)
(35,* domain = "Domain")
(36,passwordLen > 0)
(37,\\\'\\\\0\\\')
(38,LOGON32_PROVIDER_DEFAULT)
(39,domain)
(40,passwordLen)
(41,0)
(42,password)
(43,password[0])
(44,passwordLen)
(45,passwordLen)
(46,password[passwordLen-1] = \\\'\\\\0\\\')
(47,"fgets()
(48,stdin)
(49,char)
(50,)
(51,(char *)
(52,)
(53,password[passwordLen-1])
(54,\\\'\\\\0\\\')
(55,sizeof(char)
(56,NULL)
(57,fgets(password, 100, stdin)
(58,username)
(59,strlen(password)
(60,"Domain")
(61,if (passwordLen > 0)
(62,CloseHandle(hUser)
(63,globalReturnsTrue()
(64,&hUser)
(65,fgets(password, 100, stdin)
(66,password)
(67,SecureZeroMemory(password, passwordLen * sizeof(char)
(68,char)
(69,printLine("User logged in successfully.")
(70,* password = (char *)
(71,100*sizeof(char)
(72,username)
(73,"Unable to login.")
(74,sizeof(char)
(75,printLine("fgets()
(76,1)
(77,0)
(78,password)
(79,)
(80,passwordLen = strlen(password)
(81,passwordLen)
(82,passwordLen * sizeof(char)
(83,100)
(84,password)
(85,hUser)
(86,password)
(87,if (fgets(password, 100, stdin)
(88,hUser)
(89,ALLOCA(100*sizeof(char)
(90,)
(91,passwordLen-1)
(92,passwordLen)
(93,passwordLen = 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
