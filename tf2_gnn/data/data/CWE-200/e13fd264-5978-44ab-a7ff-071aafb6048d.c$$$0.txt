-----label-----
1
-----code-----
void CWE226_Sensitive_Information_Uncleared_Before_Release__w32_char_declare_01_bad()
{
    {
        char password[100] = "";
        size_t passwordLen = 0;
        HANDLE hUser;
        char * username = "User";
        char * domain = "Domain";
        if (fgets(password, 100, stdin) == NULL)
        {
            printLine("fgets() failed");
            /* Restore NUL terminator if fgets fails */
            password[0] = '\0';
        }
        /* Remove the carriage return from the string that is inserted by fgets() */
        passwordLen = strlen(password);
        if (passwordLen > 0)
        {
            password[passwordLen-1] = '\0';
        }
        /* Use the password in LogonUser() to establish that it is "sensitive" */
        if (LogonUserA(
                    username,
                    domain,
                    password,
                    LOGON32_LOGON_NETWORK,
                    LOGON32_PROVIDER_DEFAULT,
                    &hUser) != 0)
        {
            printLine("User logged in successfully.");
            CloseHandle(hUser);
        }
        else
        {
            printLine("Unable to login.");
        }
        /* FLAW: Release password from the stack without first clearing the buffer */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
6,9
6,10
6,11
6,12
6,13
6,14
6,15
7,8
8,9
8,10
10,11
10,12
10,13
12,13
14,15
16,17
17,18
17,19
18,19
20,21
20,22
22,23
24,25
25,26
25,27
26,27
28,29
30,31
31,32
31,33
33,34
33,35
33,36
36,37
38,39
39,40
39,41
41,42
41,43
41,44
44,45
46,47
46,48
47,48
47,49
48,49
48,50
48,51
48,52
49,50
51,52
54,55
56,57
58,59
58,60
59,60
60,61
60,62
61,62
64,65
65,66
65,67
66,67
66,68
67,68
71,72
72,73
72,74
73,74
75,76
75,77
76,77
78,79
80,81
80,82
81,82
81,83
82,83
85,86
86,87
87,88
87,89
88,89
88,90
89,90
91,92
91,93
92,93
96,97
96,98
96,99
97,98
97,99
98,99
98,100
98,101
98,102
98,103
98,104
98,105
99,100
101,102
103,104
105,106
107,108
109,110
111,112
112,113
115,116
115,117
116,117
117,118
117,119
118,119
121,122
122,123
122,124
123,124
125,126
127,128
128,129
129,130
129,131
130,131
-----nextToken-----
2,4,9,11,13,15,19,21,23,27,29,32,34,35,37,40,42,43,45,50,52,53,55,57,62,63,68,69,70,74,77,79,83,84,90,93,94,95,100,102,104,106,108,110,113,114,119,120,124,126,131,132
-----computeFrom-----
47,48
47,49
65,66
65,67
72,73
72,74
81,82
81,83
87,88
87,89
91,92
91,93
97,98
97,99
-----guardedBy-----
52,68
83,93
113,126
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE226_Sensitive_Information_Uncleared_Before_Release__w32_char_declare_01_bad(){    {        char password[100] = "";        size_t passwordLen = 0;        HANDLE hUser;        char * username = "User";        char * domain = "Domain";        if (fgets(password, 100, stdin) == NULL)        {            printLine("fgets() failed");            /* Restore NUL terminator if fgets fails */            password[0] = '\0';        }        /* Remove the carriage return from the string that is inserted by fgets() */        passwordLen = strlen(password);        if (passwordLen > 0)        {            password[passwordLen-1] = '\0';        }        /* Use the password in LogonUser() to establish that it is "sensitive" */        if (LogonUserA(                    username,                    domain,                    password,                    LOGON32_LOGON_NETWORK,                    LOGON32_PROVIDER_DEFAULT,                    &hUser) != 0)        {            printLine("User logged in successfully.");            CloseHandle(hUser);        }        else        {            printLine("Unable to login.");        }        /* FLAW: Release password from the stack without first clearing the buffer */    }}
void
CWE226_Sensitive_Information_Uncleared_Before_Release__w32_char_declare_01_bad()
CWE226_Sensitive_Information_Uncleared_Before_Release__w32_char_declare_01_bad
{    {        char password[100] = "";        size_t passwordLen = 0;        HANDLE hUser;        char * username = "User";        char * domain = "Domain";        if (fgets(password, 100, stdin) == NULL)        {            printLine("fgets() failed");            /* Restore NUL terminator if fgets fails */            password[0] = '\0';        }        /* Remove the carriage return from the string that is inserted by fgets() */        passwordLen = strlen(password);        if (passwordLen > 0)        {            password[passwordLen-1] = '\0';        }        /* Use the password in LogonUser() to establish that it is "sensitive" */        if (LogonUserA(                    username,                    domain,                    password,                    LOGON32_LOGON_NETWORK,                    LOGON32_PROVIDER_DEFAULT,                    &hUser) != 0)        {            printLine("User logged in successfully.");            CloseHandle(hUser);        }        else        {            printLine("Unable to login.");        }        /* FLAW: Release password from the stack without first clearing the buffer */    }}
{        char password[100] = "";        size_t passwordLen = 0;        HANDLE hUser;        char * username = "User";        char * domain = "Domain";        if (fgets(password, 100, stdin) == NULL)        {            printLine("fgets() failed");            /* Restore NUL terminator if fgets fails */            password[0] = '\0';        }        /* Remove the carriage return from the string that is inserted by fgets() */        passwordLen = strlen(password);        if (passwordLen > 0)        {            password[passwordLen-1] = '\0';        }        /* Use the password in LogonUser() to establish that it is "sensitive" */        if (LogonUserA(                    username,                    domain,                    password,                    LOGON32_LOGON_NETWORK,                    LOGON32_PROVIDER_DEFAULT,                    &hUser) != 0)        {            printLine("User logged in successfully.");            CloseHandle(hUser);        }        else        {            printLine("Unable to login.");        }        /* FLAW: Release password from the stack without first clearing the buffer */    }
char password[100] = "";
char password[100] = "";
char
password[100] = ""
password
[100]
100
= ""
""
size_t passwordLen = 0;
size_t passwordLen = 0;
size_t
size_t
passwordLen = 0
passwordLen
= 0
0
HANDLE hUser;
HANDLE hUser;
HANDLE
HANDLE
hUser
hUser
char * username = "User";
char * username = "User";
char
* username = "User"
*
username
= "User"
"User"
char * domain = "Domain";
char * domain = "Domain";
char
* domain = "Domain"
*
domain
= "Domain"
"Domain"
if (fgets(password, 100, stdin) == NULL)        {            printLine("fgets() failed");            /* Restore NUL terminator if fgets fails */            password[0] = '\0';        }
fgets(password, 100, stdin) == NULL
fgets(password, 100, stdin)
fgets
fgets
password
password
100
stdin
stdin
NULL
NULL
{            printLine("fgets() failed");            /* Restore NUL terminator if fgets fails */            password[0] = '\0';        }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
password[0] = '\0';
password[0] = '\0'
password[0]
password
password
0
'\0'
passwordLen = strlen(password);
passwordLen = strlen(password)
passwordLen
passwordLen
strlen(password)
strlen
strlen
password
password
if (passwordLen > 0)        {            password[passwordLen-1] = '\0';        }
passwordLen > 0
passwordLen
passwordLen
0
{            password[passwordLen-1] = '\0';        }
password[passwordLen-1] = '\0';
password[passwordLen-1] = '\0'
password[passwordLen-1]
password
password
passwordLen-1
passwordLen
passwordLen
1
'\0'
if (LogonUserA(                    username,                    domain,                    password,                    LOGON32_LOGON_NETWORK,                    LOGON32_PROVIDER_DEFAULT,                    &hUser) != 0)        {            printLine("User logged in successfully.");            CloseHandle(hUser);        }        else        {            printLine("Unable to login.");        }
LogonUserA(                    username,                    domain,                    password,                    LOGON32_LOGON_NETWORK,                    LOGON32_PROVIDER_DEFAULT,                    &hUser) != 0
LogonUserA(                    username,                    domain,                    password,                    LOGON32_LOGON_NETWORK,                    LOGON32_PROVIDER_DEFAULT,                    &hUser)
LogonUserA
LogonUserA
username
username
domain
domain
password
password
LOGON32_LOGON_NETWORK
LOGON32_LOGON_NETWORK
LOGON32_PROVIDER_DEFAULT
LOGON32_PROVIDER_DEFAULT
&hUser
hUser
hUser
0
{            printLine("User logged in successfully.");            CloseHandle(hUser);        }
printLine("User logged in successfully.");
printLine("User logged in successfully.")
printLine
printLine
"User logged in successfully."
CloseHandle(hUser);
CloseHandle(hUser)
CloseHandle
CloseHandle
hUser
hUser
{            printLine("Unable to login.");        }
printLine("Unable to login.");
printLine("Unable to login.")
printLine
printLine
"Unable to login."
-----joern-----
(54,13,0)
(61,35,0)
(14,5,0)
(43,35,0)
(35,50,0)
(34,35,0)
(54,27,0)
(56,32,0)
(53,37,0)
(37,17,0)
(44,68,0)
(0,35,0)
(10,54,0)
(25,35,0)
(29,3,0)
(60,35,0)
(32,7,0)
(8,46,0)
(47,14,0)
(51,31,0)
(7,27,0)
(66,56,0)
(63,35,0)
(3,27,0)
(31,35,0)
(11,59,0)
(36,24,0)
(7,32,0)
(22,26,0)
(45,24,0)
(52,54,0)
(64,32,0)
(21,68,0)
(53,64,0)
(54,18,0)
(59,68,0)
(68,27,0)
(57,5,0)
(49,27,0)
(15,54,0)
(42,37,0)
(30,13,0)
(2,35,0)
(23,18,0)
(54,24,0)
(24,35,0)
(64,53,0)
(55,64,0)
(67,32,0)
(41,3,0)
(6,54,0)
(62,2,0)
(53,27,0)
(33,64,0)
(3,14,0)
(68,59,0)
(69,35,0)
(54,2,0)
(65,2,0)
(32,35,0)
(48,31,0)
(19,57,0)
(28,68,0)
(27,35,0)
(40,54,0)
(26,58,0)
(38,7,0)
(18,54,0)
(20,8,0)
(13,54,0)
(9,1,0)
(4,53,0)
(16,27,0)
(39,56,0)
(1,58,0)
(3,27,1)
(12,8,1)
(59,68,1)
(52,56,1)
(32,7,1)
(11,68,1)
(6,52,1)
(47,3,1)
(57,19,1)
(3,41,1)
(15,40,1)
(59,11,1)
(67,14,1)
(16,49,1)
(28,44,1)
(19,59,1)
(1,9,1)
(39,32,1)
(13,30,1)
(53,27,1)
(12,26,1)
(44,2,1)
(29,57,1)
(4,56,1)
(27,16,1)
(54,24,1)
(2,65,1)
(45,36,1)
(22,1,1)
(7,38,1)
(14,47,1)
(10,15,1)
(8,20,1)
(37,42,1)
(52,37,1)
(64,32,1)
(41,29,1)
(38,67,1)
(42,53,1)
(33,55,1)
(26,22,1)
(66,39,1)
(53,64,1)
(23,10,1)
(68,21,1)
(67,59,1)
(55,4,1)
(30,54,1)
(62,24,1)
(48,51,1)
(21,28,1)
(65,62,1)
(56,66,1)
(54,27,1)
(54,2,1)
(13,54,1)
(68,27,1)
(36,31,1)
(18,23,1)
(54,18,1)
(7,27,1)
(9,13,1)
(64,33,1)
(51,27,1)
(40,6,1)
(56,32,1)
(24,45,1)
(31,48,1)
(20,13,1)
(20,13,2)
(13,54,2)
(41,59,2)
(54,24,2)
(55,56,2)
(59,68,2)
(54,2,2)
(56,32,2)
(54,27,2)
(33,56,2)
(57,59,2)
(8,13,2)
(26,13,2)
(64,56,2)
(3,27,2)
(9,13,2)
(68,27,2)
(37,56,2)
(47,59,2)
(32,7,2)
(53,64,2)
(19,59,2)
(29,59,2)
(42,56,2)
(53,27,2)
(7,27,2)
(14,59,2)
(4,56,2)
(3,59,2)
(1,13,2)
(54,18,2)
(64,32,2)
(22,13,2)
(53,56,2)
-----------------------------------
(0,if (passwordLen > 0)
(1,printLine("User logged in successfully.")
(2,* domain = "Domain")
(3,password[0])
(4,password)
(5,)
(6,domain)
(7,strlen(password)
(8,printLine("Unable to login.")
(9,"User logged in successfully.")
(10,LOGON32_PROVIDER_DEFAULT)
(11,NULL)
(12,RET)
(13,LogonUserA(\\\\n                    username,\\\\n                    domain,\\\\n                    password,\\\\n                    LOGON32_LOGON_NETWORK,\\\\n                    LOGON32_PROVIDER_DEFAULT,\\\\n                    &hUser)
(14,password[0] = \\\'\\\\0\\\')
(15,LOGON32_LOGON_NETWORK)
(16,"")
(17,)
(18,&hUser)
(19,"fgets()
(20,"Unable to login.")
(21,stdin)
(22,hUser)
(23,hUser)
(24,* username = "User")
(25,username)
(26,CloseHandle(hUser)
(27,password[100] = "")
(28,100)
(29,password)
(30,0)
(31,passwordLen = 0)
(32,passwordLen = strlen(password)
(33,1)
(34,if (LogonUserA(\\\\n                    username,\\\\n                    domain,\\\\n                    password,\\\\n                    LOGON32_LOGON_NETWORK,\\\\n                    LOGON32_PROVIDER_DEFAULT,\\\\n                    &hUser)
(35,)
(36,username)
(37,password[passwordLen-1] = \\\'\\\\0\\\')
(38,password)
(39,passwordLen)
(40,password)
(41,0)
(42,\\\'\\\\0\\\')
(43,hUser)
(44,password)
(45,"User")
(46,)
(47,\\\'\\\\0\\\')
(48,0)
(49,password)
(50,)
(51,passwordLen)
(52,username)
(53,password[passwordLen-1])
(54,LogonUserA(\\\\n                    username,\\\\n                    domain,\\\\n                    password,\\\\n                    LOGON32_LOGON_NETWORK,\\\\n                    LOGON32_PROVIDER_DEFAULT,\\\\n                    &hUser)
(55,passwordLen)
(56,passwordLen > 0)
(57,printLine("fgets()
(58,)
(59,fgets(password, 100, stdin)
(60,passwordLen)
(61,domain)
(62,domain)
(63,if (fgets(password, 100, stdin)
(64,passwordLen-1)
(65,"Domain")
(66,0)
(67,passwordLen)
(68,fgets(password, 100, stdin)
(69,password)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
