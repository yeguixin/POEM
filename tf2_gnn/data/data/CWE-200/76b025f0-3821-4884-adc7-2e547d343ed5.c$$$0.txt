-----label-----
0
-----code-----
static void good1()
{
    if(5!=5)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        {
            char * password = (char *)malloc(100*sizeof(char));
            if (password == NULL) {exit(-1);}
            size_t passwordLen = 0;
            HANDLE hUser;
            char * username = "User";
            char * domain = "Domain";
            /* Initialize password */
            password[0] = '\0';
            if (fgets(password, 100, stdin) == NULL)
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                password[0] = '\0';
            }
            /* Remove the carriage return from the string that is inserted by fgets() */
            passwordLen = strlen(password);
            if (passwordLen > 0)
            {
                password[passwordLen-1] = '\0';
            }
            /* Use the password in LogonUser() to establish that it is "sensitive" */
            if (LogonUserA(
                        username,
                        domain,
                        password,
                        LOGON32_LOGON_NETWORK,
                        LOGON32_PROVIDER_DEFAULT,
                        &hUser) != 0)
            {
                printLine("User logged in successfully.");
                CloseHandle(hUser);
            }
            else
            {
                printLine("Unable to login.");
            }
            passwordLen = strlen(password);
            /* FIX: Clear password prior to freeing */
            SecureZeroMemory(password, passwordLen * sizeof(char));
            free(password);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
6,9
7,8
7,9
10,11
11,12
12,13
12,14
13,14
16,17
17,18
17,19
17,20
17,21
17,22
17,23
17,24
17,25
17,26
17,27
17,28
17,29
17,30
17,31
18,19
19,20
19,21
21,22
21,23
21,24
24,25
25,26
25,27
26,27
26,28
28,29
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
39,40
39,41
40,41
40,42
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
54,55
56,57
56,58
58,59
60,61
61,62
61,63
62,63
64,65
66,67
67,68
67,69
69,70
69,71
69,72
72,73
74,75
75,76
75,77
77,78
77,79
77,80
80,81
82,83
83,84
83,85
84,85
84,86
85,86
89,90
89,91
90,91
90,92
91,92
91,93
91,94
91,95
92,93
94,95
97,98
99,100
101,102
101,103
102,103
103,104
103,105
104,105
107,108
108,109
108,110
109,110
109,111
110,111
114,115
115,116
115,117
116,117
118,119
118,120
119,120
121,122
123,124
123,125
124,125
124,126
125,126
128,129
129,130
130,131
130,132
131,132
131,133
132,133
134,135
134,136
135,136
139,140
139,141
139,142
140,141
140,142
141,142
141,143
141,144
141,145
141,146
141,147
141,148
142,143
144,145
146,147
148,149
150,151
152,153
154,155
155,156
158,159
158,160
159,160
160,161
160,162
161,162
164,165
165,166
165,167
166,167
168,169
170,171
171,172
172,173
172,174
173,174
176,177
177,178
177,179
178,179
180,181
180,182
181,182
183,184
185,186
186,187
186,188
186,189
187,188
189,190
191,192
191,193
192,193
194,195
195,196
195,197
198,199
199,200
199,201
200,201
202,203
-----nextToken-----
2,4,8,9,14,15,20,22,23,27,29,32,34,37,38,42,44,49,51,55,57,59,63,65,68,70,71,73,76,78,79,81,86,87,88,93,95,96,98,100,105,106,111,112,113,117,120,122,126,127,133,136,137,138,143,145,147,149,151,153,156,157,162,163,167,169,174,175,179,182,184,188,190,193,196,197,201,203
-----computeFrom-----
7,8
7,9
33,34
33,35
40,41
40,42
83,84
83,85
90,91
90,92
108,109
108,110
115,116
115,117
124,125
124,126
130,131
130,132
134,135
134,136
140,141
140,142
177,178
177,179
191,192
191,193
-----guardedBy-----
95,111
126,136
156,169
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void good1(){    if(5!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            char * password = (char *)malloc(100*sizeof(char));            if (password == NULL) {exit(-1);}            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            /* Initialize password */            password[0] = '\0';            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            passwordLen = strlen(password);            /* FIX: Clear password prior to freeing */            SecureZeroMemory(password, passwordLen * sizeof(char));            free(password);        }    }}
static void
good1()
good1
{    if(5!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            char * password = (char *)malloc(100*sizeof(char));            if (password == NULL) {exit(-1);}            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            /* Initialize password */            password[0] = '\0';            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            passwordLen = strlen(password);            /* FIX: Clear password prior to freeing */            SecureZeroMemory(password, passwordLen * sizeof(char));            free(password);        }    }}
if(5!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            char * password = (char *)malloc(100*sizeof(char));            if (password == NULL) {exit(-1);}            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            /* Initialize password */            password[0] = '\0';            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            passwordLen = strlen(password);            /* FIX: Clear password prior to freeing */            SecureZeroMemory(password, passwordLen * sizeof(char));            free(password);        }    }
5!=5
5
5
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        {            char * password = (char *)malloc(100*sizeof(char));            if (password == NULL) {exit(-1);}            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            /* Initialize password */            password[0] = '\0';            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            passwordLen = strlen(password);            /* FIX: Clear password prior to freeing */            SecureZeroMemory(password, passwordLen * sizeof(char));            free(password);        }    }
{            char * password = (char *)malloc(100*sizeof(char));            if (password == NULL) {exit(-1);}            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            /* Initialize password */            password[0] = '\0';            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            passwordLen = strlen(password);            /* FIX: Clear password prior to freeing */            SecureZeroMemory(password, passwordLen * sizeof(char));            free(password);        }
char * password = (char *)malloc(100*sizeof(char));
char * password = (char *)malloc(100*sizeof(char));
char
* password = (char *)malloc(100*sizeof(char))
*
password
= (char *)malloc(100*sizeof(char))
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (password == NULL) {exit(-1);}
password == NULL
password
password
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
size_t passwordLen = 0;
size_t passwordLen = 0;
size_t
size_t
passwordLen = 0
passwordLen
= 0
0
HANDLE hUser;
HANDLE hUser;
HANDLE
HANDLE
hUser
hUser
char * username = "User";
char * username = "User";
char
* username = "User"
*
username
= "User"
"User"
char * domain = "Domain";
char * domain = "Domain";
char
* domain = "Domain"
*
domain
= "Domain"
"Domain"
password[0] = '\0';
password[0] = '\0'
password[0]
password
password
0
'\0'
if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }
fgets(password, 100, stdin) == NULL
fgets(password, 100, stdin)
fgets
fgets
password
password
100
stdin
stdin
NULL
NULL
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
password[0] = '\0';
password[0] = '\0'
password[0]
password
password
0
'\0'
passwordLen = strlen(password);
passwordLen = strlen(password)
passwordLen
passwordLen
strlen(password)
strlen
strlen
password
password
if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }
passwordLen > 0
passwordLen
passwordLen
0
{                password[passwordLen-1] = '\0';            }
password[passwordLen-1] = '\0';
password[passwordLen-1] = '\0'
password[passwordLen-1]
password
password
passwordLen-1
passwordLen
passwordLen
1
'\0'
if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }
LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0
LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser)
LogonUserA
LogonUserA
username
username
domain
domain
password
password
LOGON32_LOGON_NETWORK
LOGON32_LOGON_NETWORK
LOGON32_PROVIDER_DEFAULT
LOGON32_PROVIDER_DEFAULT
&hUser
hUser
hUser
0
{                printLine("User logged in successfully.");                CloseHandle(hUser);            }
printLine("User logged in successfully.");
printLine("User logged in successfully.")
printLine
printLine
"User logged in successfully."
CloseHandle(hUser);
CloseHandle(hUser)
CloseHandle
CloseHandle
hUser
hUser
{                printLine("Unable to login.");            }
printLine("Unable to login.");
printLine("Unable to login.")
printLine
printLine
"Unable to login."
passwordLen = strlen(password);
passwordLen = strlen(password)
passwordLen
passwordLen
strlen(password)
strlen
strlen
password
password
SecureZeroMemory(password, passwordLen * sizeof(char));
SecureZeroMemory(password, passwordLen * sizeof(char))
SecureZeroMemory
SecureZeroMemory
password
password
passwordLen * sizeof(char)
passwordLen
passwordLen
sizeof(char)
char
char

free(password);
free(password)
free
free
password
password
-----joern-----
(67,17,0)
(66,4,0)
(44,20,0)
(30,38,0)
(78,66,0)
(76,64,0)
(68,84,0)
(49,82,0)
(72,68,0)
(96,79,0)
(15,67,0)
(47,27,0)
(79,66,0)
(20,21,0)
(23,62,0)
(32,64,0)
(14,10,0)
(70,12,0)
(56,9,0)
(67,84,0)
(85,39,0)
(27,47,0)
(7,76,0)
(71,92,0)
(106,101,0)
(92,84,0)
(97,99,0)
(62,84,0)
(107,68,0)
(86,66,0)
(90,2,0)
(25,66,0)
(80,55,0)
(57,9,0)
(59,47,0)
(11,92,0)
(47,84,0)
(101,10,0)
(64,103,0)
(100,38,0)
(46,88,0)
(81,43,0)
(63,79,0)
(94,54,0)
(69,103,0)
(99,97,0)
(24,64,0)
(84,47,0)
(16,75,0)
(55,80,0)
(43,29,0)
(38,84,0)
(87,80,0)
(13,84,0)
(95,38,0)
(75,8,0)
(83,51,0)
(45,97,0)
(37,66,0)
(98,64,0)
(93,73,0)
(92,71,0)
(84,66,0)
(17,66,0)
(101,66,0)
(105,66,0)
(35,37,0)
(36,54,0)
(58,104,0)
(10,84,0)
(82,71,0)
(71,82,0)
(6,46,0)
(18,103,0)
(65,66,0)
(53,66,0)
(108,64,0)
(89,108,0)
(40,67,0)
(68,46,0)
(55,61,0)
(3,57,0)
(74,34,0)
(73,88,0)
(77,64,0)
(5,71,0)
(71,101,0)
(59,12,0)
(104,84,0)
(42,64,0)
(33,104,0)
(38,95,0)
(64,84,0)
(62,66,0)
(99,84,0)
(19,74,0)
(47,59,0)
(41,66,0)
(64,79,0)
(64,108,0)
(50,97,0)
(99,74,0)
(0,12,0)
(9,51,0)
(31,66,0)
(12,59,0)
(39,29,0)
(51,84,0)
(22,57,0)
(1,38,0)
(10,101,0)
(92,66,0)
(52,95,0)
(12,0,0)
(102,17,0)
(91,66,0)
(103,66,0)
(97,9,0)
(28,0,0)
(60,99,0)
(51,9,0)
(9,66,0)
(26,37,0)
(64,76,0)
(67,84,1)
(14,106,1)
(82,49,1)
(10,14,1)
(12,0,1)
(71,101,1)
(87,104,1)
(44,54,1)
(74,19,1)
(38,84,1)
(99,84,1)
(104,58,1)
(48,62,1)
(106,43,1)
(68,84,1)
(19,99,1)
(24,77,1)
(103,18,1)
(23,92,1)
(46,6,1)
(92,84,1)
(95,52,1)
(20,44,1)
(15,103,1)
(83,56,1)
(51,83,1)
(52,38,1)
(0,28,1)
(57,9,1)
(55,80,1)
(97,50,1)
(64,84,1)
(79,63,1)
(9,51,1)
(97,9,1)
(43,81,1)
(33,84,1)
(76,7,1)
(48,20,1)
(42,74,1)
(67,40,1)
(1,100,1)
(102,67,1)
(81,39,1)
(95,38,1)
(35,104,1)
(59,12,1)
(56,95,1)
(54,36,1)
(36,94,1)
(57,3,1)
(22,9,1)
(98,24,1)
(39,85,1)
(106,75,1)
(89,64,1)
(51,84,1)
(64,103,1)
(96,37,1)
(7,32,1)
(37,26,1)
(70,13,1)
(80,87,1)
(107,72,1)
(68,107,1)
(42,57,1)
(100,17,1)
(16,108,1)
(73,93,1)
(75,16,1)
(63,96,1)
(10,84,1)
(60,57,1)
(62,84,1)
(77,42,1)
(72,73,1)
(71,82,1)
(40,15,1)
(11,101,1)
(92,71,1)
(84,47,1)
(64,76,1)
(6,68,1)
(64,79,1)
(104,84,1)
(38,30,1)
(85,108,1)
(58,33,1)
(17,102,1)
(28,70,1)
(32,98,1)
(45,60,1)
(35,55,1)
(30,1,1)
(69,79,1)
(13,54,1)
(56,46,1)
(50,45,1)
(18,69,1)
(62,23,1)
(99,97,1)
(101,10,1)
(47,59,1)
(49,5,1)
(108,64,1)
(47,27,1)
(3,22,1)
(26,35,1)
(5,11,1)
(93,95,1)
(108,89,1)
(12,54,2)
(0,54,2)
(93,95,2)
(99,57,2)
(51,54,2)
(84,47,2)
(42,54,2)
(18,54,2)
(38,54,2)
(20,54,2)
(9,54,2)
(52,54,2)
(26,54,2)
(75,108,2)
(82,54,2)
(71,101,2)
(46,95,2)
(58,54,2)
(64,54,2)
(87,104,2)
(44,54,2)
(62,54,2)
(30,54,2)
(67,54,2)
(73,95,2)
(3,54,2)
(38,84,2)
(55,80,2)
(24,54,2)
(76,54,2)
(64,76,2)
(14,54,2)
(97,9,2)
(59,12,2)
(96,54,2)
(106,54,2)
(39,108,2)
(50,57,2)
(5,54,2)
(45,57,2)
(97,57,2)
(22,54,2)
(59,54,2)
(60,57,2)
(47,27,2)
(92,71,2)
(67,84,2)
(103,54,2)
(71,54,2)
(10,84,2)
(104,54,2)
(85,108,2)
(99,84,2)
(9,51,2)
(12,0,2)
(55,104,2)
(79,54,2)
(15,54,2)
(102,54,2)
(83,54,2)
(104,84,2)
(101,54,2)
(40,54,2)
(77,54,2)
(99,97,2)
(70,54,2)
(17,54,2)
(108,54,2)
(47,54,2)
(23,54,2)
(32,54,2)
(74,57,2)
(19,57,2)
(81,108,2)
(63,54,2)
(11,54,2)
(80,104,2)
(84,54,2)
(43,108,2)
(13,54,2)
(64,103,2)
(57,9,2)
(68,84,2)
(57,54,2)
(72,95,2)
(35,54,2)
(92,84,2)
(64,84,2)
(10,54,2)
(100,54,2)
(62,84,2)
(49,54,2)
(33,54,2)
(108,64,2)
(16,108,2)
(68,95,2)
(95,38,2)
(71,82,2)
(64,79,2)
(37,54,2)
(92,54,2)
(101,10,2)
(47,59,2)
(1,54,2)
(56,54,2)
(69,54,2)
(107,95,2)
(51,84,2)
(98,54,2)
(7,54,2)
(89,54,2)
(95,54,2)
(28,54,2)
(6,95,2)
-----------------------------------
(0,sizeof(char)
(1,100)
(2,)
(3,0)
(4,)
(5,passwordLen)
(6,\\\'\\\\0\\\')
(7,hUser)
(8,)
(9,passwordLen = strlen(password)
(10,strlen(password)
(11,password)
(12,100*sizeof(char)
(13,password)
(14,password)
(15,password)
(16,"Unable to login.")
(17,password[0] = \\\'\\\\0\\\')
(18,"Domain")
(19,\\\'\\\\0\\\')
(20,printLine("Benign, fixed string")
(21,)
(22,passwordLen)
(23,password)
(24,password)
(25,passwordLen)
(26,0)
(27,char *)
(28,char)
(29,)
(30,stdin)
(31,domain)
(32,LOGON32_PROVIDER_DEFAULT)
(33,password)
(34,)
(35,passwordLen)
(36,5)
(37,passwordLen = 0)
(38,fgets(password, 100, stdin)
(39,printLine("User logged in successfully.")
(40,0)
(41,hUser)
(42,username)
(43,CloseHandle(hUser)
(44,"Benign, fixed string")
(45,passwordLen)
(46,password[0] = \\\'\\\\0\\\')
(47,(char *)
(48,RET)
(49,char)
(50,1)
(51,strlen(password)
(52,NULL)
(53,if (LogonUserA(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(54,5!=5)
(55,exit(-1)
(56,passwordLen)
(57,passwordLen > 0)
(58,NULL)
(59,malloc(100*sizeof(char)
(60,password)
(61,)
(62,free(password)
(63,"User")
(64,LogonUserA(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(65,username)
(66,)
(67,password[0])
(68,password[0])
(69,domain)
(70,100)
(71,passwordLen * sizeof(char)
(72,password)
(73,printLine("fgets()
(74,password[passwordLen-1] = \\\'\\\\0\\\')
(75,printLine("Unable to login.")
(76,&hUser)
(77,domain)
(78,if (passwordLen > 0)
(79,* username = "User")
(80,-1)
(81,hUser)
(82,sizeof(char)
(83,password)
(84,* password = (char *)
(85,"User logged in successfully.")
(86,if (fgets(password, 100, stdin)
(87,1)
(88,)
(89,0)
(90,if(5!=5)
(91,if (password == NULL)
(92,SecureZeroMemory(password, passwordLen * sizeof(char)
(93,"fgets()
(94,5)
(95,fgets(password, 100, stdin)
(96,username)
(97,passwordLen-1)
(98,LOGON32_LOGON_NETWORK)
(99,password[passwordLen-1])
(100,password)
(101,passwordLen = strlen(password)
(102,\\\'\\\\0\\\')
(103,* domain = "Domain")
(104,password == NULL)
(105,password)
(106,passwordLen)
(107,0)
(108,LogonUserA(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
