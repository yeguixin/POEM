-----label-----
0
-----code-----
static void good2()
{
    if(5==5)
    {
        /* FIX: error message is general */
        printLine("Not in path");
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
7,9
10,11
11,12
12,13
12,14
13,14
-----nextToken-----
2,4,8,9,14,15
-----computeFrom-----
7,8
7,9
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void good2(){    if(5==5)    {        /* FIX: error message is general */        printLine("Not in path");    }}
static void
good2()
good2
{    if(5==5)    {        /* FIX: error message is general */        printLine("Not in path");    }}
if(5==5)    {        /* FIX: error message is general */        printLine("Not in path");    }
5==5
5
5
{        /* FIX: error message is general */        printLine("Not in path");    }
printLine("Not in path");
printLine("Not in path")
printLine
printLine
"Not in path"
-----joern-----
(1,2,0)
(3,8,0)
(6,0,0)
(4,0,0)
(5,3,0)
(5,0,1)
(4,6,1)
(3,5,1)
(7,0,1)
(7,3,1)
(0,4,1)
(5,0,2)
(3,0,2)
-----------------------------------
(0,5==5)
(1,if(5==5)
(2,)
(3,printLine("Not in path")
(4,5)
(5,"Not in path")
(6,5)
(7,RET)
(8,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
