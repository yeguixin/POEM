-----label-----
1
-----code-----
void CWE244_Heap_Inspection__w32_wchar_t_free_02_bad()
{
    if(1)
    {
        {
            wchar_t * password = (wchar_t *)malloc(100*sizeof(wchar_t));
            if (password == NULL) {exit(-1);}
            size_t passwordLen = 0;
            HANDLE hUser;
            wchar_t * username = L"User";
            wchar_t * domain = L"Domain";
            /* Initialize password */
            password[0] = L'\0';
            if (fgetws(password, 100, stdin) == NULL)
            {
                printLine("fgetws() failed");
                /* Restore NUL terminator if fgetws fails */
                password[0] = L'\0';
            }
            /* Remove the carriage return from the string that is inserted by fgetws() */
            passwordLen = wcslen(password);
            if (passwordLen > 0)
            {
                password[passwordLen-1] = L'\0';
            }
            /* Use the password in LogonUser() to establish that it is "sensitive" */
            if (LogonUserW(
                        username,
                        domain,
                        password,
                        LOGON32_LOGON_NETWORK,
                        LOGON32_PROVIDER_DEFAULT,
                        &hUser) != 0)
            {
                printLine("User logged in successfully.");
                CloseHandle(hUser);
            }
            else
            {
                printLine("Unable to login.");
            }
            /* FLAW: free() password without clearing the password buffer */
            free(password);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
8,9
9,10
9,11
9,12
9,13
9,14
9,15
9,16
9,17
9,18
9,19
9,20
9,21
10,11
11,12
11,13
13,14
13,15
13,16
16,17
17,18
17,19
18,19
18,20
20,21
22,23
22,24
23,24
25,26
25,27
27,28
28,29
28,30
31,32
31,33
32,33
32,34
33,34
35,36
37,38
38,39
39,40
39,41
40,41
42,43
44,45
45,46
45,47
46,47
48,49
48,50
50,51
52,53
53,54
53,55
54,55
56,57
58,59
59,60
59,61
61,62
61,63
61,64
64,65
66,67
67,68
67,69
69,70
69,71
69,72
72,73
74,75
75,76
75,77
76,77
76,78
77,78
81,82
81,83
82,83
82,84
83,84
83,85
83,86
83,87
84,85
86,87
89,90
91,92
93,94
93,95
94,95
95,96
95,97
96,97
99,100
100,101
100,102
101,102
101,103
102,103
106,107
107,108
107,109
108,109
110,111
110,112
111,112
113,114
115,116
115,117
116,117
116,118
117,118
120,121
121,122
122,123
122,124
123,124
123,125
124,125
126,127
126,128
127,128
131,132
131,133
131,134
132,133
132,134
133,134
133,135
133,136
133,137
133,138
133,139
133,140
134,135
136,137
138,139
140,141
142,143
144,145
146,147
147,148
150,151
150,152
151,152
152,153
152,154
153,154
156,157
157,158
157,159
158,159
160,161
162,163
163,164
164,165
164,166
165,166
168,169
169,170
169,171
170,171
172,173
-----nextToken-----
2,4,7,12,14,15,19,21,24,26,29,30,34,36,41,43,47,49,51,55,57,60,62,63,65,68,70,71,73,78,79,80,85,87,88,90,92,97,98,103,104,105,109,112,114,118,119,125,128,129,130,135,137,139,141,143,145,148,149,154,155,159,161,166,167,171,173
-----computeFrom-----
25,26
25,27
32,33
32,34
75,76
75,77
82,83
82,84
100,101
100,102
107,108
107,109
116,117
116,118
122,123
122,124
126,127
126,128
132,133
132,134
-----guardedBy-----
87,103
118,128
148,161
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE244_Heap_Inspection__w32_wchar_t_free_02_bad(){    if(1)    {        {            wchar_t * password = (wchar_t *)malloc(100*sizeof(wchar_t));            if (password == NULL) {exit(-1);}            size_t passwordLen = 0;            HANDLE hUser;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            /* Initialize password */            password[0] = L'\0';            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: free() password without clearing the password buffer */            free(password);        }    }}
void
CWE244_Heap_Inspection__w32_wchar_t_free_02_bad()
CWE244_Heap_Inspection__w32_wchar_t_free_02_bad
{    if(1)    {        {            wchar_t * password = (wchar_t *)malloc(100*sizeof(wchar_t));            if (password == NULL) {exit(-1);}            size_t passwordLen = 0;            HANDLE hUser;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            /* Initialize password */            password[0] = L'\0';            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: free() password without clearing the password buffer */            free(password);        }    }}
if(1)    {        {            wchar_t * password = (wchar_t *)malloc(100*sizeof(wchar_t));            if (password == NULL) {exit(-1);}            size_t passwordLen = 0;            HANDLE hUser;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            /* Initialize password */            password[0] = L'\0';            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: free() password without clearing the password buffer */            free(password);        }    }
1
{        {            wchar_t * password = (wchar_t *)malloc(100*sizeof(wchar_t));            if (password == NULL) {exit(-1);}            size_t passwordLen = 0;            HANDLE hUser;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            /* Initialize password */            password[0] = L'\0';            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: free() password without clearing the password buffer */            free(password);        }    }
{            wchar_t * password = (wchar_t *)malloc(100*sizeof(wchar_t));            if (password == NULL) {exit(-1);}            size_t passwordLen = 0;            HANDLE hUser;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            /* Initialize password */            password[0] = L'\0';            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: free() password without clearing the password buffer */            free(password);        }
wchar_t * password = (wchar_t *)malloc(100*sizeof(wchar_t));
wchar_t * password = (wchar_t *)malloc(100*sizeof(wchar_t));
wchar_t
* password = (wchar_t *)malloc(100*sizeof(wchar_t))
*
password
= (wchar_t *)malloc(100*sizeof(wchar_t))
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (password == NULL) {exit(-1);}
password == NULL
password
password
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
size_t passwordLen = 0;
size_t passwordLen = 0;
size_t
size_t
passwordLen = 0
passwordLen
= 0
0
HANDLE hUser;
HANDLE hUser;
HANDLE
HANDLE
hUser
hUser
wchar_t * username = L"User";
wchar_t * username = L"User";
wchar_t
* username = L"User"
*
username
= L"User"
L"User"
wchar_t * domain = L"Domain";
wchar_t * domain = L"Domain";
wchar_t
* domain = L"Domain"
*
domain
= L"Domain"
L"Domain"
password[0] = L'\0';
password[0] = L'\0'
password[0]
password
password
0
L'\0'
if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }
fgetws(password, 100, stdin) == NULL
fgetws(password, 100, stdin)
fgetws
fgetws
password
password
100
stdin
stdin
NULL
NULL
{                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }
printLine("fgetws() failed");
printLine("fgetws() failed")
printLine
printLine
"fgetws() failed"
password[0] = L'\0';
password[0] = L'\0'
password[0]
password
password
0
L'\0'
passwordLen = wcslen(password);
passwordLen = wcslen(password)
passwordLen
passwordLen
wcslen(password)
wcslen
wcslen
password
password
if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }
passwordLen > 0
passwordLen
passwordLen
0
{                password[passwordLen-1] = L'\0';            }
password[passwordLen-1] = L'\0';
password[passwordLen-1] = L'\0'
password[passwordLen-1]
password
password
passwordLen-1
passwordLen
passwordLen
1
L'\0'
if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }
LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0
LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser)
LogonUserW
LogonUserW
username
username
domain
domain
password
password
LOGON32_LOGON_NETWORK
LOGON32_LOGON_NETWORK
LOGON32_PROVIDER_DEFAULT
LOGON32_PROVIDER_DEFAULT
&hUser
hUser
hUser
0
{                printLine("User logged in successfully.");                CloseHandle(hUser);            }
printLine("User logged in successfully.");
printLine("User logged in successfully.")
printLine
printLine
"User logged in successfully."
CloseHandle(hUser);
CloseHandle(hUser)
CloseHandle
CloseHandle
hUser
hUser
{                printLine("Unable to login.");            }
printLine("Unable to login.");
printLine("Unable to login.")
printLine
printLine
"Unable to login."
free(password);
free(password)
free
free
password
password
-----joern-----
(26,45,0)
(64,36,0)
(8,0,0)
(21,6,0)
(44,6,0)
(60,68,0)
(38,3,0)
(12,35,0)
(25,0,0)
(16,0,0)
(31,16,0)
(42,65,0)
(52,37,0)
(33,15,0)
(51,49,0)
(35,49,0)
(49,35,0)
(57,65,0)
(5,35,0)
(70,0,0)
(47,65,0)
(46,54,0)
(55,32,0)
(27,45,0)
(65,41,0)
(23,55,0)
(50,65,0)
(28,6,0)
(30,3,0)
(69,60,0)
(45,61,0)
(5,65,0)
(62,0,0)
(35,65,0)
(6,37,0)
(11,25,0)
(49,61,0)
(9,56,0)
(1,43,0)
(61,45,0)
(45,26,0)
(14,65,0)
(6,35,0)
(71,26,0)
(40,20,0)
(40,35,0)
(53,65,0)
(0,25,0)
(20,65,0)
(17,40,0)
(3,35,0)
(61,49,0)
(29,65,0)
(24,0,0)
(48,50,0)
(4,65,0)
(59,68,0)
(66,65,0)
(72,9,0)
(19,5,0)
(63,32,0)
(18,20,0)
(58,65,0)
(43,64,0)
(10,0,0)
(39,63,0)
(64,43,0)
(37,6,0)
(0,16,0)
(0,35,0)
(13,54,0)
(20,40,0)
(7,50,0)
(49,51,0)
(2,65,0)
(54,20,0)
(34,22,0)
(30,35,1)
(10,24,1)
(37,6,1)
(44,42,1)
(49,61,1)
(55,23,1)
(7,64,1)
(0,16,1)
(5,19,1)
(14,50,1)
(19,9,1)
(18,37,1)
(48,7,1)
(9,72,1)
(8,54,1)
(24,70,1)
(27,12,1)
(3,35,1)
(54,46,1)
(13,20,1)
(37,52,1)
(69,37,1)
(73,67,1)
(20,40,1)
(72,25,1)
(3,38,1)
(16,31,1)
(71,27,1)
(70,62,1)
(59,60,1)
(19,55,1)
(25,0,1)
(34,54,1)
(17,18,1)
(50,48,1)
(40,35,1)
(25,11,1)
(21,28,1)
(46,13,1)
(8,34,1)
(40,17,1)
(28,44,1)
(43,1,1)
(6,21,1)
(0,35,1)
(45,26,1)
(6,35,1)
(52,6,1)
(7,3,1)
(5,35,1)
(49,51,1)
(73,5,1)
(63,39,1)
(26,71,1)
(23,63,1)
(1,3,1)
(11,0,1)
(38,30,1)
(54,20,1)
(31,10,1)
(61,45,1)
(62,8,1)
(58,14,1)
(35,49,1)
(12,67,1)
(60,69,1)
(42,58,1)
(18,59,1)
(39,25,1)
(64,43,1)
(64,3,2)
(61,45,2)
(12,67,2)
(70,67,2)
(49,51,2)
(69,37,2)
(72,25,2)
(5,67,2)
(3,35,2)
(52,67,2)
(45,67,2)
(37,67,2)
(5,35,2)
(0,35,2)
(25,67,2)
(16,67,2)
(62,67,2)
(55,25,2)
(49,67,2)
(20,67,2)
(11,67,2)
(27,67,2)
(40,35,2)
(19,67,2)
(28,67,2)
(0,67,2)
(6,67,2)
(3,67,2)
(21,67,2)
(49,61,2)
(34,54,2)
(71,67,2)
(43,3,2)
(35,49,2)
(59,37,2)
(18,67,2)
(23,25,2)
(20,40,2)
(24,67,2)
(58,67,2)
(7,67,2)
(26,67,2)
(61,67,2)
(64,43,2)
(25,0,2)
(6,35,2)
(38,67,2)
(63,25,2)
(42,67,2)
(14,67,2)
(8,67,2)
(17,67,2)
(46,67,2)
(50,67,2)
(45,26,2)
(0,16,2)
(40,67,2)
(60,37,2)
(39,25,2)
(54,67,2)
(31,67,2)
(1,3,2)
(44,67,2)
(9,25,2)
(13,67,2)
(37,6,2)
(30,67,2)
(10,67,2)
(48,67,2)
(35,67,2)
(54,20,2)
-----------------------------------
(0,LogonUserW(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(1,1)
(2,password)
(3,password == NULL)
(4,if (fgetws(password, 100, stdin)
(5,free(password)
(6,fgetws(password, 100, stdin)
(7,passwordLen)
(8,username)
(9,printLine("Unable to login.")
(10,LOGON32_PROVIDER_DEFAULT)
(11,0)
(12,password)
(13,passwordLen)
(14,"User")
(15,)
(16,&hUser)
(17,password)
(18,passwordLen)
(19,password)
(20,passwordLen = wcslen(password)
(21,stdin)
(22,)
(23,hUser)
(24,LOGON32_LOGON_NETWORK)
(25,LogonUserW(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(26,sizeof(wchar_t)
(27,100)
(28,100)
(29,passwordLen)
(30,password)
(31,hUser)
(32,)
(33,if(1)
(34,\\\'\\\\0\\\')
(35,* password = (wchar_t *)
(36,)
(37,fgetws(password, 100, stdin)
(38,NULL)
(39,"User logged in successfully.")
(40,wcslen(password)
(41,)
(42,\\\'\\\\0\\\')
(43,-1)
(44,password)
(45,100*sizeof(wchar_t)
(46,0)
(47,hUser)
(48,0)
(49,(wchar_t *)
(50,passwordLen = 0)
(51,wchar_t *)
(52,NULL)
(53,if (password == NULL)
(54,passwordLen > 0)
(55,CloseHandle(hUser)
(56,)
(57,if (LogonUserW(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(58,"Domain")
(59,\\\'\\\\0\\\')
(60,printLine("fgetws()
(61,malloc(100*sizeof(wchar_t)
(62,domain)
(63,printLine("User logged in successfully.")
(64,exit(-1)
(65,)
(66,if (passwordLen > 0)
(67,1)
(68,)
(69,"fgetws()
(70,password)
(71,wchar_t)
(72,"Unable to login.")
(73,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
