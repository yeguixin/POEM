-----label-----
1
-----code-----
void CWE226_Sensitive_Information_Uncleared_Before_Release__w32_char_declare_14_bad()
{
    if(globalFive==5)
    {
        {
            char password[100] = "";
            size_t passwordLen = 0;
            HANDLE hUser;
            char * username = "User";
            char * domain = "Domain";
            if (fgets(password, 100, stdin) == NULL)
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                password[0] = '\0';
            }
            /* Remove the carriage return from the string that is inserted by fgets() */
            passwordLen = strlen(password);
            if (passwordLen > 0)
            {
                password[passwordLen-1] = '\0';
            }
            /* Use the password in LogonUser() to establish that it is "sensitive" */
            if (LogonUserA(
                        username,
                        domain,
                        password,
                        LOGON32_LOGON_NETWORK,
                        LOGON32_PROVIDER_DEFAULT,
                        &hUser) != 0)
            {
                printLine("User logged in successfully.");
                CloseHandle(hUser);
            }
            else
            {
                printLine("Unable to login.");
            }
            /* FLAW: Release password from the stack without first clearing the buffer */
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
7,9
8,9
11,12
12,13
12,14
12,15
12,16
12,17
12,18
12,19
12,20
12,21
13,14
14,15
14,16
16,17
16,18
16,19
18,19
20,21
22,23
23,24
23,25
24,25
26,27
26,28
28,29
30,31
31,32
31,33
32,33
34,35
36,37
37,38
37,39
39,40
39,41
39,42
42,43
44,45
45,46
45,47
47,48
47,49
47,50
50,51
52,53
52,54
53,54
53,55
54,55
54,56
54,57
54,58
55,56
57,58
60,61
62,63
64,65
64,66
65,66
66,67
66,68
67,68
70,71
71,72
71,73
72,73
72,74
73,74
77,78
78,79
78,80
79,80
81,82
81,83
82,83
84,85
86,87
86,88
87,88
87,89
88,89
91,92
92,93
93,94
93,95
94,95
94,96
95,96
97,98
97,99
98,99
102,103
102,104
102,105
103,104
103,105
104,105
104,106
104,107
104,108
104,109
104,110
104,111
105,106
107,108
109,110
111,112
113,114
115,116
117,118
118,119
121,122
121,123
122,123
123,124
123,125
124,125
127,128
128,129
128,130
129,130
131,132
133,134
134,135
135,136
135,137
136,137
-----nextToken-----
2,4,9,10,15,17,19,21,25,27,29,33,35,38,40,41,43,46,48,49,51,56,58,59,61,63,68,69,74,75,76,80,83,85,89,90,96,99,100,101,106,108,110,112,114,116,119,120,125,126,130,132,137,138
-----computeFrom-----
7,8
7,9
53,54
53,55
71,72
71,73
78,79
78,80
87,88
87,89
93,94
93,95
97,98
97,99
103,104
103,105
-----guardedBy-----
58,74
89,99
119,132
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE226_Sensitive_Information_Uncleared_Before_Release__w32_char_declare_14_bad(){    if(globalFive==5)    {        {            char password[100] = "";            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Release password from the stack without first clearing the buffer */        }    }}
void
CWE226_Sensitive_Information_Uncleared_Before_Release__w32_char_declare_14_bad()
CWE226_Sensitive_Information_Uncleared_Before_Release__w32_char_declare_14_bad
{    if(globalFive==5)    {        {            char password[100] = "";            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Release password from the stack without first clearing the buffer */        }    }}
if(globalFive==5)    {        {            char password[100] = "";            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Release password from the stack without first clearing the buffer */        }    }
globalFive==5
globalFive
globalFive
5
{        {            char password[100] = "";            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Release password from the stack without first clearing the buffer */        }    }
{            char password[100] = "";            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Release password from the stack without first clearing the buffer */        }
char password[100] = "";
char password[100] = "";
char
password[100] = ""
password
[100]
100
= ""
""
size_t passwordLen = 0;
size_t passwordLen = 0;
size_t
size_t
passwordLen = 0
passwordLen
= 0
0
HANDLE hUser;
HANDLE hUser;
HANDLE
HANDLE
hUser
hUser
char * username = "User";
char * username = "User";
char
* username = "User"
*
username
= "User"
"User"
char * domain = "Domain";
char * domain = "Domain";
char
* domain = "Domain"
*
domain
= "Domain"
"Domain"
if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }
fgets(password, 100, stdin) == NULL
fgets(password, 100, stdin)
fgets
fgets
password
password
100
stdin
stdin
NULL
NULL
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
password[0] = '\0';
password[0] = '\0'
password[0]
password
password
0
'\0'
passwordLen = strlen(password);
passwordLen = strlen(password)
passwordLen
passwordLen
strlen(password)
strlen
strlen
password
password
if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }
passwordLen > 0
passwordLen
passwordLen
0
{                password[passwordLen-1] = '\0';            }
password[passwordLen-1] = '\0';
password[passwordLen-1] = '\0'
password[passwordLen-1]
password
password
passwordLen-1
passwordLen
passwordLen
1
'\0'
if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }
LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0
LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser)
LogonUserA
LogonUserA
username
username
domain
domain
password
password
LOGON32_LOGON_NETWORK
LOGON32_LOGON_NETWORK
LOGON32_PROVIDER_DEFAULT
LOGON32_PROVIDER_DEFAULT
&hUser
hUser
hUser
0
{                printLine("User logged in successfully.");                CloseHandle(hUser);            }
printLine("User logged in successfully.");
printLine("User logged in successfully.")
printLine
printLine
"User logged in successfully."
CloseHandle(hUser);
CloseHandle(hUser)
CloseHandle
CloseHandle
hUser
hUser
{                printLine("Unable to login.");            }
printLine("Unable to login.");
printLine("Unable to login.")
printLine
printLine
"Unable to login."
-----joern-----
(14,55,0)
(57,13,0)
(36,8,0)
(6,31,0)
(45,55,0)
(24,31,0)
(51,43,0)
(68,29,0)
(55,6,0)
(38,24,0)
(25,31,0)
(55,39,0)
(35,31,0)
(63,56,0)
(28,47,0)
(60,32,0)
(34,43,0)
(31,49,0)
(7,22,0)
(32,60,0)
(70,69,0)
(67,29,0)
(29,30,0)
(43,51,0)
(8,31,0)
(61,13,0)
(19,31,0)
(60,24,0)
(3,56,0)
(74,43,0)
(46,30,0)
(44,31,0)
(2,55,0)
(47,58,0)
(55,13,0)
(10,60,0)
(32,13,0)
(16,31,0)
(1,31,0)
(30,59,0)
(40,55,0)
(53,45,0)
(43,13,0)
(15,50,0)
(33,55,0)
(17,8,0)
(5,6,0)
(24,11,0)
(0,70,0)
(55,45,0)
(9,12,0)
(21,27,0)
(26,55,0)
(50,31,0)
(20,66,0)
(22,69,0)
(12,59,0)
(62,6,0)
(11,24,0)
(39,55,0)
(73,31,0)
(11,13,0)
(23,31,0)
(4,51,0)
(64,32,0)
(71,65,0)
(41,50,0)
(18,11,0)
(29,13,0)
(65,48,0)
(52,43,0)
(37,39,0)
(72,66,0)
(66,24,0)
(13,31,0)
(54,60,0)
(32,47,0)
(55,8,0)
(13,61,1)
(42,56,1)
(39,37,1)
(32,13,1)
(46,29,1)
(67,12,1)
(68,67,1)
(29,13,1)
(40,33,1)
(33,47,1)
(52,74,1)
(42,65,1)
(36,6,1)
(30,46,1)
(37,55,1)
(11,13,1)
(26,2,1)
(5,50,1)
(60,24,1)
(4,43,1)
(74,8,1)
(11,18,1)
(7,39,1)
(20,72,1)
(34,52,1)
(66,20,1)
(57,56,1)
(51,4,1)
(60,10,1)
(39,55,1)
(0,22,1)
(9,51,1)
(66,24,1)
(17,36,1)
(15,41,1)
(6,62,1)
(8,17,1)
(63,3,1)
(12,9,1)
(55,13,1)
(55,45,1)
(56,63,1)
(33,66,1)
(38,30,1)
(41,13,1)
(32,60,1)
(28,32,1)
(45,53,1)
(55,6,1)
(24,11,1)
(50,15,1)
(55,8,1)
(47,28,1)
(42,70,1)
(53,14,1)
(22,7,1)
(65,71,1)
(54,64,1)
(2,40,1)
(43,34,1)
(38,51,1)
(10,54,1)
(62,5,1)
(18,38,1)
(64,66,1)
(71,39,1)
(72,24,1)
(70,0,1)
(61,57,1)
(14,26,1)
(29,68,1)
(43,13,1)
(51,43,1)
(11,13,2)
(11,56,2)
(55,56,2)
(12,51,2)
(39,55,2)
(14,56,2)
(51,56,2)
(5,56,2)
(29,51,2)
(38,56,2)
(34,56,2)
(41,56,2)
(0,39,2)
(7,39,2)
(24,56,2)
(45,56,2)
(32,13,2)
(55,6,2)
(55,8,2)
(37,56,2)
(62,56,2)
(2,56,2)
(8,56,2)
(60,66,2)
(71,39,2)
(67,51,2)
(50,56,2)
(6,56,2)
(43,13,2)
(28,66,2)
(18,56,2)
(60,24,2)
(72,56,2)
(32,60,2)
(43,56,2)
(52,56,2)
(26,56,2)
(15,56,2)
(55,13,2)
(54,66,2)
(20,56,2)
(32,66,2)
(40,56,2)
(9,51,2)
(24,11,2)
(29,13,2)
(57,56,2)
(53,56,2)
(65,39,2)
(22,39,2)
(30,51,2)
(33,56,2)
(66,56,2)
(68,51,2)
(17,56,2)
(36,56,2)
(70,39,2)
(66,24,2)
(10,66,2)
(39,56,2)
(51,43,2)
(61,56,2)
(4,56,2)
(46,51,2)
(64,66,2)
(55,45,2)
(13,56,2)
(74,56,2)
(47,66,2)
-----------------------------------
(0,hUser)
(1,username)
(2,password)
(3,globalFive)
(4,NULL)
(5,username)
(6,* username = "User")
(7,"User logged in successfully.")
(8,* domain = "Domain")
(9,"fgets()
(10,1)
(11,strlen(password)
(12,printLine("fgets()
(13,password[100] = "")
(14,LOGON32_PROVIDER_DEFAULT)
(15,0)
(16,passwordLen)
(17,"Domain")
(18,password)
(19,if (passwordLen > 0)
(20,0)
(21,if(globalFive==5)
(22,printLine("User logged in successfully.")
(23,if (LogonUserA(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(24,passwordLen = strlen(password)
(25,password)
(26,LOGON32_LOGON_NETWORK)
(27,)
(28,\\\'\\\\0\\\')
(29,password[0])
(30,password[0] = \\\'\\\\0\\\')
(31,)
(32,password[passwordLen-1])
(33,username)
(34,stdin)
(35,if (fgets(password, 100, stdin)
(36,domain)
(37,0)
(38,passwordLen)
(39,LogonUserA(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(40,domain)
(41,passwordLen)
(42,RET)
(43,fgets(password, 100, stdin)
(44,hUser)
(45,&hUser)
(46,\\\'\\\\0\\\')
(47,password[passwordLen-1] = \\\'\\\\0\\\')
(48,)
(49,)
(50,passwordLen = 0)
(51,fgets(password, 100, stdin)
(52,100)
(53,hUser)
(54,passwordLen)
(55,LogonUserA(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(56,globalFive==5)
(57,password)
(58,)
(59,)
(60,passwordLen-1)
(61,"")
(62,"User")
(63,5)
(64,password)
(65,printLine("Unable to login.")
(66,passwordLen > 0)
(67,password)
(68,0)
(69,)
(70,CloseHandle(hUser)
(71,"Unable to login.")
(72,passwordLen)
(73,domain)
(74,password)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
