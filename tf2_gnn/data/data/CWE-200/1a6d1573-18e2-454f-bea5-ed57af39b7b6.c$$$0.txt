-----label-----
0
-----code-----
static void good1()
{
    if(globalReturnsFalse())
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        {
            wchar_t * password = (wchar_t *)ALLOCA(100*sizeof(wchar_t));
            size_t passwordLen = 0;
            HANDLE hUser;
            wchar_t * username = L"User";
            wchar_t * domain = L"Domain";
            /* Initialize password */
            password[0] = L'\0';
            if (fgetws(password, 100, stdin) == NULL)
            {
                printLine("fgetws() failed");
                /* Restore NUL terminator if fgetws fails */
                password[0] = L'\0';
            }
            /* Remove the carriage return from the string that is inserted by fgetws() */
            passwordLen = wcslen(password);
            if (passwordLen > 0)
            {
                password[passwordLen-1] = L'\0';
            }
            /* Use the password in LogonUser() to establish that it is "sensitive" */
            if (LogonUserW(
                        username,
                        domain,
                        password,
                        LOGON32_LOGON_NETWORK,
                        LOGON32_PROVIDER_DEFAULT,
                        &hUser) != 0)
            {
                printLine("User logged in successfully.");
                CloseHandle(hUser);
            }
            else
            {
                printLine("Unable to login.");
            }
            passwordLen = wcslen(password);
            /* FIX: Clear password prior to release from stack */
            SecureZeroMemory(password, passwordLen * sizeof(wchar_t));
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
6,9
7,8
8,9
10,11
11,12
12,13
12,14
13,14
16,17
17,18
17,19
17,20
17,21
17,22
17,23
17,24
17,25
17,26
17,27
17,28
17,29
18,19
19,20
19,21
21,22
21,23
21,24
24,25
25,26
25,27
26,27
26,28
28,29
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
39,40
40,41
40,42
41,42
43,44
43,45
45,46
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
56,57
56,58
56,59
59,60
61,62
62,63
62,64
64,65
64,66
64,67
67,68
69,70
70,71
70,72
71,72
71,73
72,73
76,77
76,78
77,78
77,79
78,79
78,80
78,81
78,82
79,80
81,82
84,85
86,87
88,89
88,90
89,90
90,91
90,92
91,92
94,95
95,96
95,97
96,97
96,98
97,98
101,102
102,103
102,104
103,104
105,106
105,107
106,107
108,109
110,111
110,112
111,112
111,113
112,113
115,116
116,117
117,118
117,119
118,119
118,120
119,120
121,122
121,123
122,123
126,127
126,128
126,129
127,128
127,129
128,129
128,130
128,131
128,132
128,133
128,134
128,135
129,130
131,132
133,134
135,136
137,138
139,140
141,142
142,143
145,146
145,147
146,147
147,148
147,149
148,149
151,152
152,153
152,154
153,154
155,156
157,158
158,159
159,160
159,161
160,161
163,164
164,165
164,166
165,166
167,168
167,169
168,169
170,171
172,173
173,174
173,175
173,176
174,175
176,177
178,179
178,180
179,180
181,182
182,183
182,184
-----nextToken-----
2,4,9,14,15,20,22,23,27,29,32,34,37,38,42,44,46,50,52,55,57,58,60,63,65,66,68,73,74,75,80,82,83,85,87,92,93,98,99,100,104,107,109,113,114,120,123,124,125,130,132,134,136,138,140,143,144,149,150,154,156,161,162,166,169,171,175,177,180,183,184
-----computeFrom-----
33,34
33,35
70,71
70,72
77,78
77,79
95,96
95,97
102,103
102,104
111,112
111,113
117,118
117,119
121,122
121,123
127,128
127,129
164,165
164,166
178,179
178,180
-----guardedBy-----
82,98
113,123
143,156
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;
-----ast_node-----
static void good1(){    if(globalReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            wchar_t * password = (wchar_t *)ALLOCA(100*sizeof(wchar_t));            size_t passwordLen = 0;            HANDLE hUser;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            /* Initialize password */            password[0] = L'\0';            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            passwordLen = wcslen(password);            /* FIX: Clear password prior to release from stack */            SecureZeroMemory(password, passwordLen * sizeof(wchar_t));        }    }}
static void
good1()
good1
{    if(globalReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            wchar_t * password = (wchar_t *)ALLOCA(100*sizeof(wchar_t));            size_t passwordLen = 0;            HANDLE hUser;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            /* Initialize password */            password[0] = L'\0';            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            passwordLen = wcslen(password);            /* FIX: Clear password prior to release from stack */            SecureZeroMemory(password, passwordLen * sizeof(wchar_t));        }    }}
if(globalReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            wchar_t * password = (wchar_t *)ALLOCA(100*sizeof(wchar_t));            size_t passwordLen = 0;            HANDLE hUser;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            /* Initialize password */            password[0] = L'\0';            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            passwordLen = wcslen(password);            /* FIX: Clear password prior to release from stack */            SecureZeroMemory(password, passwordLen * sizeof(wchar_t));        }    }
globalReturnsFalse()
globalReturnsFalse
globalReturnsFalse
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        {            wchar_t * password = (wchar_t *)ALLOCA(100*sizeof(wchar_t));            size_t passwordLen = 0;            HANDLE hUser;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            /* Initialize password */            password[0] = L'\0';            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            passwordLen = wcslen(password);            /* FIX: Clear password prior to release from stack */            SecureZeroMemory(password, passwordLen * sizeof(wchar_t));        }    }
{            wchar_t * password = (wchar_t *)ALLOCA(100*sizeof(wchar_t));            size_t passwordLen = 0;            HANDLE hUser;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            /* Initialize password */            password[0] = L'\0';            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            passwordLen = wcslen(password);            /* FIX: Clear password prior to release from stack */            SecureZeroMemory(password, passwordLen * sizeof(wchar_t));        }
wchar_t * password = (wchar_t *)ALLOCA(100*sizeof(wchar_t));
wchar_t * password = (wchar_t *)ALLOCA(100*sizeof(wchar_t));
wchar_t
* password = (wchar_t *)ALLOCA(100*sizeof(wchar_t))
*
password
= (wchar_t *)ALLOCA(100*sizeof(wchar_t))
(wchar_t *)ALLOCA(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
ALLOCA(100*sizeof(wchar_t))
ALLOCA
ALLOCA
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

size_t passwordLen = 0;
size_t passwordLen = 0;
size_t
size_t
passwordLen = 0
passwordLen
= 0
0
HANDLE hUser;
HANDLE hUser;
HANDLE
HANDLE
hUser
hUser
wchar_t * username = L"User";
wchar_t * username = L"User";
wchar_t
* username = L"User"
*
username
= L"User"
L"User"
wchar_t * domain = L"Domain";
wchar_t * domain = L"Domain";
wchar_t
* domain = L"Domain"
*
domain
= L"Domain"
L"Domain"
password[0] = L'\0';
password[0] = L'\0'
password[0]
password
password
0
L'\0'
if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }
fgetws(password, 100, stdin) == NULL
fgetws(password, 100, stdin)
fgetws
fgetws
password
password
100
stdin
stdin
NULL
NULL
{                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }
printLine("fgetws() failed");
printLine("fgetws() failed")
printLine
printLine
"fgetws() failed"
password[0] = L'\0';
password[0] = L'\0'
password[0]
password
password
0
L'\0'
passwordLen = wcslen(password);
passwordLen = wcslen(password)
passwordLen
passwordLen
wcslen(password)
wcslen
wcslen
password
password
if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }
passwordLen > 0
passwordLen
passwordLen
0
{                password[passwordLen-1] = L'\0';            }
password[passwordLen-1] = L'\0';
password[passwordLen-1] = L'\0'
password[passwordLen-1]
password
password
passwordLen-1
passwordLen
passwordLen
1
L'\0'
if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }
LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0
LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser)
LogonUserW
LogonUserW
username
username
domain
domain
password
password
LOGON32_LOGON_NETWORK
LOGON32_LOGON_NETWORK
LOGON32_PROVIDER_DEFAULT
LOGON32_PROVIDER_DEFAULT
&hUser
hUser
hUser
0
{                printLine("User logged in successfully.");                CloseHandle(hUser);            }
printLine("User logged in successfully.");
printLine("User logged in successfully.")
printLine
printLine
"User logged in successfully."
CloseHandle(hUser);
CloseHandle(hUser)
CloseHandle
CloseHandle
hUser
hUser
{                printLine("Unable to login.");            }
printLine("Unable to login.");
printLine("Unable to login.")
printLine
printLine
"Unable to login."
passwordLen = wcslen(password);
passwordLen = wcslen(password)
passwordLen
passwordLen
wcslen(password)
wcslen
wcslen
password
password
SecureZeroMemory(password, passwordLen * sizeof(wchar_t));
SecureZeroMemory(password, passwordLen * sizeof(wchar_t))
SecureZeroMemory
SecureZeroMemory
password
password
passwordLen * sizeof(wchar_t)
passwordLen
passwordLen
sizeof(wchar_t)
wchar_t
wchar_t

-----joern-----
(19,64,0)
(6,16,0)
(44,9,0)
(12,64,0)
(31,54,0)
(63,64,0)
(62,64,0)
(2,32,0)
(62,9,0)
(14,4,0)
(16,75,0)
(71,32,0)
(33,15,0)
(29,64,0)
(21,64,0)
(51,64,0)
(67,37,0)
(22,37,0)
(52,1,0)
(18,75,0)
(1,15,0)
(26,2,0)
(9,62,0)
(0,34,0)
(33,58,0)
(63,43,0)
(55,61,0)
(3,17,0)
(49,50,0)
(36,16,0)
(59,33,0)
(70,15,0)
(42,16,0)
(37,70,0)
(75,16,0)
(66,33,0)
(34,61,0)
(39,33,0)
(53,62,0)
(16,15,0)
(1,69,0)
(15,64,0)
(58,33,0)
(76,48,0)
(61,34,0)
(60,64,0)
(35,64,0)
(70,37,0)
(24,64,0)
(8,70,0)
(4,50,0)
(56,45,0)
(11,5,0)
(7,64,0)
(16,17,0)
(57,15,0)
(34,52,0)
(70,64,0)
(25,16,0)
(68,71,0)
(9,15,0)
(45,73,0)
(20,67,0)
(48,64,0)
(41,48,0)
(38,53,0)
(46,11,0)
(40,16,0)
(43,15,0)
(37,63,0)
(43,63,0)
(47,43,0)
(74,53,0)
(23,58,0)
(64,28,0)
(52,34,0)
(69,1,0)
(10,13,0)
(65,63,0)
(15,1,0)
(27,62,0)
(37,67,0)
(1,52,0)
(17,16,0)
(66,59,1)
(63,43,1)
(53,38,1)
(16,75,1)
(27,58,1)
(38,74,1)
(59,7,1)
(55,0,1)
(65,2,1)
(23,33,1)
(76,41,1)
(25,31,1)
(56,17,1)
(3,16,1)
(14,58,1)
(1,52,1)
(4,14,1)
(9,44,1)
(70,37,1)
(8,63,1)
(33,15,1)
(18,40,1)
(72,11,1)
(74,62,1)
(43,47,1)
(45,56,1)
(41,15,1)
(31,53,1)
(36,25,1)
(43,15,1)
(17,16,1)
(72,70,1)
(44,27,1)
(58,23,1)
(53,62,1)
(37,63,1)
(11,46,1)
(46,30,1)
(27,49,1)
(37,67,1)
(15,1,1)
(70,15,1)
(26,71,1)
(22,8,1)
(6,42,1)
(0,57,1)
(21,48,1)
(2,26,1)
(20,22,1)
(62,9,1)
(49,4,1)
(34,61,1)
(57,30,1)
(7,12,1)
(67,20,1)
(17,3,1)
(47,65,1)
(71,68,1)
(48,76,1)
(58,33,1)
(75,18,1)
(16,15,1)
(39,66,1)
(25,53,1)
(61,55,1)
(33,39,1)
(42,36,1)
(68,17,1)
(52,34,1)
(9,15,1)
(12,21,1)
(40,6,1)
(65,45,1)
(1,69,1)
(37,63,2)
(59,30,2)
(36,30,2)
(63,43,2)
(14,58,2)
(52,34,2)
(16,15,2)
(43,30,2)
(44,30,2)
(42,30,2)
(31,53,2)
(15,30,2)
(70,30,2)
(22,30,2)
(58,33,2)
(23,30,2)
(70,37,2)
(53,30,2)
(1,69,2)
(33,15,2)
(4,58,2)
(17,16,2)
(6,30,2)
(62,9,2)
(48,30,2)
(71,17,2)
(20,30,2)
(1,52,2)
(52,30,2)
(38,30,2)
(37,67,2)
(16,75,2)
(25,30,2)
(76,30,2)
(61,30,2)
(15,1,2)
(33,30,2)
(65,30,2)
(21,30,2)
(58,30,2)
(68,17,2)
(67,30,2)
(18,30,2)
(12,30,2)
(9,30,2)
(7,30,2)
(27,30,2)
(49,58,2)
(47,30,2)
(55,30,2)
(16,30,2)
(9,15,2)
(34,30,2)
(74,30,2)
(63,30,2)
(75,30,2)
(56,17,2)
(3,30,2)
(70,15,2)
(66,30,2)
(39,30,2)
(2,17,2)
(62,30,2)
(11,30,2)
(46,30,2)
(41,30,2)
(26,17,2)
(17,30,2)
(34,61,2)
(40,30,2)
(53,62,2)
(57,30,2)
(45,17,2)
(43,15,2)
(0,30,2)
(37,30,2)
(8,30,2)
(1,30,2)
-----------------------------------
(0,100)
(1,(wchar_t *)
(2,CloseHandle(hUser)
(3,0)
(4,printLine("fgetws()
(5,)
(6,LOGON32_LOGON_NETWORK)
(7,\\\'\\\\0\\\')
(8,password)
(9,wcslen(password)
(10,if(globalReturnsFalse()
(11,printLine("Benign, fixed string")
(12,"Domain")
(13,)
(14,"fgetws()
(15,* password = (wchar_t *)
(16,LogonUserW(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(17,LogonUserW(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(18,hUser)
(19,password)
(20,wchar_t)
(21,"User")
(22,passwordLen)
(23,NULL)
(24,hUser)
(25,username)
(26,hUser)
(27,passwordLen)
(28,)
(29,if (fgetws(password, 100, stdin)
(30,globalReturnsFalse()
(31,\\\'\\\\0\\\')
(32,)
(33,fgetws(password, 100, stdin)
(34,100*sizeof(wchar_t)
(35,if (LogonUserW(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(36,domain)
(37,passwordLen * sizeof(wchar_t)
(38,0)
(39,stdin)
(40,LOGON32_PROVIDER_DEFAULT)
(41,passwordLen)
(42,password)
(43,wcslen(password)
(44,password)
(45,printLine("Unable to login.")
(46,"Benign, fixed string")
(47,password)
(48,passwordLen = 0)
(49,\\\'\\\\0\\\')
(50,)
(51,if (passwordLen > 0)
(52,ALLOCA(100*sizeof(wchar_t)
(53,passwordLen > 0)
(54,)
(55,wchar_t)
(56,"Unable to login.")
(57,password)
(58,fgetws(password, 100, stdin)
(59,password)
(60,passwordLen)
(61,sizeof(wchar_t)
(62,passwordLen = wcslen(password)
(63,passwordLen = wcslen(password)
(64,)
(65,passwordLen)
(66,100)
(67,sizeof(wchar_t)
(68,"User logged in successfully.")
(69,wchar_t *)
(70,SecureZeroMemory(password, passwordLen * sizeof(wchar_t)
(71,printLine("User logged in successfully.")
(72,RET)
(73,)
(74,passwordLen)
(75,&hUser)
(76,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
