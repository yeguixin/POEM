-----label-----
0
-----code-----
static void good1()
{
    if(staticFive!=5)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        {
            wchar_t password[100] = L"";
            size_t passwordLen = 0;
            HANDLE hUser;
            wchar_t * username = L"User";
            wchar_t * domain = L"Domain";
            if (fgetws(password, 100, stdin) == NULL)
            {
                printLine("fgetws() failed");
                /* Restore NUL terminator if fgetws fails */
                password[0] = L'\0';
            }
            /* Remove the carriage return from the string that is inserted by fgetws() */
            passwordLen = wcslen(password);
            if (passwordLen > 0)
            {
                password[passwordLen-1] = L'\0';
            }
            /* Use the password in LogonUser() to establish that it is "sensitive" */
            if (LogonUserW(
                        username,
                        domain,
                        password,
                        LOGON32_LOGON_NETWORK,
                        LOGON32_PROVIDER_DEFAULT,
                        &hUser) != 0)
            {
                printLine("User logged in successfully.");
                CloseHandle(hUser);
            }
            else
            {
                printLine("Unable to login.");
            }
            passwordLen = wcslen(password);
            /* FIX: Clear password prior to release from stack */
            SecureZeroMemory(password, passwordLen * sizeof(wchar_t));
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
6,9
7,8
7,9
8,9
11,12
12,13
13,14
13,15
14,15
17,18
18,19
18,20
18,21
18,22
18,23
18,24
18,25
18,26
18,27
18,28
18,29
19,20
20,21
20,22
22,23
22,24
22,25
24,25
26,27
28,29
29,30
29,31
30,31
32,33
32,34
34,35
36,37
37,38
37,39
38,39
40,41
42,43
43,44
43,45
45,46
45,47
45,48
48,49
50,51
51,52
51,53
53,54
53,55
53,56
56,57
58,59
58,60
59,60
59,61
60,61
60,62
60,63
60,64
61,62
63,64
66,67
68,69
70,71
70,72
71,72
72,73
72,74
73,74
76,77
77,78
77,79
78,79
78,80
79,80
83,84
84,85
84,86
85,86
87,88
87,89
88,89
90,91
92,93
92,94
93,94
93,95
94,95
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
108,111
109,110
109,111
110,111
110,112
110,113
110,114
110,115
110,116
110,117
111,112
113,114
115,116
117,118
119,120
121,122
123,124
124,125
127,128
127,129
128,129
129,130
129,131
130,131
133,134
134,135
134,136
135,136
137,138
139,140
140,141
141,142
141,143
142,143
145,146
146,147
146,148
147,148
149,150
149,151
150,151
152,153
154,155
155,156
155,157
155,158
156,157
158,159
160,161
160,162
161,162
163,164
164,165
164,166
-----nextToken-----
2,4,9,10,15,16,21,23,25,27,31,33,35,39,41,44,46,47,49,52,54,55,57,62,64,65,67,69,74,75,80,81,82,86,89,91,95,96,102,105,106,107,112,114,116,118,120,122,125,126,131,132,136,138,143,144,148,151,153,157,159,162,165,166
-----computeFrom-----
7,8
7,9
59,60
59,61
77,78
77,79
84,85
84,86
93,94
93,95
99,100
99,101
103,104
103,105
109,110
109,111
146,147
146,148
160,161
160,162
-----guardedBy-----
64,80
95,105
125,138
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;
-----ast_node-----
static void good1(){    if(staticFive!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            wchar_t password[100] = L"";            size_t passwordLen = 0;            HANDLE hUser;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            passwordLen = wcslen(password);            /* FIX: Clear password prior to release from stack */            SecureZeroMemory(password, passwordLen * sizeof(wchar_t));        }    }}
static void
good1()
good1
{    if(staticFive!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            wchar_t password[100] = L"";            size_t passwordLen = 0;            HANDLE hUser;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            passwordLen = wcslen(password);            /* FIX: Clear password prior to release from stack */            SecureZeroMemory(password, passwordLen * sizeof(wchar_t));        }    }}
if(staticFive!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            wchar_t password[100] = L"";            size_t passwordLen = 0;            HANDLE hUser;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            passwordLen = wcslen(password);            /* FIX: Clear password prior to release from stack */            SecureZeroMemory(password, passwordLen * sizeof(wchar_t));        }    }
staticFive!=5
staticFive
staticFive
5
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        {            wchar_t password[100] = L"";            size_t passwordLen = 0;            HANDLE hUser;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            passwordLen = wcslen(password);            /* FIX: Clear password prior to release from stack */            SecureZeroMemory(password, passwordLen * sizeof(wchar_t));        }    }
{            wchar_t password[100] = L"";            size_t passwordLen = 0;            HANDLE hUser;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            passwordLen = wcslen(password);            /* FIX: Clear password prior to release from stack */            SecureZeroMemory(password, passwordLen * sizeof(wchar_t));        }
wchar_t password[100] = L"";
wchar_t password[100] = L"";
wchar_t
password[100] = L""
password
[100]
100
= L""
L""
size_t passwordLen = 0;
size_t passwordLen = 0;
size_t
size_t
passwordLen = 0
passwordLen
= 0
0
HANDLE hUser;
HANDLE hUser;
HANDLE
HANDLE
hUser
hUser
wchar_t * username = L"User";
wchar_t * username = L"User";
wchar_t
* username = L"User"
*
username
= L"User"
L"User"
wchar_t * domain = L"Domain";
wchar_t * domain = L"Domain";
wchar_t
* domain = L"Domain"
*
domain
= L"Domain"
L"Domain"
if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }
fgetws(password, 100, stdin) == NULL
fgetws(password, 100, stdin)
fgetws
fgetws
password
password
100
stdin
stdin
NULL
NULL
{                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }
printLine("fgetws() failed");
printLine("fgetws() failed")
printLine
printLine
"fgetws() failed"
password[0] = L'\0';
password[0] = L'\0'
password[0]
password
password
0
L'\0'
passwordLen = wcslen(password);
passwordLen = wcslen(password)
passwordLen
passwordLen
wcslen(password)
wcslen
wcslen
password
password
if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }
passwordLen > 0
passwordLen
passwordLen
0
{                password[passwordLen-1] = L'\0';            }
password[passwordLen-1] = L'\0';
password[passwordLen-1] = L'\0'
password[passwordLen-1]
password
password
passwordLen-1
passwordLen
passwordLen
1
L'\0'
if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }
LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0
LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser)
LogonUserW
LogonUserW
username
username
domain
domain
password
password
LOGON32_LOGON_NETWORK
LOGON32_LOGON_NETWORK
LOGON32_PROVIDER_DEFAULT
LOGON32_PROVIDER_DEFAULT
&hUser
hUser
hUser
0
{                printLine("User logged in successfully.");                CloseHandle(hUser);            }
printLine("User logged in successfully.");
printLine("User logged in successfully.")
printLine
printLine
"User logged in successfully."
CloseHandle(hUser);
CloseHandle(hUser)
CloseHandle
CloseHandle
hUser
hUser
{                printLine("Unable to login.");            }
printLine("Unable to login.");
printLine("Unable to login.")
printLine
printLine
"Unable to login."
passwordLen = wcslen(password);
passwordLen = wcslen(password)
passwordLen
passwordLen
wcslen(password)
wcslen
wcslen
password
password
SecureZeroMemory(password, passwordLen * sizeof(wchar_t));
SecureZeroMemory(password, passwordLen * sizeof(wchar_t))
SecureZeroMemory
SecureZeroMemory
password
password
passwordLen * sizeof(wchar_t)
passwordLen
passwordLen
sizeof(wchar_t)
wchar_t
wchar_t

-----joern-----
(61,58,0)
(51,47,0)
(20,42,0)
(33,46,0)
(49,44,0)
(62,8,0)
(22,8,0)
(40,8,0)
(42,21,0)
(56,47,0)
(48,5,0)
(15,3,0)
(54,25,0)
(57,48,0)
(59,25,0)
(37,36,0)
(52,37,0)
(10,37,0)
(6,65,0)
(8,34,0)
(3,12,0)
(16,12,0)
(13,3,0)
(30,3,0)
(27,8,0)
(63,8,0)
(23,37,0)
(43,37,0)
(41,26,0)
(65,9,0)
(5,8,0)
(55,62,0)
(47,65,0)
(12,3,0)
(17,1,0)
(19,28,0)
(53,1,0)
(28,37,0)
(11,53,0)
(39,35,0)
(1,5,0)
(1,50,0)
(58,21,0)
(4,59,0)
(1,53,0)
(32,26,0)
(38,5,0)
(36,37,0)
(68,8,0)
(67,50,0)
(64,33,0)
(37,28,0)
(9,65,0)
(29,8,0)
(31,14,0)
(50,1,0)
(50,8,0)
(18,8,0)
(24,36,0)
(2,62,0)
(65,8,0)
(45,37,0)
(60,39,0)
(0,9,0)
(5,48,0)
(66,8,0)
(53,11,1)
(22,63,1)
(52,45,1)
(64,26,1)
(13,15,1)
(45,23,1)
(16,3,1)
(62,2,1)
(39,60,1)
(33,64,1)
(65,9,1)
(37,36,1)
(57,38,1)
(58,61,1)
(41,32,1)
(56,65,1)
(51,56,1)
(5,48,1)
(24,10,1)
(59,4,1)
(7,33,1)
(6,12,1)
(15,30,1)
(3,13,1)
(6,54,1)
(20,28,1)
(68,26,1)
(19,37,1)
(63,62,1)
(23,47,1)
(30,22,1)
(50,1,1)
(2,55,1)
(38,58,1)
(26,41,1)
(12,3,1)
(55,68,1)
(11,17,1)
(17,67,1)
(23,49,1)
(42,20,1)
(1,5,1)
(28,37,1)
(47,65,1)
(4,12,1)
(43,52,1)
(61,42,1)
(47,51,1)
(10,43,1)
(60,28,1)
(9,0,1)
(1,53,1)
(54,59,1)
(0,6,1)
(7,50,1)
(49,47,1)
(36,24,1)
(48,57,1)
(28,19,1)
(38,39,1)
(67,5,1)
(12,16,1)
(6,26,2)
(50,26,2)
(16,26,2)
(37,36,2)
(36,26,2)
(2,26,2)
(28,26,2)
(57,26,2)
(67,26,2)
(39,28,2)
(3,26,2)
(54,12,2)
(68,26,2)
(50,1,2)
(63,26,2)
(28,37,2)
(10,26,2)
(48,26,2)
(0,26,2)
(11,26,2)
(15,26,2)
(42,28,2)
(12,26,2)
(33,26,2)
(52,26,2)
(23,26,2)
(4,12,2)
(47,65,2)
(53,26,2)
(58,28,2)
(45,26,2)
(1,53,2)
(55,26,2)
(47,26,2)
(22,26,2)
(13,26,2)
(62,26,2)
(49,47,2)
(43,26,2)
(56,26,2)
(61,28,2)
(17,26,2)
(24,26,2)
(1,26,2)
(59,12,2)
(65,9,2)
(38,26,2)
(1,5,2)
(5,26,2)
(30,26,2)
(65,26,2)
(64,26,2)
(20,28,2)
(51,26,2)
(9,26,2)
(37,26,2)
(19,26,2)
(12,3,2)
(5,48,2)
(60,28,2)
-----------------------------------
(0,password)
(1,passwordLen * sizeof(wchar_t)
(2,0)
(3,fgetws(password, 100, stdin)
(4,"fgetws()
(5,passwordLen = wcslen(password)
(6,passwordLen)
(7,RET)
(8,)
(9,wcslen(password)
(10,LOGON32_PROVIDER_DEFAULT)
(11,wchar_t)
(12,fgetws(password, 100, stdin)
(13,stdin)
(14,)
(15,100)
(16,NULL)
(17,passwordLen)
(18,if (passwordLen > 0)
(19,0)
(20,"User logged in successfully.")
(21,)
(22,"Domain")
(23,username)
(24,hUser)
(25,)
(26,staticFive!=5)
(27,passwordLen)
(28,LogonUserW(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(29,hUser)
(30,password)
(31,if(staticFive!=5)
(32,staticFive)
(33,printLine("Benign, fixed string")
(34,)
(35,)
(36,&hUser)
(37,LogonUserW(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(38,passwordLen)
(39,printLine("Unable to login.")
(40,if (fgetws(password, 100, stdin)
(41,5)
(42,printLine("User logged in successfully.")
(43,LOGON32_LOGON_NETWORK)
(44,)
(45,domain)
(46,)
(47,passwordLen > 0)
(48,wcslen(password)
(49,\\\'\\\\0\\\')
(50,SecureZeroMemory(password, passwordLen * sizeof(wchar_t)
(51,0)
(52,password)
(53,sizeof(wchar_t)
(54,\\\'\\\\0\\\')
(55,passwordLen)
(56,passwordLen)
(57,password)
(58,CloseHandle(hUser)
(59,printLine("fgetws()
(60,"Unable to login.")
(61,hUser)
(62,passwordLen = 0)
(63,"User")
(64,"Benign, fixed string")
(65,passwordLen = wcslen(password)
(66,if (LogonUserW(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(67,password)
(68,"")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
