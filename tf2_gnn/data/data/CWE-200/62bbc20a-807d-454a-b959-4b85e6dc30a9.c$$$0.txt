-----label-----
0
-----code-----
static void good1()
{
    if(0)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        {
            char * password = (char *)ALLOCA(100*sizeof(char));
            size_t passwordLen = 0;
            HANDLE hUser;
            char * username = "User";
            char * domain = "Domain";
            /* Initialize password */
            password[0] = '\0';
            if (fgets(password, 100, stdin) == NULL)
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                password[0] = '\0';
            }
            /* Remove the carriage return from the string that is inserted by fgets() */
            passwordLen = strlen(password);
            if (passwordLen > 0)
            {
                password[passwordLen-1] = '\0';
            }
            /* Use the password in LogonUser() to establish that it is "sensitive" */
            if (LogonUserA(
                        username,
                        domain,
                        password,
                        LOGON32_LOGON_NETWORK,
                        LOGON32_PROVIDER_DEFAULT,
                        &hUser) != 0)
            {
                printLine("User logged in successfully.");
                CloseHandle(hUser);
            }
            else
            {
                printLine("Unable to login.");
            }
            passwordLen = strlen(password);
            /* FIX: Clear password prior to release from stack */
            SecureZeroMemory(password, passwordLen * sizeof(char));
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
6,9
8,9
9,10
10,11
10,12
11,12
14,15
15,16
15,17
15,18
15,19
15,20
15,21
15,22
15,23
15,24
15,25
15,26
15,27
16,17
17,18
17,19
19,20
19,21
19,22
22,23
23,24
23,25
24,25
24,26
26,27
28,29
28,30
29,30
31,32
31,33
33,34
34,35
34,36
37,38
38,39
38,40
39,40
41,42
41,43
43,44
45,46
46,47
46,48
47,48
49,50
51,52
52,53
52,54
54,55
54,56
54,57
57,58
59,60
60,61
60,62
62,63
62,64
62,65
65,66
67,68
68,69
68,70
69,70
69,71
70,71
74,75
74,76
75,76
75,77
76,77
76,78
76,79
76,80
77,78
79,80
82,83
84,85
86,87
86,88
87,88
88,89
88,90
89,90
92,93
93,94
93,95
94,95
94,96
95,96
99,100
100,101
100,102
101,102
103,104
103,105
104,105
106,107
108,109
108,110
109,110
109,111
110,111
113,114
114,115
115,116
115,117
116,117
116,118
117,118
119,120
119,121
120,121
124,125
124,126
124,127
125,126
125,127
126,127
126,128
126,129
126,130
126,131
126,132
126,133
127,128
129,130
131,132
133,134
135,136
137,138
139,140
140,141
143,144
143,145
144,145
145,146
145,147
146,147
149,150
150,151
150,152
151,152
153,154
155,156
156,157
157,158
157,159
158,159
161,162
162,163
162,164
163,164
165,166
165,167
166,167
168,169
170,171
171,172
171,173
171,174
172,173
174,175
176,177
176,178
177,178
179,180
180,181
180,182
-----nextToken-----
2,4,7,12,13,18,20,21,25,27,30,32,35,36,40,42,44,48,50,53,55,56,58,61,63,64,66,71,72,73,78,80,81,83,85,90,91,96,97,98,102,105,107,111,112,118,121,122,123,128,130,132,134,136,138,141,142,147,148,152,154,159,160,164,167,169,173,175,178,181,182
-----computeFrom-----
31,32
31,33
68,69
68,70
75,76
75,77
93,94
93,95
100,101
100,102
109,110
109,111
115,116
115,117
119,120
119,121
125,126
125,127
162,163
162,164
176,177
176,178
-----guardedBy-----
80,96
111,121
141,154
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;
-----ast_node-----
static void good1(){    if(0)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            char * password = (char *)ALLOCA(100*sizeof(char));            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            /* Initialize password */            password[0] = '\0';            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            passwordLen = strlen(password);            /* FIX: Clear password prior to release from stack */            SecureZeroMemory(password, passwordLen * sizeof(char));        }    }}
static void
good1()
good1
{    if(0)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            char * password = (char *)ALLOCA(100*sizeof(char));            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            /* Initialize password */            password[0] = '\0';            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            passwordLen = strlen(password);            /* FIX: Clear password prior to release from stack */            SecureZeroMemory(password, passwordLen * sizeof(char));        }    }}
if(0)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            char * password = (char *)ALLOCA(100*sizeof(char));            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            /* Initialize password */            password[0] = '\0';            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            passwordLen = strlen(password);            /* FIX: Clear password prior to release from stack */            SecureZeroMemory(password, passwordLen * sizeof(char));        }    }
0
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        {            char * password = (char *)ALLOCA(100*sizeof(char));            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            /* Initialize password */            password[0] = '\0';            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            passwordLen = strlen(password);            /* FIX: Clear password prior to release from stack */            SecureZeroMemory(password, passwordLen * sizeof(char));        }    }
{            char * password = (char *)ALLOCA(100*sizeof(char));            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            /* Initialize password */            password[0] = '\0';            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            passwordLen = strlen(password);            /* FIX: Clear password prior to release from stack */            SecureZeroMemory(password, passwordLen * sizeof(char));        }
char * password = (char *)ALLOCA(100*sizeof(char));
char * password = (char *)ALLOCA(100*sizeof(char));
char
* password = (char *)ALLOCA(100*sizeof(char))
*
password
= (char *)ALLOCA(100*sizeof(char))
(char *)ALLOCA(100*sizeof(char))
char *
char
*
*
ALLOCA(100*sizeof(char))
ALLOCA
ALLOCA
100*sizeof(char)
100
sizeof(char)
char
char

size_t passwordLen = 0;
size_t passwordLen = 0;
size_t
size_t
passwordLen = 0
passwordLen
= 0
0
HANDLE hUser;
HANDLE hUser;
HANDLE
HANDLE
hUser
hUser
char * username = "User";
char * username = "User";
char
* username = "User"
*
username
= "User"
"User"
char * domain = "Domain";
char * domain = "Domain";
char
* domain = "Domain"
*
domain
= "Domain"
"Domain"
password[0] = '\0';
password[0] = '\0'
password[0]
password
password
0
'\0'
if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }
fgets(password, 100, stdin) == NULL
fgets(password, 100, stdin)
fgets
fgets
password
password
100
stdin
stdin
NULL
NULL
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
password[0] = '\0';
password[0] = '\0'
password[0]
password
password
0
'\0'
passwordLen = strlen(password);
passwordLen = strlen(password)
passwordLen
passwordLen
strlen(password)
strlen
strlen
password
password
if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }
passwordLen > 0
passwordLen
passwordLen
0
{                password[passwordLen-1] = '\0';            }
password[passwordLen-1] = '\0';
password[passwordLen-1] = '\0'
password[passwordLen-1]
password
password
passwordLen-1
passwordLen
passwordLen
1
'\0'
if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }
LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0
LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser)
LogonUserA
LogonUserA
username
username
domain
domain
password
password
LOGON32_LOGON_NETWORK
LOGON32_LOGON_NETWORK
LOGON32_PROVIDER_DEFAULT
LOGON32_PROVIDER_DEFAULT
&hUser
hUser
hUser
0
{                printLine("User logged in successfully.");                CloseHandle(hUser);            }
printLine("User logged in successfully.");
printLine("User logged in successfully.")
printLine
printLine
"User logged in successfully."
CloseHandle(hUser);
CloseHandle(hUser)
CloseHandle
CloseHandle
hUser
hUser
{                printLine("Unable to login.");            }
printLine("Unable to login.");
printLine("Unable to login.")
printLine
printLine
"Unable to login."
passwordLen = strlen(password);
passwordLen = strlen(password)
passwordLen
passwordLen
strlen(password)
strlen
strlen
password
password
SecureZeroMemory(password, passwordLen * sizeof(char));
SecureZeroMemory(password, passwordLen * sizeof(char))
SecureZeroMemory
SecureZeroMemory
password
password
passwordLen * sizeof(char)
passwordLen
passwordLen
sizeof(char)
char
char

-----joern-----
(51,71,0)
(46,66,0)
(78,71,0)
(20,43,0)
(15,14,0)
(87,43,0)
(58,43,0)
(7,46,0)
(2,57,0)
(36,43,0)
(79,39,0)
(90,62,0)
(47,62,0)
(62,74,0)
(61,16,0)
(55,74,0)
(77,72,0)
(62,93,0)
(12,90,0)
(49,62,0)
(48,43,0)
(17,28,0)
(31,3,0)
(53,41,0)
(91,43,0)
(22,82,0)
(43,0,0)
(76,42,0)
(4,2,0)
(28,43,0)
(59,67,0)
(39,5,0)
(8,43,0)
(34,48,0)
(62,90,0)
(5,39,0)
(18,40,0)
(42,38,0)
(75,59,0)
(32,65,0)
(25,54,0)
(96,7,0)
(56,43,0)
(14,46,0)
(35,67,0)
(63,48,0)
(24,66,0)
(66,24,0)
(62,48,0)
(19,7,0)
(6,5,0)
(23,56,0)
(71,51,0)
(50,93,0)
(93,62,0)
(59,42,0)
(85,67,0)
(11,51,0)
(2,46,0)
(70,72,0)
(72,15,0)
(86,65,0)
(69,92,0)
(51,36,0)
(10,83,0)
(21,54,0)
(57,2,0)
(59,46,0)
(1,60,0)
(9,36,0)
(65,10,0)
(46,43,0)
(66,95,0)
(15,43,0)
(36,46,0)
(73,28,0)
(62,46,0)
(65,46,0)
(33,74,0)
(40,3,0)
(5,95,0)
(67,59,0)
(68,57,0)
(26,31,0)
(81,62,0)
(27,15,0)
(57,43,0)
(16,44,0)
(95,66,0)
(74,43,0)
(67,15,0)
(95,5,0)
(84,43,0)
(30,43,0)
(60,94,0)
(14,15,0)
(29,62,0)
(7,41,0)
(41,7,0)
(36,51,0)
(66,46,0)
(52,46,0)
(89,10,0)
(54,56,0)
(54,46,0)
(13,43,0)
(82,83,0)
(80,7,0)
(51,57,0)
(88,14,0)
(45,62,0)
(76,59,1)
(14,88,1)
(80,56,1)
(25,48,1)
(11,9,1)
(26,93,1)
(66,95,1)
(86,82,1)
(34,74,1)
(71,78,1)
(95,5,1)
(7,19,1)
(77,15,1)
(41,7,1)
(17,73,1)
(51,71,1)
(36,51,1)
(48,63,1)
(82,22,1)
(78,11,1)
(23,54,1)
(29,45,1)
(52,37,1)
(72,70,1)
(12,81,1)
(93,50,1)
(65,32,1)
(45,72,1)
(68,40,1)
(57,2,1)
(66,24,1)
(15,14,1)
(32,86,1)
(62,90,1)
(73,46,1)
(88,27,1)
(67,35,1)
(27,41,1)
(31,26,1)
(49,47,1)
(68,16,1)
(4,68,1)
(6,52,1)
(7,46,1)
(41,53,1)
(74,33,1)
(75,72,1)
(1,37,1)
(54,21,1)
(85,75,1)
(79,6,1)
(35,85,1)
(39,79,1)
(60,1,1)
(53,7,1)
(19,96,1)
(59,67,1)
(64,60,1)
(36,46,1)
(64,36,1)
(65,46,1)
(22,41,1)
(59,46,1)
(27,10,1)
(42,76,1)
(10,89,1)
(72,15,1)
(61,93,1)
(62,74,1)
(2,4,1)
(47,29,1)
(50,62,1)
(55,28,1)
(5,39,1)
(90,12,1)
(33,55,1)
(56,23,1)
(14,46,1)
(62,48,1)
(63,34,1)
(51,57,1)
(81,49,1)
(54,46,1)
(62,46,1)
(16,61,1)
(2,46,1)
(21,25,1)
(28,17,1)
(89,65,1)
(45,42,1)
(70,77,1)
(46,66,1)
(40,18,1)
(96,80,1)
(9,57,1)
(18,31,1)
(67,15,1)
(93,62,1)
(19,37,2)
(14,37,2)
(45,37,2)
(51,57,2)
(72,37,2)
(5,39,2)
(52,37,2)
(82,41,2)
(35,72,2)
(15,14,2)
(93,62,2)
(27,37,2)
(62,37,2)
(56,37,2)
(32,41,2)
(31,93,2)
(29,37,2)
(11,37,2)
(86,41,2)
(88,37,2)
(36,46,2)
(51,37,2)
(66,24,2)
(68,37,2)
(57,37,2)
(9,37,2)
(2,37,2)
(23,37,2)
(41,37,2)
(41,7,2)
(95,37,2)
(70,37,2)
(95,5,2)
(77,37,2)
(4,37,2)
(39,37,2)
(61,93,2)
(65,46,2)
(25,37,2)
(6,37,2)
(89,41,2)
(59,67,2)
(79,37,2)
(7,46,2)
(78,37,2)
(96,37,2)
(62,46,2)
(46,37,2)
(71,37,2)
(85,72,2)
(34,37,2)
(7,37,2)
(17,37,2)
(62,90,2)
(36,51,2)
(63,37,2)
(62,74,2)
(36,37,2)
(18,93,2)
(40,93,2)
(51,71,2)
(16,93,2)
(15,37,2)
(67,72,2)
(66,95,2)
(42,72,2)
(76,72,2)
(81,37,2)
(2,46,2)
(46,66,2)
(93,37,2)
(5,37,2)
(80,37,2)
(1,37,2)
(33,37,2)
(72,15,2)
(12,37,2)
(66,37,2)
(65,41,2)
(14,46,2)
(73,37,2)
(47,37,2)
(54,37,2)
(57,2,2)
(59,46,2)
(53,37,2)
(54,46,2)
(59,72,2)
(67,15,2)
(75,72,2)
(26,93,2)
(62,48,2)
(21,37,2)
(90,37,2)
(48,37,2)
(55,37,2)
(28,37,2)
(49,37,2)
(22,41,2)
(50,37,2)
(60,37,2)
(74,37,2)
(10,41,2)
-----------------------------------
(0,)
(1,"Benign, fixed string")
(2,strlen(password)
(3,)
(4,password)
(5,100*sizeof(char)
(6,100)
(7,fgets(password, 100, stdin)
(8,domain)
(9,password)
(10,password[0] = \\\'\\\\0\\\')
(11,passwordLen)
(12,hUser)
(13,username)
(14,strlen(password)
(15,passwordLen = strlen(password)
(16,printLine("Unable to login.")
(17,0)
(18,hUser)
(19,stdin)
(20,hUser)
(21,0)
(22,"fgets()
(23,\\\'\\\\0\\\')
(24,char *)
(25,password)
(26,"User logged in successfully.")
(27,passwordLen)
(28,passwordLen = 0)
(29,domain)
(30,if (LogonUserA(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(31,printLine("User logged in successfully.")
(32,0)
(33,"User")
(34,domain)
(35,1)
(36,SecureZeroMemory(password, passwordLen * sizeof(char)
(37,0)
(38,)
(39,sizeof(char)
(40,CloseHandle(hUser)
(41,fgets(password, 100, stdin)
(42,password[passwordLen-1] = \\\'\\\\0\\\')
(43,)
(44,)
(45,username)
(46,* password = (char *)
(47,password)
(48,* domain = "Domain")
(49,LOGON32_LOGON_NETWORK)
(50,0)
(51,passwordLen * sizeof(char)
(52,password)
(53,NULL)
(54,password[0])
(55,username)
(56,password[0] = \\\'\\\\0\\\')
(57,passwordLen = strlen(password)
(58,if (fgets(password, 100, stdin)
(59,password[passwordLen-1])
(60,printLine("Benign, fixed string")
(61,"Unable to login.")
(62,LogonUserA(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(63,"Domain")
(64,RET)
(65,password[0])
(66,(char *)
(67,passwordLen-1)
(68,passwordLen)
(69,if(0)
(70,0)
(71,sizeof(char)
(72,passwordLen > 0)
(73,passwordLen)
(74,* username = "User")
(75,password)
(76,\\\'\\\\0\\\')
(77,passwordLen)
(78,char)
(79,char)
(80,password)
(81,LOGON32_PROVIDER_DEFAULT)
(82,printLine("fgets()
(83,)
(84,if (passwordLen > 0)
(85,passwordLen)
(86,password)
(87,password)
(88,password)
(89,\\\'\\\\0\\\')
(90,&hUser)
(91,passwordLen)
(92,)
(93,LogonUserA(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(94,)
(95,ALLOCA(100*sizeof(char)
(96,100)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
