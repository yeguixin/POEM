-----label-----
0
-----code-----
static void good1()
{
    if(staticFalse)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        {
            char password[100] = "";
            size_t passwordLen = 0;
            HANDLE pHandle;
            char * username = "User";
            char * domain = "Domain";
            if (fgets(password, 100, stdin) == NULL)
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                password[0] = '\0';
            }
            /* Remove the carriage return from the string that is inserted by fgets() */
            passwordLen = strlen(password);
            if (passwordLen > 0)
            {
                password[passwordLen-1] = '\0';
            }
            /* Use the password in LogonUser() to establish that it is "sensitive" */
            if (LogonUserA(
                        username,
                        domain,
                        password,
                        LOGON32_LOGON_NETWORK,
                        LOGON32_PROVIDER_DEFAULT,
                        &pHandle) != 0)
            {
                printLine("User logged in successfully.");
                CloseHandle(pHandle);
            }
            else
            {
                printLine("Unable to login.");
            }
            /* FIX: Do not write sensitive data to stderr */
            fprintf(stderr, "User attempted access\n");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
6,9
7,8
9,10
10,11
11,12
11,13
12,13
15,16
16,17
16,18
16,19
16,20
16,21
16,22
16,23
16,24
16,25
16,26
17,18
18,19
18,20
20,21
20,22
20,23
22,23
24,25
26,27
27,28
27,29
28,29
30,31
30,32
32,33
34,35
35,36
35,37
36,37
38,39
40,41
41,42
41,43
43,44
43,45
43,46
46,47
48,49
49,50
49,51
51,52
51,53
51,54
54,55
56,57
56,58
57,58
57,59
58,59
58,60
58,61
58,62
59,60
61,62
64,65
66,67
68,69
68,70
69,70
70,71
70,72
71,72
74,75
75,76
75,77
76,77
76,78
77,78
81,82
82,83
82,84
83,84
85,86
85,87
86,87
88,89
90,91
90,92
91,92
91,93
92,93
95,96
96,97
97,98
97,99
98,99
98,100
99,100
101,102
101,103
102,103
106,107
106,108
106,109
107,108
107,109
108,109
108,110
108,111
108,112
108,113
108,114
108,115
109,110
111,112
113,114
115,116
117,118
119,120
121,122
122,123
125,126
125,127
126,127
127,128
127,129
128,129
131,132
132,133
132,134
133,134
135,136
137,138
138,139
139,140
139,141
140,141
143,144
144,145
144,146
144,147
145,146
147,148
-----nextToken-----
2,4,8,13,14,19,21,23,25,29,31,33,37,39,42,44,45,47,50,52,53,55,60,62,63,65,67,72,73,78,79,80,84,87,89,93,94,100,103,104,105,110,112,114,116,118,120,123,124,129,130,134,136,141,142,146,148,149
-----computeFrom-----
57,58
57,59
75,76
75,77
82,83
82,84
91,92
91,93
97,98
97,99
101,102
101,103
107,108
107,109
-----guardedBy-----
62,78
93,103
123,136
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void good1(){    if(staticFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            char password[100] = "";            size_t passwordLen = 0;            HANDLE pHandle;            char * username = "User";            char * domain = "Domain";            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }            /* FIX: Do not write sensitive data to stderr */            fprintf(stderr, "User attempted access\n");        }    }}
static void
good1()
good1
{    if(staticFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            char password[100] = "";            size_t passwordLen = 0;            HANDLE pHandle;            char * username = "User";            char * domain = "Domain";            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }            /* FIX: Do not write sensitive data to stderr */            fprintf(stderr, "User attempted access\n");        }    }}
if(staticFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            char password[100] = "";            size_t passwordLen = 0;            HANDLE pHandle;            char * username = "User";            char * domain = "Domain";            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }            /* FIX: Do not write sensitive data to stderr */            fprintf(stderr, "User attempted access\n");        }    }
staticFalse
staticFalse
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        {            char password[100] = "";            size_t passwordLen = 0;            HANDLE pHandle;            char * username = "User";            char * domain = "Domain";            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }            /* FIX: Do not write sensitive data to stderr */            fprintf(stderr, "User attempted access\n");        }    }
{            char password[100] = "";            size_t passwordLen = 0;            HANDLE pHandle;            char * username = "User";            char * domain = "Domain";            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }            /* FIX: Do not write sensitive data to stderr */            fprintf(stderr, "User attempted access\n");        }
char password[100] = "";
char password[100] = "";
char
password[100] = ""
password
[100]
100
= ""
""
size_t passwordLen = 0;
size_t passwordLen = 0;
size_t
size_t
passwordLen = 0
passwordLen
= 0
0
HANDLE pHandle;
HANDLE pHandle;
HANDLE
HANDLE
pHandle
pHandle
char * username = "User";
char * username = "User";
char
* username = "User"
*
username
= "User"
"User"
char * domain = "Domain";
char * domain = "Domain";
char
* domain = "Domain"
*
domain
= "Domain"
"Domain"
if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }
fgets(password, 100, stdin) == NULL
fgets(password, 100, stdin)
fgets
fgets
password
password
100
stdin
stdin
NULL
NULL
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
password[0] = '\0';
password[0] = '\0'
password[0]
password
password
0
'\0'
passwordLen = strlen(password);
passwordLen = strlen(password)
passwordLen
passwordLen
strlen(password)
strlen
strlen
password
password
if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }
passwordLen > 0
passwordLen
passwordLen
0
{                password[passwordLen-1] = '\0';            }
password[passwordLen-1] = '\0';
password[passwordLen-1] = '\0'
password[passwordLen-1]
password
password
passwordLen-1
passwordLen
passwordLen
1
'\0'
if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }
LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0
LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle)
LogonUserA
LogonUserA
username
username
domain
domain
password
password
LOGON32_LOGON_NETWORK
LOGON32_LOGON_NETWORK
LOGON32_PROVIDER_DEFAULT
LOGON32_PROVIDER_DEFAULT
&pHandle
pHandle
pHandle
0
{                printLine("User logged in successfully.");                CloseHandle(pHandle);            }
printLine("User logged in successfully.");
printLine("User logged in successfully.")
printLine
printLine
"User logged in successfully."
CloseHandle(pHandle);
CloseHandle(pHandle)
CloseHandle
CloseHandle
pHandle
pHandle
{                printLine("Unable to login.");            }
printLine("Unable to login.");
printLine("Unable to login.")
printLine
printLine
"Unable to login."
fprintf(stderr, "User attempted access\n");
fprintf(stderr, "User attempted access\n")
fprintf
fprintf
stderr
stderr
"User attempted access\n"
-----joern-----
(15,51,0)
(49,51,0)
(53,17,0)
(33,60,0)
(1,51,0)
(17,74,0)
(45,17,0)
(36,59,0)
(36,77,0)
(41,17,0)
(60,59,0)
(13,62,0)
(11,70,0)
(51,12,0)
(56,36,0)
(37,2,0)
(78,68,0)
(40,66,0)
(2,77,0)
(5,47,0)
(77,51,0)
(25,28,0)
(43,32,0)
(63,51,0)
(67,65,0)
(0,1,0)
(3,51,0)
(8,51,0)
(38,44,0)
(73,9,0)
(58,21,0)
(23,51,0)
(72,31,0)
(70,59,0)
(66,51,0)
(7,74,0)
(20,65,0)
(2,70,0)
(55,24,0)
(18,51,0)
(29,1,0)
(2,25,0)
(4,77,0)
(47,22,0)
(68,10,0)
(34,55,0)
(47,77,0)
(64,22,0)
(9,6,0)
(39,74,0)
(19,3,0)
(26,70,0)
(46,66,0)
(17,50,0)
(62,10,0)
(71,77,0)
(54,17,0)
(65,21,0)
(50,17,0)
(70,2,0)
(61,59,0)
(30,25,0)
(14,51,0)
(76,17,0)
(74,51,0)
(35,47,0)
(59,51,0)
(22,47,0)
(48,51,0)
(42,60,0)
(27,50,0)
(17,77,0)
(17,66,0)
(31,75,0)
(16,47,0)
(65,77,0)
(21,24,0)
(69,3,0)
(32,17,0)
(59,36,0)
(17,32,0)
(60,59,1)
(50,27,1)
(43,76,1)
(59,36,1)
(17,66,1)
(78,62,1)
(16,74,1)
(58,65,1)
(62,13,1)
(5,16,1)
(25,30,1)
(36,56,1)
(35,5,1)
(26,37,1)
(70,59,1)
(76,53,1)
(73,50,1)
(70,11,1)
(4,71,1)
(19,9,1)
(71,57,1)
(1,29,1)
(68,78,1)
(47,35,1)
(72,57,1)
(52,3,1)
(66,40,1)
(77,4,1)
(17,32,1)
(40,46,1)
(34,22,1)
(41,45,1)
(53,54,1)
(74,7,1)
(33,59,1)
(60,42,1)
(67,55,1)
(17,77,1)
(45,60,1)
(65,20,1)
(19,68,1)
(2,77,1)
(17,74,1)
(0,77,1)
(45,25,1)
(22,47,1)
(21,58,1)
(47,77,1)
(11,26,1)
(13,50,1)
(2,70,1)
(64,47,1)
(32,43,1)
(61,22,1)
(20,67,1)
(31,72,1)
(29,0,1)
(55,34,1)
(27,17,1)
(46,1,1)
(54,41,1)
(22,64,1)
(69,19,1)
(3,69,1)
(30,2,1)
(42,33,1)
(50,17,1)
(7,39,1)
(36,77,1)
(9,73,1)
(37,60,1)
(52,31,1)
(56,61,1)
(65,77,1)
(61,21,1)
(39,66,1)
(59,36,2)
(59,57,2)
(1,57,2)
(17,32,2)
(55,22,2)
(60,59,2)
(11,60,2)
(22,57,2)
(30,60,2)
(70,60,2)
(78,50,2)
(3,57,2)
(20,22,2)
(71,57,2)
(68,50,2)
(32,57,2)
(47,77,2)
(25,60,2)
(72,57,2)
(74,57,2)
(46,57,2)
(0,57,2)
(58,22,2)
(4,57,2)
(45,57,2)
(22,47,2)
(67,22,2)
(43,57,2)
(37,60,2)
(33,57,2)
(17,74,2)
(47,57,2)
(9,50,2)
(61,57,2)
(26,60,2)
(40,57,2)
(56,57,2)
(2,77,2)
(54,57,2)
(2,60,2)
(34,22,2)
(69,57,2)
(19,57,2)
(31,57,2)
(60,57,2)
(65,22,2)
(39,57,2)
(35,57,2)
(16,57,2)
(21,22,2)
(62,50,2)
(27,57,2)
(17,57,2)
(17,66,2)
(42,57,2)
(64,57,2)
(77,57,2)
(70,59,2)
(29,57,2)
(17,77,2)
(7,57,2)
(41,57,2)
(2,70,2)
(50,57,2)
(36,77,2)
(36,57,2)
(50,17,2)
(73,50,2)
(53,57,2)
(76,57,2)
(5,57,2)
(66,57,2)
(13,50,2)
(65,77,2)
-----------------------------------
(0,passwordLen)
(1,passwordLen = 0)
(2,password[passwordLen-1])
(3,fprintf(stderr, "User attempted access\\\\n")
(4,"")
(5,100)
(6,)
(7,"Domain")
(8,if (LogonUserA(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &pHandle)
(9,printLine("Unable to login.")
(10,)
(11,1)
(12,)
(13,"User logged in successfully.")
(14,password)
(15,pHandle)
(16,password)
(17,LogonUserA(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &pHandle)
(18,if (fgets(password, 100, stdin)
(19,stderr)
(20,0)
(21,password[0] = \\\'\\\\0\\\')
(22,fgets(password, 100, stdin)
(23,if (passwordLen > 0)
(24,)
(25,password[passwordLen-1] = \\\'\\\\0\\\')
(26,passwordLen)
(27,0)
(28,)
(29,0)
(30,\\\'\\\\0\\\')
(31,printLine("Benign, fixed string")
(32,&pHandle)
(33,passwordLen)
(34,"fgets()
(35,stdin)
(36,strlen(password)
(37,password)
(38,if(staticFalse)
(39,domain)
(40,"User")
(41,domain)
(42,0)
(43,pHandle)
(44,)
(45,username)
(46,username)
(47,fgets(password, 100, stdin)
(48,domain)
(49,username)
(50,LogonUserA(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &pHandle)
(51,)
(52,RET)
(53,LOGON32_LOGON_NETWORK)
(54,password)
(55,printLine("fgets()
(56,password)
(57,staticFalse)
(58,\\\'\\\\0\\\')
(59,passwordLen = strlen(password)
(60,passwordLen > 0)
(61,passwordLen)
(62,printLine("User logged in successfully.")
(63,passwordLen)
(64,NULL)
(65,password[0])
(66,* username = "User")
(67,password)
(68,CloseHandle(pHandle)
(69,"User attempted access\\\\n")
(70,passwordLen-1)
(71,password)
(72,"Benign, fixed string")
(73,"Unable to login.")
(74,* domain = "Domain")
(75,)
(76,LOGON32_PROVIDER_DEFAULT)
(77,password[100] = "")
(78,pHandle)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
