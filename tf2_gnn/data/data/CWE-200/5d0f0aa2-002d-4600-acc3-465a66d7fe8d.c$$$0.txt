-----label-----
1
-----code-----
void CWE226_Sensitive_Information_Uncleared_Before_Release__w32_char_declare_16_bad()
{
    while(1)
    {
        {
            char password[100] = "";
            size_t passwordLen = 0;
            HANDLE hUser;
            char * username = "User";
            char * domain = "Domain";
            if (fgets(password, 100, stdin) == NULL)
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                password[0] = '\0';
            }
            /* Remove the carriage return from the string that is inserted by fgets() */
            passwordLen = strlen(password);
            if (passwordLen > 0)
            {
                password[passwordLen-1] = '\0';
            }
            /* Use the password in LogonUser() to establish that it is "sensitive" */
            if (LogonUserA(
                        username,
                        domain,
                        password,
                        LOGON32_LOGON_NETWORK,
                        LOGON32_PROVIDER_DEFAULT,
                        &hUser) != 0)
            {
                printLine("User logged in successfully.");
                CloseHandle(hUser);
            }
            else
            {
                printLine("Unable to login.");
            }
            /* FLAW: Release password from the stack without first clearing the buffer */
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
8,9
8,10
9,10
9,11
9,12
9,13
9,14
9,15
9,16
9,17
9,18
10,11
11,12
11,13
13,14
13,15
13,16
15,16
17,18
19,20
20,21
20,22
21,22
23,24
23,25
25,26
27,28
28,29
28,30
29,30
31,32
33,34
34,35
34,36
36,37
36,38
36,39
39,40
41,42
42,43
42,44
44,45
44,46
44,47
47,48
49,50
49,51
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
57,58
59,60
61,62
61,63
62,63
63,64
63,65
64,65
67,68
68,69
68,70
69,70
69,71
70,71
74,75
75,76
75,77
76,77
78,79
78,80
79,80
81,82
83,84
83,85
84,85
84,86
85,86
88,89
89,90
90,91
90,92
91,92
91,93
92,93
94,95
94,96
95,96
99,100
99,101
99,102
100,101
100,102
101,102
101,103
101,104
101,105
101,106
101,107
101,108
102,103
104,105
106,107
108,109
110,111
112,113
114,115
115,116
118,119
118,120
119,120
120,121
120,122
121,122
124,125
125,126
125,127
126,127
128,129
130,131
131,132
132,133
132,134
133,134
-----nextToken-----
2,4,7,12,14,16,18,22,24,26,30,32,35,37,38,40,43,45,46,48,53,55,56,58,60,65,66,71,72,73,77,80,82,86,87,93,96,97,98,103,105,107,109,111,113,116,117,122,123,127,129,134,135,136
-----computeFrom-----
50,51
50,52
68,69
68,70
75,76
75,77
84,85
84,86
90,91
90,92
94,95
94,96
100,101
100,102
-----guardedBy-----
55,71
86,96
116,129
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE226_Sensitive_Information_Uncleared_Before_Release__w32_char_declare_16_bad(){    while(1)    {        {            char password[100] = "";            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Release password from the stack without first clearing the buffer */        }        break;    }}
void
CWE226_Sensitive_Information_Uncleared_Before_Release__w32_char_declare_16_bad()
CWE226_Sensitive_Information_Uncleared_Before_Release__w32_char_declare_16_bad
{    while(1)    {        {            char password[100] = "";            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Release password from the stack without first clearing the buffer */        }        break;    }}
while(1)    {        {            char password[100] = "";            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Release password from the stack without first clearing the buffer */        }        break;    }
1
{        {            char password[100] = "";            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Release password from the stack without first clearing the buffer */        }        break;    }
{            char password[100] = "";            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Release password from the stack without first clearing the buffer */        }
char password[100] = "";
char password[100] = "";
char
password[100] = ""
password
[100]
100
= ""
""
size_t passwordLen = 0;
size_t passwordLen = 0;
size_t
size_t
passwordLen = 0
passwordLen
= 0
0
HANDLE hUser;
HANDLE hUser;
HANDLE
HANDLE
hUser
hUser
char * username = "User";
char * username = "User";
char
* username = "User"
*
username
= "User"
"User"
char * domain = "Domain";
char * domain = "Domain";
char
* domain = "Domain"
*
domain
= "Domain"
"Domain"
if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }
fgets(password, 100, stdin) == NULL
fgets(password, 100, stdin)
fgets
fgets
password
password
100
stdin
stdin
NULL
NULL
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
password[0] = '\0';
password[0] = '\0'
password[0]
password
password
0
'\0'
passwordLen = strlen(password);
passwordLen = strlen(password)
passwordLen
passwordLen
strlen(password)
strlen
strlen
password
password
if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }
passwordLen > 0
passwordLen
passwordLen
0
{                password[passwordLen-1] = '\0';            }
password[passwordLen-1] = '\0';
password[passwordLen-1] = '\0'
password[passwordLen-1]
password
password
passwordLen-1
passwordLen
passwordLen
1
'\0'
if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }
LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0
LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser)
LogonUserA
LogonUserA
username
username
domain
domain
password
password
LOGON32_LOGON_NETWORK
LOGON32_LOGON_NETWORK
LOGON32_PROVIDER_DEFAULT
LOGON32_PROVIDER_DEFAULT
&hUser
hUser
hUser
0
{                printLine("User logged in successfully.");                CloseHandle(hUser);            }
printLine("User logged in successfully.");
printLine("User logged in successfully.")
printLine
printLine
"User logged in successfully."
CloseHandle(hUser);
CloseHandle(hUser)
CloseHandle
CloseHandle
hUser
hUser
{                printLine("Unable to login.");            }
printLine("Unable to login.");
printLine("Unable to login.")
printLine
printLine
"Unable to login."
break;
-----joern-----
(45,37,0)
(69,59,0)
(55,46,0)
(72,8,0)
(46,45,0)
(35,46,0)
(44,24,0)
(18,49,0)
(65,34,0)
(46,50,0)
(23,2,0)
(48,47,0)
(4,58,0)
(47,37,0)
(14,37,0)
(40,37,0)
(54,37,0)
(19,47,0)
(60,64,0)
(62,6,0)
(52,13,0)
(1,37,0)
(16,46,0)
(61,49,0)
(46,14,0)
(46,36,0)
(13,49,0)
(49,45,0)
(50,46,0)
(5,58,0)
(58,45,0)
(27,19,0)
(42,37,0)
(58,41,0)
(37,28,0)
(6,15,0)
(11,45,0)
(46,2,0)
(30,37,0)
(12,44,0)
(49,13,0)
(39,50,0)
(33,26,0)
(56,11,0)
(73,45,0)
(32,37,0)
(59,15,0)
(9,49,0)
(21,22,0)
(41,22,0)
(2,46,0)
(57,36,0)
(70,41,0)
(47,26,0)
(64,37,0)
(10,28,0)
(26,45,0)
(67,37,0)
(38,36,0)
(66,19,0)
(53,20,0)
(36,37,0)
(0,20,0)
(26,47,0)
(11,19,0)
(7,46,0)
(20,47,0)
(3,64,0)
(68,45,0)
(29,37,0)
(51,21,0)
(25,72,0)
(63,46,0)
(11,44,0)
(31,14,0)
(19,11,0)
(17,14,0)
(48,41,1)
(25,50,1)
(62,50,1)
(56,20,1)
(69,6,1)
(73,71,1)
(51,13,1)
(26,33,1)
(50,46,1)
(57,14,1)
(44,12,1)
(20,0,1)
(18,36,1)
(66,56,1)
(72,25,1)
(12,11,1)
(2,23,1)
(63,35,1)
(14,17,1)
(55,20,1)
(46,2,1)
(50,39,1)
(9,61,1)
(33,48,1)
(21,51,1)
(16,63,1)
(26,45,1)
(5,4,1)
(59,69,1)
(19,47,1)
(4,21,1)
(7,55,1)
(61,18,1)
(46,36,1)
(0,53,1)
(47,26,1)
(49,9,1)
(20,47,1)
(49,45,1)
(52,49,1)
(43,10,1)
(36,38,1)
(27,66,1)
(55,44,1)
(13,52,1)
(38,57,1)
(45,68,1)
(11,45,1)
(68,73,1)
(39,46,1)
(10,59,1)
(46,45,1)
(3,60,1)
(58,45,1)
(70,58,1)
(17,31,1)
(31,64,1)
(41,70,1)
(35,7,1)
(48,13,1)
(23,16,1)
(11,19,1)
(6,62,1)
(13,49,1)
(58,5,1)
(43,71,1)
(46,14,1)
(19,27,1)
(53,47,1)
(60,45,1)
(10,72,1)
(64,3,1)
(53,71,2)
(6,50,2)
(11,45,2)
(25,50,2)
(12,20,2)
(66,20,2)
(73,71,2)
(16,71,2)
(47,71,2)
(21,13,2)
(9,71,2)
(0,71,2)
(4,13,2)
(44,20,2)
(19,47,2)
(13,49,2)
(5,13,2)
(2,71,2)
(3,71,2)
(14,71,2)
(61,71,2)
(72,50,2)
(11,19,2)
(39,71,2)
(49,45,2)
(49,71,2)
(57,71,2)
(48,71,2)
(46,2,2)
(52,71,2)
(70,13,2)
(13,71,2)
(51,13,2)
(63,71,2)
(20,71,2)
(50,71,2)
(55,71,2)
(27,20,2)
(33,71,2)
(68,71,2)
(64,71,2)
(69,50,2)
(18,71,2)
(41,13,2)
(45,71,2)
(23,71,2)
(60,71,2)
(11,20,2)
(46,45,2)
(7,71,2)
(62,50,2)
(19,20,2)
(26,71,2)
(46,36,2)
(20,47,2)
(56,20,2)
(58,13,2)
(46,14,2)
(10,71,2)
(17,71,2)
(38,71,2)
(50,46,2)
(35,71,2)
(47,26,2)
(36,71,2)
(46,71,2)
(31,71,2)
(59,50,2)
(58,45,2)
(26,45,2)
-----------------------------------
(0,0)
(1,password)
(2,&hUser)
(3,0)
(4,password)
(5,0)
(6,printLine("User logged in successfully.")
(7,domain)
(8,)
(9,stdin)
(10,break;)
(11,password[passwordLen-1])
(12,\\\'\\\\0\\\')
(13,fgets(password, 100, stdin)
(14,* username = "User")
(15,)
(16,LOGON32_PROVIDER_DEFAULT)
(17,"User")
(18,password)
(19,passwordLen-1)
(20,passwordLen > 0)
(21,printLine("fgets()
(22,)
(23,hUser)
(24,)
(25,"Unable to login.")
(26,strlen(password)
(27,1)
(28,)
(29,hUser)
(30,if (LogonUserA(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(31,username)
(32,if (fgets(password, 100, stdin)
(33,password)
(34,)
(35,password)
(36,* domain = "Domain")
(37,)
(38,"Domain")
(39,0)
(40,passwordLen)
(41,password[0] = \\\'\\\\0\\\')
(42,if (passwordLen > 0)
(43,RET)
(44,password[passwordLen-1] = \\\'\\\\0\\\')
(45,password[100] = "")
(46,LogonUserA(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(47,passwordLen = strlen(password)
(48,passwordLen)
(49,fgets(password, 100, stdin)
(50,LogonUserA(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(51,"fgets()
(52,NULL)
(53,passwordLen)
(54,domain)
(55,username)
(56,password)
(57,domain)
(58,password[0])
(59,CloseHandle(hUser)
(60,passwordLen)
(61,100)
(62,"User logged in successfully.")
(63,LOGON32_LOGON_NETWORK)
(64,passwordLen = 0)
(65,while(1)
(66,passwordLen)
(67,username)
(68,"")
(69,hUser)
(70,\\\'\\\\0\\\')
(71,1)
(72,printLine("Unable to login.")
(73,password)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
