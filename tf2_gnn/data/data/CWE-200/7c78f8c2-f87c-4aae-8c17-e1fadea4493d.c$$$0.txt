-----label-----
0
-----code-----
static void good1()
{
    while(1)
    {
        {
            char * password = (char *)malloc(100*sizeof(char));
            if (password == NULL) {exit(-1);}
            size_t passwordLen = 0;
            HANDLE hUser;
            char * username = "User";
            char * domain = "Domain";
            /* Initialize password */
            password[0] = '\0';
            if (fgets(password, 100, stdin) == NULL)
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                password[0] = '\0';
            }
            /* Remove the carriage return from the string that is inserted by fgets() */
            passwordLen = strlen(password);
            if (passwordLen > 0)
            {
                password[passwordLen-1] = '\0';
            }
            /* Use the password in LogonUser() to establish that it is "sensitive" */
            if (LogonUserA(
                        username,
                        domain,
                        password,
                        LOGON32_LOGON_NETWORK,
                        LOGON32_PROVIDER_DEFAULT,
                        &hUser) != 0)
            {
                printLine("User logged in successfully.");
                CloseHandle(hUser);
            }
            else
            {
                printLine("Unable to login.");
            }
            passwordLen = strlen(password);
            /* FIX: Clear password prior to freeing */
            SecureZeroMemory(password, passwordLen * sizeof(char));
            free(password);
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
8,9
8,10
9,10
9,11
9,12
9,13
9,14
9,15
9,16
9,17
9,18
9,19
9,20
9,21
9,22
9,23
10,11
11,12
11,13
13,14
13,15
13,16
16,17
17,18
17,19
18,19
18,20
20,21
22,23
22,24
23,24
25,26
25,27
27,28
28,29
28,30
31,32
31,33
32,33
32,34
33,34
35,36
37,38
38,39
39,40
39,41
40,41
42,43
44,45
45,46
45,47
46,47
48,49
48,50
50,51
52,53
53,54
53,55
54,55
56,57
58,59
59,60
59,61
61,62
61,63
61,64
64,65
66,67
67,68
67,69
69,70
69,71
69,72
72,73
74,75
75,76
75,77
76,77
76,78
77,78
81,82
81,83
82,83
82,84
83,84
83,85
83,86
83,87
84,85
86,87
89,90
91,92
93,94
93,95
94,95
95,96
95,97
96,97
99,100
100,101
100,102
101,102
101,103
102,103
106,107
107,108
107,109
108,109
110,111
110,112
111,112
113,114
115,116
115,117
116,117
116,118
117,118
120,121
121,122
122,123
122,124
123,124
123,125
124,125
126,127
126,128
127,128
131,132
131,133
131,134
132,133
132,134
133,134
133,135
133,136
133,137
133,138
133,139
133,140
134,135
136,137
138,139
140,141
142,143
144,145
146,147
147,148
150,151
150,152
151,152
152,153
152,154
153,154
156,157
157,158
157,159
158,159
160,161
162,163
163,164
164,165
164,166
165,166
168,169
169,170
169,171
170,171
172,173
172,174
173,174
175,176
177,178
178,179
178,180
178,181
179,180
181,182
183,184
183,185
184,185
186,187
187,188
187,189
190,191
191,192
191,193
192,193
194,195
-----nextToken-----
2,4,7,12,14,15,19,21,24,26,29,30,34,36,41,43,47,49,51,55,57,60,62,63,65,68,70,71,73,78,79,80,85,87,88,90,92,97,98,103,104,105,109,112,114,118,119,125,128,129,130,135,137,139,141,143,145,148,149,154,155,159,161,166,167,171,174,176,180,182,185,188,189,193,195,196
-----computeFrom-----
25,26
25,27
32,33
32,34
75,76
75,77
82,83
82,84
100,101
100,102
107,108
107,109
116,117
116,118
122,123
122,124
126,127
126,128
132,133
132,134
169,170
169,171
183,184
183,185
-----guardedBy-----
87,103
118,128
148,161
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;
-----ast_node-----
static void good1(){    while(1)    {        {            char * password = (char *)malloc(100*sizeof(char));            if (password == NULL) {exit(-1);}            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            /* Initialize password */            password[0] = '\0';            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            passwordLen = strlen(password);            /* FIX: Clear password prior to freeing */            SecureZeroMemory(password, passwordLen * sizeof(char));            free(password);        }        break;    }}
static void
good1()
good1
{    while(1)    {        {            char * password = (char *)malloc(100*sizeof(char));            if (password == NULL) {exit(-1);}            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            /* Initialize password */            password[0] = '\0';            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            passwordLen = strlen(password);            /* FIX: Clear password prior to freeing */            SecureZeroMemory(password, passwordLen * sizeof(char));            free(password);        }        break;    }}
while(1)    {        {            char * password = (char *)malloc(100*sizeof(char));            if (password == NULL) {exit(-1);}            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            /* Initialize password */            password[0] = '\0';            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            passwordLen = strlen(password);            /* FIX: Clear password prior to freeing */            SecureZeroMemory(password, passwordLen * sizeof(char));            free(password);        }        break;    }
1
{        {            char * password = (char *)malloc(100*sizeof(char));            if (password == NULL) {exit(-1);}            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            /* Initialize password */            password[0] = '\0';            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            passwordLen = strlen(password);            /* FIX: Clear password prior to freeing */            SecureZeroMemory(password, passwordLen * sizeof(char));            free(password);        }        break;    }
{            char * password = (char *)malloc(100*sizeof(char));            if (password == NULL) {exit(-1);}            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            /* Initialize password */            password[0] = '\0';            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            passwordLen = strlen(password);            /* FIX: Clear password prior to freeing */            SecureZeroMemory(password, passwordLen * sizeof(char));            free(password);        }
char * password = (char *)malloc(100*sizeof(char));
char * password = (char *)malloc(100*sizeof(char));
char
* password = (char *)malloc(100*sizeof(char))
*
password
= (char *)malloc(100*sizeof(char))
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (password == NULL) {exit(-1);}
password == NULL
password
password
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
size_t passwordLen = 0;
size_t passwordLen = 0;
size_t
size_t
passwordLen = 0
passwordLen
= 0
0
HANDLE hUser;
HANDLE hUser;
HANDLE
HANDLE
hUser
hUser
char * username = "User";
char * username = "User";
char
* username = "User"
*
username
= "User"
"User"
char * domain = "Domain";
char * domain = "Domain";
char
* domain = "Domain"
*
domain
= "Domain"
"Domain"
password[0] = '\0';
password[0] = '\0'
password[0]
password
password
0
'\0'
if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }
fgets(password, 100, stdin) == NULL
fgets(password, 100, stdin)
fgets
fgets
password
password
100
stdin
stdin
NULL
NULL
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
password[0] = '\0';
password[0] = '\0'
password[0]
password
password
0
'\0'
passwordLen = strlen(password);
passwordLen = strlen(password)
passwordLen
passwordLen
strlen(password)
strlen
strlen
password
password
if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }
passwordLen > 0
passwordLen
passwordLen
0
{                password[passwordLen-1] = '\0';            }
password[passwordLen-1] = '\0';
password[passwordLen-1] = '\0'
password[passwordLen-1]
password
password
passwordLen-1
passwordLen
passwordLen
1
'\0'
if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }
LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0
LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser)
LogonUserA
LogonUserA
username
username
domain
domain
password
password
LOGON32_LOGON_NETWORK
LOGON32_LOGON_NETWORK
LOGON32_PROVIDER_DEFAULT
LOGON32_PROVIDER_DEFAULT
&hUser
hUser
hUser
0
{                printLine("User logged in successfully.");                CloseHandle(hUser);            }
printLine("User logged in successfully.");
printLine("User logged in successfully.")
printLine
printLine
"User logged in successfully."
CloseHandle(hUser);
CloseHandle(hUser)
CloseHandle
CloseHandle
hUser
hUser
{                printLine("Unable to login.");            }
printLine("Unable to login.");
printLine("Unable to login.")
printLine
printLine
"Unable to login."
passwordLen = strlen(password);
passwordLen = strlen(password)
passwordLen
passwordLen
strlen(password)
strlen
strlen
password
password
SecureZeroMemory(password, passwordLen * sizeof(char));
SecureZeroMemory(password, passwordLen * sizeof(char))
SecureZeroMemory
SecureZeroMemory
password
password
passwordLen * sizeof(char)
passwordLen
passwordLen
sizeof(char)
char
char

free(password);
free(password)
free
free
password
password
break;
-----joern-----
(92,50,0)
(15,33,0)
(14,75,0)
(89,49,0)
(47,7,0)
(101,68,0)
(2,32,0)
(49,75,0)
(32,16,0)
(104,75,0)
(95,12,0)
(22,49,0)
(35,6,0)
(38,55,0)
(88,46,0)
(70,52,0)
(6,82,0)
(43,69,0)
(89,14,0)
(77,22,0)
(22,77,0)
(45,75,0)
(1,68,0)
(3,49,0)
(71,89,0)
(57,97,0)
(77,55,0)
(64,69,0)
(11,61,0)
(28,1,0)
(68,1,0)
(81,89,0)
(17,93,0)
(34,83,0)
(50,49,0)
(90,95,0)
(13,67,0)
(42,89,0)
(66,49,0)
(89,71,0)
(33,15,0)
(74,16,0)
(102,12,0)
(30,49,0)
(19,89,0)
(10,75,0)
(5,14,0)
(89,7,0)
(39,104,0)
(18,75,0)
(96,30,0)
(73,61,0)
(61,12,0)
(20,7,0)
(26,85,0)
(78,1,0)
(41,75,0)
(1,49,0)
(56,75,0)
(52,3,0)
(8,75,0)
(80,12,0)
(46,74,0)
(98,50,0)
(29,0,0)
(49,15,0)
(24,102,0)
(12,75,0)
(21,1,0)
(37,22,0)
(67,72,0)
(15,97,0)
(36,87,0)
(86,23,0)
(4,30,0)
(62,95,0)
(69,43,0)
(51,57,0)
(13,49,0)
(7,75,0)
(50,104,0)
(0,75,0)
(53,57,0)
(40,41,0)
(0,49,0)
(48,74,0)
(75,83,0)
(89,85,0)
(13,95,0)
(99,36,0)
(46,49,0)
(22,75,0)
(43,65,0)
(55,77,0)
(100,3,0)
(52,75,0)
(44,89,0)
(95,13,0)
(12,102,0)
(25,71,0)
(93,87,0)
(103,41,0)
(59,75,0)
(63,51,0)
(84,75,0)
(3,52,0)
(97,15,0)
(94,89,0)
(15,49,0)
(85,89,0)
(9,13,0)
(77,52,0)
(102,49,0)
(60,67,0)
(58,77,0)
(79,75,0)
(57,51,0)
(54,75,0)
(31,14,0)
(76,46,0)
(97,57,0)
(38,58,1)
(61,11,1)
(52,3,1)
(89,14,1)
(1,21,1)
(67,60,1)
(89,49,1)
(36,99,1)
(57,51,1)
(63,53,1)
(14,5,1)
(73,12,1)
(74,48,1)
(96,49,1)
(53,66,1)
(1,49,1)
(24,80,1)
(13,49,1)
(95,12,1)
(5,31,1)
(61,12,1)
(102,49,1)
(68,101,1)
(4,96,1)
(25,19,1)
(30,49,1)
(37,52,1)
(60,13,1)
(92,7,1)
(3,49,1)
(9,61,1)
(94,61,1)
(31,41,1)
(81,44,1)
(104,39,1)
(0,29,1)
(68,1,1)
(80,68,1)
(44,42,1)
(85,89,1)
(48,46,1)
(91,34,1)
(99,93,1)
(6,35,1)
(95,90,1)
(90,62,1)
(32,2,1)
(3,100,1)
(20,47,1)
(49,15,1)
(76,32,1)
(13,95,1)
(19,81,1)
(71,25,1)
(34,0,1)
(50,49,1)
(47,14,1)
(46,88,1)
(46,49,1)
(29,22,1)
(42,94,1)
(69,64,1)
(77,52,1)
(66,27,1)
(55,38,1)
(26,89,1)
(12,102,1)
(28,104,1)
(40,103,1)
(89,71,1)
(94,67,1)
(91,27,1)
(39,50,1)
(89,7,1)
(0,49,1)
(58,37,1)
(77,55,1)
(30,4,1)
(70,6,1)
(88,76,1)
(101,1,1)
(64,30,1)
(15,33,1)
(97,57,1)
(2,68,1)
(17,85,1)
(51,63,1)
(62,9,1)
(103,43,1)
(93,17,1)
(50,98,1)
(78,28,1)
(22,49,1)
(21,78,1)
(70,36,1)
(102,24,1)
(80,74,1)
(11,73,1)
(103,30,1)
(22,77,1)
(15,97,1)
(43,69,1)
(41,40,1)
(35,85,1)
(100,70,1)
(98,92,1)
(85,26,1)
(7,20,1)
(102,49,2)
(26,27,2)
(0,27,2)
(61,27,2)
(97,57,2)
(85,27,2)
(55,27,2)
(89,14,2)
(101,27,2)
(7,27,2)
(0,49,2)
(81,27,2)
(2,68,2)
(15,33,2)
(51,27,2)
(49,15,2)
(77,27,2)
(74,68,2)
(97,27,2)
(48,68,2)
(3,49,2)
(13,95,2)
(80,27,2)
(35,85,2)
(19,27,2)
(4,27,2)
(44,27,2)
(68,27,2)
(12,27,2)
(25,27,2)
(57,51,2)
(64,30,2)
(9,61,2)
(85,89,2)
(104,27,2)
(5,27,2)
(77,55,2)
(1,27,2)
(89,7,2)
(89,71,2)
(50,27,2)
(100,27,2)
(32,68,2)
(47,27,2)
(96,27,2)
(102,27,2)
(22,27,2)
(11,27,2)
(63,27,2)
(28,27,2)
(69,30,2)
(43,30,2)
(21,27,2)
(12,102,2)
(46,49,2)
(71,27,2)
(40,27,2)
(41,27,2)
(15,97,2)
(34,27,2)
(95,12,2)
(68,1,2)
(46,68,2)
(90,61,2)
(62,61,2)
(73,27,2)
(36,85,2)
(24,27,2)
(89,49,2)
(94,27,2)
(20,27,2)
(42,27,2)
(15,27,2)
(99,85,2)
(3,27,2)
(22,77,2)
(67,61,2)
(103,27,2)
(92,27,2)
(17,85,2)
(66,27,2)
(38,27,2)
(58,27,2)
(61,12,2)
(78,27,2)
(77,52,2)
(14,27,2)
(50,49,2)
(31,27,2)
(30,49,2)
(22,49,2)
(76,68,2)
(60,61,2)
(98,27,2)
(13,61,2)
(53,27,2)
(6,85,2)
(52,27,2)
(37,27,2)
(70,27,2)
(89,27,2)
(39,27,2)
(93,85,2)
(43,69,2)
(52,3,2)
(88,68,2)
(30,27,2)
(49,27,2)
(29,27,2)
(1,49,2)
(95,61,2)
(57,27,2)
(13,49,2)
-----------------------------------
(0,free(password)
(1,fgets(password, 100, stdin)
(2,"fgets()
(3,strlen(password)
(4,NULL)
(5,"User")
(6,printLine("Unable to login.")
(7,* domain = "Domain")
(8,username)
(9,password)
(10,hUser)
(11,0)
(12,passwordLen = strlen(password)
(13,password[passwordLen-1])
(14,* username = "User")
(15,(char *)
(16,)
(17,"User logged in successfully.")
(18,domain)
(19,LOGON32_PROVIDER_DEFAULT)
(20,"Domain")
(21,stdin)
(22,SecureZeroMemory(password, passwordLen * sizeof(char)
(23,)
(24,password)
(25,hUser)
(26,0)
(27,1)
(28,password)
(29,password)
(30,password == NULL)
(31,username)
(32,printLine("fgets()
(33,char *)
(34,break;)
(35,"Unable to login.")
(36,CloseHandle(hUser)
(37,password)
(38,char)
(39,\\\'\\\\0\\\')
(40,0)
(41,passwordLen = 0)
(42,domain)
(43,exit(-1)
(44,password)
(45,if (fgets(password, 100, stdin)
(46,password[0])
(47,domain)
(48,\\\'\\\\0\\\')
(49,* password = (char *)
(50,password[0])
(51,sizeof(char)
(52,passwordLen = strlen(password)
(53,100)
(54,passwordLen)
(55,sizeof(char)
(56,if (passwordLen > 0)
(57,100*sizeof(char)
(58,passwordLen)
(59,if (LogonUserA(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(60,\\\'\\\\0\\\')
(61,passwordLen > 0)
(62,passwordLen)
(63,char)
(64,1)
(65,)
(66,password)
(67,password[passwordLen-1] = \\\'\\\\0\\\')
(68,fgets(password, 100, stdin)
(69,-1)
(70,passwordLen)
(71,&hUser)
(72,)
(73,passwordLen)
(74,password[0] = \\\'\\\\0\\\')
(75,)
(76,password)
(77,passwordLen * sizeof(char)
(78,100)
(79,password)
(80,passwordLen)
(81,LOGON32_LOGON_NETWORK)
(82,)
(83,)
(84,if (password == NULL)
(85,LogonUserA(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(86,while(1)
(87,)
(88,0)
(89,LogonUserA(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(90,1)
(91,RET)
(92,password)
(93,printLine("User logged in successfully.")
(94,username)
(95,passwordLen-1)
(96,password)
(97,malloc(100*sizeof(char)
(98,0)
(99,hUser)
(100,password)
(101,NULL)
(102,strlen(password)
(103,passwordLen)
(104,password[0] = \\\'\\\\0\\\')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
