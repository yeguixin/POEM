-----label-----
0
-----code-----
static void good1()
{
    if(GLOBAL_CONST_FALSE)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        {
            wchar_t * password = (wchar_t *)malloc(100*sizeof(wchar_t));
            if (password == NULL) {exit(-1);}
            size_t passwordLen = 0;
            HANDLE hUser;
            wchar_t * username = L"User";
            wchar_t * domain = L"Domain";
            /* Initialize password */
            password[0] = L'\0';
            if (fgetws(password, 100, stdin) == NULL)
            {
                printLine("fgetws() failed");
                /* Restore NUL terminator if fgetws fails */
                password[0] = L'\0';
            }
            /* Remove the carriage return from the string that is inserted by fgetws() */
            passwordLen = wcslen(password);
            if (passwordLen > 0)
            {
                password[passwordLen-1] = L'\0';
            }
            /* Use the password in LogonUser() to establish that it is "sensitive" */
            if (LogonUserW(
                        username,
                        domain,
                        password,
                        LOGON32_LOGON_NETWORK,
                        LOGON32_PROVIDER_DEFAULT,
                        &hUser) != 0)
            {
                printLine("User logged in successfully.");
                CloseHandle(hUser);
            }
            else
            {
                printLine("Unable to login.");
            }
            /* FIX: Zeroize the password buffer before reallocating it */
            SecureZeroMemory(password, 100 * sizeof(wchar_t));
            password = realloc(password, 200 * sizeof(wchar_t));
            if (password == NULL) {exit(-1);}
            /* Use the password buffer again */
            wcscpy(password, L"Nothing to see here");
            printWLine(password);
            free(password);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
6,9
7,8
9,10
10,11
11,12
11,13
12,13
15,16
16,17
16,18
16,19
16,20
16,21
16,22
16,23
16,24
16,25
16,26
16,27
16,28
16,29
16,30
16,31
16,32
16,33
17,18
18,19
18,20
20,21
20,22
20,23
23,24
24,25
24,26
25,26
25,27
27,28
29,30
29,31
30,31
32,33
32,34
34,35
35,36
35,37
38,39
38,40
39,40
39,41
40,41
42,43
44,45
45,46
46,47
46,48
47,48
49,50
51,52
52,53
52,54
53,54
55,56
55,57
57,58
59,60
60,61
60,62
61,62
63,64
65,66
66,67
66,68
68,69
68,70
68,71
71,72
73,74
74,75
74,76
76,77
76,78
76,79
79,80
81,82
82,83
82,84
83,84
83,85
84,85
88,89
88,90
89,90
89,91
90,91
90,92
90,93
90,94
91,92
93,94
96,97
98,99
100,101
100,102
101,102
102,103
102,104
103,104
106,107
107,108
107,109
108,109
108,110
109,110
113,114
114,115
114,116
115,116
117,118
117,119
118,119
120,121
122,123
122,124
123,124
123,125
124,125
127,128
128,129
129,130
129,131
130,131
130,132
131,132
133,134
133,135
134,135
138,139
138,140
138,141
139,140
139,141
140,141
140,142
140,143
140,144
140,145
140,146
140,147
141,142
143,144
145,146
147,148
149,150
151,152
153,154
154,155
157,158
157,159
158,159
159,160
159,161
160,161
163,164
164,165
164,166
165,166
167,168
169,170
170,171
171,172
171,173
172,173
175,176
176,177
176,178
176,179
177,178
179,180
181,182
181,183
183,184
184,185
184,186
187,188
188,189
188,190
189,190
191,192
191,193
191,194
192,193
194,195
196,197
196,198
198,199
199,200
199,201
202,203
202,204
203,204
203,205
204,205
206,207
208,209
209,210
210,211
210,212
211,212
213,214
215,216
216,217
216,218
216,219
217,218
219,220
222,223
223,224
223,225
224,225
226,227
228,229
229,230
229,231
230,231
232,233
-----nextToken-----
2,4,8,13,14,19,21,22,26,28,31,33,36,37,41,43,48,50,54,56,58,62,64,67,69,70,72,75,77,78,80,85,86,87,92,94,95,97,99,104,105,110,111,112,116,119,121,125,126,132,135,136,137,142,144,146,148,150,152,155,156,161,162,166,168,173,174,178,180,182,185,186,190,193,195,197,200,201,205,207,212,214,218,220,221,225,227,231,233
-----computeFrom-----
32,33
32,34
39,40
39,41
82,83
82,84
89,90
89,91
107,108
107,109
114,115
114,116
123,124
123,125
129,130
129,131
133,134
133,135
139,140
139,141
181,182
181,183
188,189
188,190
196,197
196,198
203,204
203,205
-----guardedBy-----
94,110
125,135
155,168
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void good1(){    if(GLOBAL_CONST_FALSE)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            wchar_t * password = (wchar_t *)malloc(100*sizeof(wchar_t));            if (password == NULL) {exit(-1);}            size_t passwordLen = 0;            HANDLE hUser;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            /* Initialize password */            password[0] = L'\0';            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FIX: Zeroize the password buffer before reallocating it */            SecureZeroMemory(password, 100 * sizeof(wchar_t));            password = realloc(password, 200 * sizeof(wchar_t));            if (password == NULL) {exit(-1);}            /* Use the password buffer again */            wcscpy(password, L"Nothing to see here");            printWLine(password);            free(password);        }    }}
static void
good1()
good1
{    if(GLOBAL_CONST_FALSE)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            wchar_t * password = (wchar_t *)malloc(100*sizeof(wchar_t));            if (password == NULL) {exit(-1);}            size_t passwordLen = 0;            HANDLE hUser;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            /* Initialize password */            password[0] = L'\0';            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FIX: Zeroize the password buffer before reallocating it */            SecureZeroMemory(password, 100 * sizeof(wchar_t));            password = realloc(password, 200 * sizeof(wchar_t));            if (password == NULL) {exit(-1);}            /* Use the password buffer again */            wcscpy(password, L"Nothing to see here");            printWLine(password);            free(password);        }    }}
if(GLOBAL_CONST_FALSE)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            wchar_t * password = (wchar_t *)malloc(100*sizeof(wchar_t));            if (password == NULL) {exit(-1);}            size_t passwordLen = 0;            HANDLE hUser;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            /* Initialize password */            password[0] = L'\0';            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FIX: Zeroize the password buffer before reallocating it */            SecureZeroMemory(password, 100 * sizeof(wchar_t));            password = realloc(password, 200 * sizeof(wchar_t));            if (password == NULL) {exit(-1);}            /* Use the password buffer again */            wcscpy(password, L"Nothing to see here");            printWLine(password);            free(password);        }    }
GLOBAL_CONST_FALSE
GLOBAL_CONST_FALSE
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        {            wchar_t * password = (wchar_t *)malloc(100*sizeof(wchar_t));            if (password == NULL) {exit(-1);}            size_t passwordLen = 0;            HANDLE hUser;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            /* Initialize password */            password[0] = L'\0';            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FIX: Zeroize the password buffer before reallocating it */            SecureZeroMemory(password, 100 * sizeof(wchar_t));            password = realloc(password, 200 * sizeof(wchar_t));            if (password == NULL) {exit(-1);}            /* Use the password buffer again */            wcscpy(password, L"Nothing to see here");            printWLine(password);            free(password);        }    }
{            wchar_t * password = (wchar_t *)malloc(100*sizeof(wchar_t));            if (password == NULL) {exit(-1);}            size_t passwordLen = 0;            HANDLE hUser;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            /* Initialize password */            password[0] = L'\0';            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FIX: Zeroize the password buffer before reallocating it */            SecureZeroMemory(password, 100 * sizeof(wchar_t));            password = realloc(password, 200 * sizeof(wchar_t));            if (password == NULL) {exit(-1);}            /* Use the password buffer again */            wcscpy(password, L"Nothing to see here");            printWLine(password);            free(password);        }
wchar_t * password = (wchar_t *)malloc(100*sizeof(wchar_t));
wchar_t * password = (wchar_t *)malloc(100*sizeof(wchar_t));
wchar_t
* password = (wchar_t *)malloc(100*sizeof(wchar_t))
*
password
= (wchar_t *)malloc(100*sizeof(wchar_t))
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (password == NULL) {exit(-1);}
password == NULL
password
password
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
size_t passwordLen = 0;
size_t passwordLen = 0;
size_t
size_t
passwordLen = 0
passwordLen
= 0
0
HANDLE hUser;
HANDLE hUser;
HANDLE
HANDLE
hUser
hUser
wchar_t * username = L"User";
wchar_t * username = L"User";
wchar_t
* username = L"User"
*
username
= L"User"
L"User"
wchar_t * domain = L"Domain";
wchar_t * domain = L"Domain";
wchar_t
* domain = L"Domain"
*
domain
= L"Domain"
L"Domain"
password[0] = L'\0';
password[0] = L'\0'
password[0]
password
password
0
L'\0'
if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }
fgetws(password, 100, stdin) == NULL
fgetws(password, 100, stdin)
fgetws
fgetws
password
password
100
stdin
stdin
NULL
NULL
{                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }
printLine("fgetws() failed");
printLine("fgetws() failed")
printLine
printLine
"fgetws() failed"
password[0] = L'\0';
password[0] = L'\0'
password[0]
password
password
0
L'\0'
passwordLen = wcslen(password);
passwordLen = wcslen(password)
passwordLen
passwordLen
wcslen(password)
wcslen
wcslen
password
password
if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }
passwordLen > 0
passwordLen
passwordLen
0
{                password[passwordLen-1] = L'\0';            }
password[passwordLen-1] = L'\0';
password[passwordLen-1] = L'\0'
password[passwordLen-1]
password
password
passwordLen-1
passwordLen
passwordLen
1
L'\0'
if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }
LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0
LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser)
LogonUserW
LogonUserW
username
username
domain
domain
password
password
LOGON32_LOGON_NETWORK
LOGON32_LOGON_NETWORK
LOGON32_PROVIDER_DEFAULT
LOGON32_PROVIDER_DEFAULT
&hUser
hUser
hUser
0
{                printLine("User logged in successfully.");                CloseHandle(hUser);            }
printLine("User logged in successfully.");
printLine("User logged in successfully.")
printLine
printLine
"User logged in successfully."
CloseHandle(hUser);
CloseHandle(hUser)
CloseHandle
CloseHandle
hUser
hUser
{                printLine("Unable to login.");            }
printLine("Unable to login.");
printLine("Unable to login.")
printLine
printLine
"Unable to login."
SecureZeroMemory(password, 100 * sizeof(wchar_t));
SecureZeroMemory(password, 100 * sizeof(wchar_t))
SecureZeroMemory
SecureZeroMemory
password
password
100 * sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

password = realloc(password, 200 * sizeof(wchar_t));
password = realloc(password, 200 * sizeof(wchar_t))
password
password
realloc(password, 200 * sizeof(wchar_t))
realloc
realloc
password
password
200 * sizeof(wchar_t)
200
sizeof(wchar_t)
wchar_t
wchar_t

if (password == NULL) {exit(-1);}
password == NULL
password
password
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(password, L"Nothing to see here");
wcscpy(password, L"Nothing to see here")
wcscpy
wcscpy
password
password
L"Nothing to see here"
printWLine(password);
printWLine(password)
printWLine
printWLine
password
password
free(password);
free(password)
free
free
password
password
-----joern-----
(3,90,0)
(23,37,0)
(32,33,0)
(84,28,0)
(59,37,0)
(75,81,0)
(2,10,0)
(33,32,0)
(43,10,0)
(0,81,0)
(40,13,0)
(21,22,0)
(64,41,0)
(78,23,0)
(57,72,0)
(5,10,0)
(65,34,0)
(18,10,0)
(13,31,0)
(34,50,0)
(21,93,0)
(97,10,0)
(22,18,0)
(53,39,0)
(47,18,0)
(47,10,0)
(10,46,0)
(14,49,0)
(39,18,0)
(62,10,0)
(100,16,0)
(32,25,0)
(37,10,0)
(6,60,0)
(20,8,0)
(11,21,0)
(83,47,0)
(69,90,0)
(88,99,0)
(15,23,0)
(16,37,0)
(38,10,0)
(74,41,0)
(51,10,0)
(29,22,0)
(35,93,0)
(59,64,0)
(41,80,0)
(22,21,0)
(86,10,0)
(8,98,0)
(64,59,0)
(54,1,0)
(37,59,0)
(93,21,0)
(7,36,0)
(81,0,0)
(23,15,0)
(82,72,0)
(98,8,0)
(56,13,0)
(89,88,0)
(41,64,0)
(27,9,0)
(81,60,0)
(80,41,0)
(90,37,0)
(61,37,0)
(66,90,0)
(77,14,0)
(79,23,0)
(45,10,0)
(60,81,0)
(52,85,0)
(63,80,0)
(98,76,0)
(73,37,0)
(94,59,0)
(26,96,0)
(95,28,0)
(96,42,0)
(18,22,0)
(85,90,0)
(24,10,0)
(22,37,0)
(87,61,0)
(16,31,0)
(44,58,0)
(31,16,0)
(71,23,0)
(28,10,0)
(0,10,0)
(67,18,0)
(55,23,0)
(12,49,0)
(39,10,0)
(31,10,0)
(0,37,0)
(90,85,0)
(92,61,0)
(58,23,0)
(48,33,0)
(91,31,0)
(9,50,0)
(17,10,0)
(23,58,0)
(59,94,0)
(30,23,0)
(4,15,0)
(68,0,0)
(72,18,0)
(65,9,1)
(55,30,1)
(31,16,1)
(72,57,1)
(13,40,1)
(16,37,1)
(68,88,1)
(91,85,1)
(14,77,1)
(63,74,1)
(23,58,1)
(59,64,1)
(75,68,1)
(64,41,1)
(7,13,1)
(70,47,1)
(84,95,1)
(93,35,1)
(3,69,1)
(67,0,1)
(92,37,1)
(85,52,1)
(88,89,1)
(13,31,1)
(21,93,1)
(47,83,1)
(69,66,1)
(53,72,1)
(89,15,1)
(32,33,1)
(39,53,1)
(72,18,1)
(80,63,1)
(95,61,1)
(98,8,1)
(38,86,1)
(96,26,1)
(52,90,1)
(91,12,1)
(58,44,1)
(4,23,1)
(15,4,1)
(11,29,1)
(23,37,1)
(77,85,1)
(12,14,1)
(26,19,1)
(71,7,1)
(71,13,1)
(73,19,1)
(83,39,1)
(82,18,1)
(30,78,1)
(0,37,1)
(18,22,1)
(6,75,1)
(35,11,1)
(20,61,1)
(66,38,1)
(47,18,1)
(15,23,1)
(22,37,1)
(48,72,1)
(41,80,1)
(100,91,1)
(57,82,1)
(61,37,1)
(0,81,1)
(61,87,1)
(22,21,1)
(39,18,1)
(9,27,1)
(74,73,1)
(44,79,1)
(56,31,1)
(95,98,1)
(8,20,1)
(62,28,1)
(27,15,1)
(85,90,1)
(40,56,1)
(79,55,1)
(60,6,1)
(33,48,1)
(29,67,1)
(16,100,1)
(90,3,1)
(53,32,1)
(28,84,1)
(59,94,1)
(78,71,1)
(86,62,1)
(68,34,1)
(70,96,1)
(37,59,1)
(90,37,1)
(87,92,1)
(81,60,1)
(34,65,1)
(21,93,2)
(71,19,2)
(88,15,2)
(31,16,2)
(13,31,2)
(28,19,2)
(16,37,2)
(90,19,2)
(37,59,2)
(15,19,2)
(83,19,2)
(41,19,2)
(23,37,2)
(30,19,2)
(29,19,2)
(77,85,2)
(68,19,2)
(0,81,2)
(32,33,2)
(85,19,2)
(15,23,2)
(85,90,2)
(47,19,2)
(47,18,2)
(31,19,2)
(59,19,2)
(89,15,2)
(67,19,2)
(21,19,2)
(55,19,2)
(72,19,2)
(66,19,2)
(26,19,2)
(4,19,2)
(23,58,2)
(58,19,2)
(16,19,2)
(65,15,2)
(20,61,2)
(81,19,2)
(82,19,2)
(23,19,2)
(6,19,2)
(22,19,2)
(0,19,2)
(62,19,2)
(0,37,2)
(92,19,2)
(61,19,2)
(14,85,2)
(60,19,2)
(98,8,2)
(64,41,2)
(32,72,2)
(79,19,2)
(96,19,2)
(93,19,2)
(98,61,2)
(57,19,2)
(72,18,2)
(73,19,2)
(75,19,2)
(18,22,2)
(22,21,2)
(35,19,2)
(78,19,2)
(63,19,2)
(84,19,2)
(41,80,2)
(95,19,2)
(9,15,2)
(61,37,2)
(81,60,2)
(39,18,2)
(59,64,2)
(34,15,2)
(74,19,2)
(100,19,2)
(56,19,2)
(48,72,2)
(38,19,2)
(40,19,2)
(80,19,2)
(69,19,2)
(87,19,2)
(37,19,2)
(12,85,2)
(53,19,2)
(27,15,2)
(13,19,2)
(7,13,2)
(91,19,2)
(8,61,2)
(52,19,2)
(18,19,2)
(22,37,2)
(90,37,2)
(59,94,2)
(86,19,2)
(64,19,2)
(33,72,2)
(39,19,2)
(11,19,2)
(44,19,2)
(3,19,2)
-----------------------------------
(0,SecureZeroMemory(password, 100 * sizeof(wchar_t)
(1,)
(2,if (password == NULL)
(3,stdin)
(4,0)
(5,if (LogonUserW(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(6,wchar_t)
(7,\\\'\\\\0\\\')
(8,-1)
(9,printLine("User logged in successfully.")
(10,)
(11,200)
(12,\\\'\\\\0\\\')
(13,passwordLen > 0)
(14,printLine("fgetws()
(15,LogonUserW(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(16,wcslen(password)
(17,password)
(18,password = realloc(password, 200 * sizeof(wchar_t)
(19,GLOBAL_CONST_FALSE)
(20,1)
(21,200 * sizeof(wchar_t)
(22,realloc(password, 200 * sizeof(wchar_t)
(23,LogonUserW(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(24,passwordLen)
(25,)
(26,"Benign, fixed string")
(27,"User logged in successfully.")
(28,passwordLen = 0)
(29,password)
(30,password)
(31,passwordLen = wcslen(password)
(32,exit(-1)
(33,-1)
(34,CloseHandle(hUser)
(35,wchar_t)
(36,)
(37,* password = (wchar_t *)
(38,\\\'\\\\0\\\')
(39,printWLine(password)
(40,0)
(41,100*sizeof(wchar_t)
(42,)
(43,if (password == NULL)
(44,hUser)
(45,if (fgetws(password, 100, stdin)
(46,)
(47,free(password)
(48,1)
(49,)
(50,)
(51,if (passwordLen > 0)
(52,NULL)
(53,password)
(54,if(GLOBAL_CONST_FALSE)
(55,LOGON32_LOGON_NETWORK)
(56,passwordLen)
(57,NULL)
(58,&hUser)
(59,(wchar_t *)
(60,sizeof(wchar_t)
(61,password == NULL)
(62,"User")
(63,wchar_t)
(64,malloc(100*sizeof(wchar_t)
(65,hUser)
(66,password)
(67,password)
(68,password)
(69,100)
(70,RET)
(71,username)
(72,password == NULL)
(73,password)
(74,100)
(75,100)
(76,)
(77,"fgetws()
(78,domain)
(79,LOGON32_PROVIDER_DEFAULT)
(80,sizeof(wchar_t)
(81,100 * sizeof(wchar_t)
(82,password)
(83,password)
(84,0)
(85,fgetws(password, 100, stdin)
(86,"Domain")
(87,NULL)
(88,printLine("Unable to login.")
(89,"Unable to login.")
(90,fgetws(password, 100, stdin)
(91,passwordLen)
(92,password)
(93,sizeof(wchar_t)
(94,wchar_t *)
(95,passwordLen)
(96,printLine("Benign, fixed string")
(97,hUser)
(98,exit(-1)
(99,)
(100,password)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
