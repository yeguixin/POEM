-----label-----
1
-----code-----
void CWE226_Sensitive_Information_Uncleared_Before_Release__w32_wchar_t_alloca_11_bad()
{
    if(globalReturnsTrue())
    {
        {
            wchar_t * password = (wchar_t *)ALLOCA(100*sizeof(wchar_t));
            size_t passwordLen = 0;
            HANDLE hUser;
            wchar_t * username = L"User";
            wchar_t * domain = L"Domain";
            /* Initialize password */
            password[0] = L'\0';
            if (fgetws(password, 100, stdin) == NULL)
            {
                printLine("fgetws() failed");
                /* Restore NUL terminator if fgetws fails */
                password[0] = L'\0';
            }
            /* Remove the carriage return from the string that is inserted by fgetws() */
            passwordLen = wcslen(password);
            if (passwordLen > 0)
            {
                password[passwordLen-1] = L'\0';
            }
            /* Use the password in LogonUser() to establish that it is "sensitive" */
            if (LogonUserW(
                        username,
                        domain,
                        password,
                        LOGON32_LOGON_NETWORK,
                        LOGON32_PROVIDER_DEFAULT,
                        &hUser) != 0)
            {
                printLine("User logged in successfully.");
                CloseHandle(hUser);
            }
            else
            {
                printLine("Unable to login.");
            }
            /* FLAW: Release password from the stack without first clearing the buffer */
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
8,9
10,11
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
12,13
13,14
13,15
15,16
15,17
15,18
18,19
19,20
19,21
20,21
20,22
22,23
24,25
24,26
25,26
27,28
27,29
29,30
30,31
30,32
33,34
34,35
34,36
35,36
37,38
37,39
39,40
41,42
42,43
42,44
43,44
45,46
47,48
48,49
48,50
50,51
50,52
50,53
53,54
55,56
56,57
56,58
58,59
58,60
58,61
61,62
63,64
64,65
64,66
65,66
65,67
66,67
70,71
70,72
71,72
71,73
72,73
72,74
72,75
72,76
73,74
75,76
78,79
80,81
82,83
82,84
83,84
84,85
84,86
85,86
88,89
89,90
89,91
90,91
90,92
91,92
95,96
96,97
96,98
97,98
99,100
99,101
100,101
102,103
104,105
104,106
105,106
105,107
106,107
109,110
110,111
111,112
111,113
112,113
112,114
113,114
115,116
115,117
116,117
120,121
120,122
120,123
121,122
121,123
122,123
122,124
122,125
122,126
122,127
122,128
122,129
123,124
125,126
127,128
129,130
131,132
133,134
135,136
136,137
139,140
139,141
140,141
141,142
141,143
142,143
145,146
146,147
146,148
147,148
149,150
151,152
152,153
153,154
153,155
154,155
-----nextToken-----
2,4,9,14,16,17,21,23,26,28,31,32,36,38,40,44,46,49,51,52,54,57,59,60,62,67,68,69,74,76,77,79,81,86,87,92,93,94,98,101,103,107,108,114,117,118,119,124,126,128,130,132,134,137,138,143,144,148,150,155,156
-----computeFrom-----
27,28
27,29
64,65
64,66
71,72
71,73
89,90
89,91
96,97
96,98
105,106
105,107
111,112
111,113
115,116
115,117
121,122
121,123
-----guardedBy-----
76,92
107,117
137,150
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE226_Sensitive_Information_Uncleared_Before_Release__w32_wchar_t_alloca_11_bad(){    if(globalReturnsTrue())    {        {            wchar_t * password = (wchar_t *)ALLOCA(100*sizeof(wchar_t));            size_t passwordLen = 0;            HANDLE hUser;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            /* Initialize password */            password[0] = L'\0';            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Release password from the stack without first clearing the buffer */        }    }}
void
CWE226_Sensitive_Information_Uncleared_Before_Release__w32_wchar_t_alloca_11_bad()
CWE226_Sensitive_Information_Uncleared_Before_Release__w32_wchar_t_alloca_11_bad
{    if(globalReturnsTrue())    {        {            wchar_t * password = (wchar_t *)ALLOCA(100*sizeof(wchar_t));            size_t passwordLen = 0;            HANDLE hUser;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            /* Initialize password */            password[0] = L'\0';            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Release password from the stack without first clearing the buffer */        }    }}
if(globalReturnsTrue())    {        {            wchar_t * password = (wchar_t *)ALLOCA(100*sizeof(wchar_t));            size_t passwordLen = 0;            HANDLE hUser;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            /* Initialize password */            password[0] = L'\0';            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Release password from the stack without first clearing the buffer */        }    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        {            wchar_t * password = (wchar_t *)ALLOCA(100*sizeof(wchar_t));            size_t passwordLen = 0;            HANDLE hUser;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            /* Initialize password */            password[0] = L'\0';            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Release password from the stack without first clearing the buffer */        }    }
{            wchar_t * password = (wchar_t *)ALLOCA(100*sizeof(wchar_t));            size_t passwordLen = 0;            HANDLE hUser;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            /* Initialize password */            password[0] = L'\0';            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Release password from the stack without first clearing the buffer */        }
wchar_t * password = (wchar_t *)ALLOCA(100*sizeof(wchar_t));
wchar_t * password = (wchar_t *)ALLOCA(100*sizeof(wchar_t));
wchar_t
* password = (wchar_t *)ALLOCA(100*sizeof(wchar_t))
*
password
= (wchar_t *)ALLOCA(100*sizeof(wchar_t))
(wchar_t *)ALLOCA(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
ALLOCA(100*sizeof(wchar_t))
ALLOCA
ALLOCA
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

size_t passwordLen = 0;
size_t passwordLen = 0;
size_t
size_t
passwordLen = 0
passwordLen
= 0
0
HANDLE hUser;
HANDLE hUser;
HANDLE
HANDLE
hUser
hUser
wchar_t * username = L"User";
wchar_t * username = L"User";
wchar_t
* username = L"User"
*
username
= L"User"
L"User"
wchar_t * domain = L"Domain";
wchar_t * domain = L"Domain";
wchar_t
* domain = L"Domain"
*
domain
= L"Domain"
L"Domain"
password[0] = L'\0';
password[0] = L'\0'
password[0]
password
password
0
L'\0'
if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }
fgetws(password, 100, stdin) == NULL
fgetws(password, 100, stdin)
fgetws
fgetws
password
password
100
stdin
stdin
NULL
NULL
{                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }
printLine("fgetws() failed");
printLine("fgetws() failed")
printLine
printLine
"fgetws() failed"
password[0] = L'\0';
password[0] = L'\0'
password[0]
password
password
0
L'\0'
passwordLen = wcslen(password);
passwordLen = wcslen(password)
passwordLen
passwordLen
wcslen(password)
wcslen
wcslen
password
password
if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }
passwordLen > 0
passwordLen
passwordLen
0
{                password[passwordLen-1] = L'\0';            }
password[passwordLen-1] = L'\0';
password[passwordLen-1] = L'\0'
password[passwordLen-1]
password
password
passwordLen-1
passwordLen
passwordLen
1
L'\0'
if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }
LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0
LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser)
LogonUserW
LogonUserW
username
username
domain
domain
password
password
LOGON32_LOGON_NETWORK
LOGON32_LOGON_NETWORK
LOGON32_PROVIDER_DEFAULT
LOGON32_PROVIDER_DEFAULT
&hUser
hUser
hUser
0
{                printLine("User logged in successfully.");                CloseHandle(hUser);            }
printLine("User logged in successfully.");
printLine("User logged in successfully.")
printLine
printLine
"User logged in successfully."
CloseHandle(hUser);
CloseHandle(hUser)
CloseHandle
CloseHandle
hUser
hUser
{                printLine("Unable to login.");            }
printLine("Unable to login.");
printLine("Unable to login.")
printLine
printLine
"Unable to login."
-----joern-----
(40,8,0)
(33,9,0)
(26,63,0)
(38,49,0)
(49,3,0)
(11,0,0)
(43,8,0)
(4,45,0)
(20,29,0)
(62,19,0)
(14,8,0)
(63,40,0)
(48,62,0)
(10,3,0)
(56,57,0)
(40,39,0)
(15,8,0)
(54,2,0)
(3,8,0)
(21,8,0)
(53,8,0)
(22,49,0)
(37,56,0)
(55,49,0)
(35,39,0)
(24,20,0)
(20,3,0)
(39,40,0)
(54,24,0)
(30,32,0)
(47,55,0)
(20,24,0)
(52,1,0)
(60,54,0)
(58,56,0)
(13,25,0)
(2,54,0)
(42,8,0)
(29,20,0)
(56,0,0)
(59,57,0)
(6,8,0)
(3,20,0)
(46,40,0)
(27,2,0)
(36,56,0)
(32,8,0)
(31,49,0)
(50,34,0)
(28,8,0)
(44,63,0)
(39,3,0)
(57,56,0)
(1,19,0)
(61,8,0)
(17,32,0)
(49,55,0)
(0,56,0)
(7,5,0)
(16,56,0)
(24,54,0)
(41,56,0)
(25,51,0)
(8,12,0)
(56,3,0)
(9,34,0)
(48,1,1)
(54,2,1)
(30,3,1)
(58,37,1)
(62,48,1)
(36,16,1)
(10,18,1)
(26,44,1)
(60,10,1)
(59,56,1)
(46,50,1)
(63,26,1)
(20,24,1)
(0,11,1)
(24,54,1)
(20,29,1)
(50,9,1)
(39,35,1)
(9,33,1)
(2,27,1)
(27,60,1)
(57,56,1)
(57,59,1)
(23,25,1)
(16,63,1)
(11,41,1)
(63,40,1)
(40,39,1)
(15,28,1)
(35,46,1)
(46,55,1)
(41,58,1)
(31,22,1)
(32,17,1)
(4,63,1)
(33,55,1)
(23,62,1)
(1,52,1)
(38,61,1)
(47,49,1)
(13,57,1)
(56,3,1)
(49,31,1)
(44,40,1)
(56,0,1)
(37,36,1)
(25,13,1)
(22,38,1)
(49,3,1)
(55,47,1)
(52,57,1)
(17,30,1)
(55,49,1)
(39,3,1)
(23,18,1)
(3,20,1)
(16,4,1)
(61,15,1)
(28,32,1)
(28,18,2)
(17,18,2)
(62,57,2)
(48,57,2)
(39,3,2)
(63,18,2)
(57,18,2)
(30,18,2)
(47,18,2)
(10,18,2)
(2,18,2)
(38,18,2)
(40,39,2)
(3,18,2)
(39,18,2)
(36,18,2)
(4,63,2)
(3,20,2)
(56,3,2)
(54,2,2)
(32,18,2)
(50,55,2)
(24,54,2)
(20,24,2)
(41,18,2)
(16,18,2)
(44,18,2)
(20,29,2)
(25,57,2)
(9,55,2)
(49,18,2)
(24,18,2)
(46,18,2)
(52,57,2)
(11,18,2)
(1,57,2)
(58,18,2)
(55,18,2)
(59,18,2)
(37,18,2)
(0,18,2)
(33,55,2)
(60,18,2)
(61,18,2)
(13,57,2)
(26,18,2)
(22,18,2)
(31,18,2)
(15,18,2)
(40,18,2)
(56,0,2)
(49,3,2)
(56,18,2)
(57,56,2)
(55,49,2)
(35,18,2)
(63,40,2)
(27,18,2)
(20,18,2)
(54,18,2)
-----------------------------------
(0,&hUser)
(1,printLine("User logged in successfully.")
(2,sizeof(wchar_t)
(3,* password = (wchar_t *)
(4,\\\'\\\\0\\\')
(5,)
(6,if (passwordLen > 0)
(7,if(globalReturnsTrue()
(8,)
(9,printLine("fgetws()
(10,password)
(11,hUser)
(12,)
(13,"Unable to login.")
(14,hUser)
(15,"Domain")
(16,username)
(17,0)
(18,globalReturnsTrue()
(19,)
(20,(wchar_t *)
(21,if (fgetws(password, 100, stdin)
(22,100)
(23,RET)
(24,ALLOCA(100*sizeof(wchar_t)
(25,printLine("Unable to login.")
(26,0)
(27,wchar_t)
(28,"User")
(29,wchar_t *)
(30,passwordLen)
(31,stdin)
(32,passwordLen = 0)
(33,"fgetws()
(34,)
(35,password)
(36,domain)
(37,password)
(38,password)
(39,wcslen(password)
(40,passwordLen = wcslen(password)
(41,LOGON32_PROVIDER_DEFAULT)
(42,if (LogonUserW(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(43,passwordLen)
(44,passwordLen)
(45,)
(46,passwordLen)
(47,NULL)
(48,hUser)
(49,fgetws(password, 100, stdin)
(50,\\\'\\\\0\\\')
(51,)
(52,"User logged in successfully.")
(53,password)
(54,100*sizeof(wchar_t)
(55,fgetws(password, 100, stdin)
(56,LogonUserW(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(57,LogonUserW(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(58,LOGON32_LOGON_NETWORK)
(59,0)
(60,100)
(61,\\\'\\\\0\\\')
(62,CloseHandle(hUser)
(63,passwordLen > 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
