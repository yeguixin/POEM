-----label-----
0
-----code-----
static void good2()
{
    if(globalFive==5)
    {
        /* FIX: error message is general */
        printLine("Not in path");
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
7,9
8,9
11,12
12,13
13,14
13,15
14,15
-----nextToken-----
2,4,9,10,15,16
-----computeFrom-----
7,8
7,9
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void good2(){    if(globalFive==5)    {        /* FIX: error message is general */        printLine("Not in path");    }}
static void
good2()
good2
{    if(globalFive==5)    {        /* FIX: error message is general */        printLine("Not in path");    }}
if(globalFive==5)    {        /* FIX: error message is general */        printLine("Not in path");    }
globalFive==5
globalFive
globalFive
5
{        /* FIX: error message is general */        printLine("Not in path");    }
printLine("Not in path");
printLine("Not in path")
printLine
printLine
"Not in path"
-----joern-----
(6,4,0)
(4,7,0)
(8,1,0)
(5,2,0)
(0,2,0)
(6,2,1)
(4,6,1)
(3,2,1)
(5,0,1)
(2,5,1)
(3,4,1)
(6,2,2)
(4,2,2)
-----------------------------------
(0,globalFive)
(1,)
(2,globalFive==5)
(3,RET)
(4,printLine("Not in path")
(5,5)
(6,"Not in path")
(7,)
(8,if(globalFive==5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
