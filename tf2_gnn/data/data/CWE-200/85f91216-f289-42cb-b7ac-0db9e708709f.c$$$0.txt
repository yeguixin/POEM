-----label-----
0
-----code-----
static void good2()
{
    if(1)
    {
        {
            wchar_t * password = (wchar_t *)malloc(100*sizeof(wchar_t));
            if (password == NULL) {exit(-1);}
            size_t passwordLen = 0;
            HANDLE hUser;
            wchar_t * username = L"User";
            wchar_t * domain = L"Domain";
            /* Initialize password */
            password[0] = L'\0';
            if (fgetws(password, 100, stdin) == NULL)
            {
                printLine("fgetws() failed");
                /* Restore NUL terminator if fgetws fails */
                password[0] = L'\0';
            }
            /* Remove the carriage return from the string that is inserted by fgetws() */
            passwordLen = wcslen(password);
            if (passwordLen > 0)
            {
                password[passwordLen-1] = L'\0';
            }
            /* Use the password in LogonUser() to establish that it is "sensitive" */
            if (LogonUserW(
                        username,
                        domain,
                        password,
                        LOGON32_LOGON_NETWORK,
                        LOGON32_PROVIDER_DEFAULT,
                        &hUser) != 0)
            {
                printLine("User logged in successfully.");
                CloseHandle(hUser);
            }
            else
            {
                printLine("Unable to login.");
            }
            /* FIX: Zeroize the password buffer before reallocating it */
            SecureZeroMemory(password, 100 * sizeof(wchar_t));
            password = realloc(password, 200 * sizeof(wchar_t));
            if (password == NULL) {exit(-1);}
            /* Use the password buffer again */
            wcscpy(password, L"Nothing to see here");
            printWLine(password);
            free(password);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
8,9
9,10
9,11
9,12
9,13
9,14
9,15
9,16
9,17
9,18
9,19
9,20
9,21
9,22
9,23
9,24
9,25
9,26
10,11
11,12
11,13
13,14
13,15
13,16
16,17
17,18
17,19
18,19
18,20
20,21
22,23
22,24
23,24
25,26
25,27
27,28
28,29
28,30
31,32
31,33
32,33
32,34
33,34
35,36
37,38
38,39
39,40
39,41
40,41
42,43
44,45
45,46
45,47
46,47
48,49
48,50
50,51
52,53
53,54
53,55
54,55
56,57
58,59
59,60
59,61
61,62
61,63
61,64
64,65
66,67
67,68
67,69
69,70
69,71
69,72
72,73
74,75
75,76
75,77
76,77
76,78
77,78
81,82
81,83
82,83
82,84
83,84
83,85
83,86
83,87
84,85
86,87
89,90
91,92
93,94
93,95
94,95
95,96
95,97
96,97
99,100
100,101
100,102
101,102
101,103
102,103
106,107
107,108
107,109
108,109
110,111
110,112
111,112
113,114
115,116
115,117
116,117
116,118
117,118
120,121
121,122
122,123
122,124
123,124
123,125
124,125
126,127
126,128
127,128
131,132
131,133
131,134
132,133
132,134
133,134
133,135
133,136
133,137
133,138
133,139
133,140
134,135
136,137
138,139
140,141
142,143
144,145
146,147
147,148
150,151
150,152
151,152
152,153
152,154
153,154
156,157
157,158
157,159
158,159
160,161
162,163
163,164
164,165
164,166
165,166
168,169
169,170
169,171
169,172
170,171
172,173
174,175
174,176
176,177
177,178
177,179
180,181
181,182
181,183
182,183
184,185
184,186
184,187
185,186
187,188
189,190
189,191
191,192
192,193
192,194
195,196
195,197
196,197
196,198
197,198
199,200
201,202
202,203
203,204
203,205
204,205
206,207
208,209
209,210
209,211
209,212
210,211
212,213
215,216
216,217
216,218
217,218
219,220
221,222
222,223
222,224
223,224
225,226
-----nextToken-----
2,4,7,12,14,15,19,21,24,26,29,30,34,36,41,43,47,49,51,55,57,60,62,63,65,68,70,71,73,78,79,80,85,87,88,90,92,97,98,103,104,105,109,112,114,118,119,125,128,129,130,135,137,139,141,143,145,148,149,154,155,159,161,166,167,171,173,175,178,179,183,186,188,190,193,194,198,200,205,207,211,213,214,218,220,224,226
-----computeFrom-----
25,26
25,27
32,33
32,34
75,76
75,77
82,83
82,84
100,101
100,102
107,108
107,109
116,117
116,118
122,123
122,124
126,127
126,128
132,133
132,134
174,175
174,176
181,182
181,183
189,190
189,191
196,197
196,198
-----guardedBy-----
87,103
118,128
148,161
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void good2(){    if(1)    {        {            wchar_t * password = (wchar_t *)malloc(100*sizeof(wchar_t));            if (password == NULL) {exit(-1);}            size_t passwordLen = 0;            HANDLE hUser;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            /* Initialize password */            password[0] = L'\0';            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FIX: Zeroize the password buffer before reallocating it */            SecureZeroMemory(password, 100 * sizeof(wchar_t));            password = realloc(password, 200 * sizeof(wchar_t));            if (password == NULL) {exit(-1);}            /* Use the password buffer again */            wcscpy(password, L"Nothing to see here");            printWLine(password);            free(password);        }    }}
static void
good2()
good2
{    if(1)    {        {            wchar_t * password = (wchar_t *)malloc(100*sizeof(wchar_t));            if (password == NULL) {exit(-1);}            size_t passwordLen = 0;            HANDLE hUser;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            /* Initialize password */            password[0] = L'\0';            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FIX: Zeroize the password buffer before reallocating it */            SecureZeroMemory(password, 100 * sizeof(wchar_t));            password = realloc(password, 200 * sizeof(wchar_t));            if (password == NULL) {exit(-1);}            /* Use the password buffer again */            wcscpy(password, L"Nothing to see here");            printWLine(password);            free(password);        }    }}
if(1)    {        {            wchar_t * password = (wchar_t *)malloc(100*sizeof(wchar_t));            if (password == NULL) {exit(-1);}            size_t passwordLen = 0;            HANDLE hUser;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            /* Initialize password */            password[0] = L'\0';            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FIX: Zeroize the password buffer before reallocating it */            SecureZeroMemory(password, 100 * sizeof(wchar_t));            password = realloc(password, 200 * sizeof(wchar_t));            if (password == NULL) {exit(-1);}            /* Use the password buffer again */            wcscpy(password, L"Nothing to see here");            printWLine(password);            free(password);        }    }
1
{        {            wchar_t * password = (wchar_t *)malloc(100*sizeof(wchar_t));            if (password == NULL) {exit(-1);}            size_t passwordLen = 0;            HANDLE hUser;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            /* Initialize password */            password[0] = L'\0';            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FIX: Zeroize the password buffer before reallocating it */            SecureZeroMemory(password, 100 * sizeof(wchar_t));            password = realloc(password, 200 * sizeof(wchar_t));            if (password == NULL) {exit(-1);}            /* Use the password buffer again */            wcscpy(password, L"Nothing to see here");            printWLine(password);            free(password);        }    }
{            wchar_t * password = (wchar_t *)malloc(100*sizeof(wchar_t));            if (password == NULL) {exit(-1);}            size_t passwordLen = 0;            HANDLE hUser;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            /* Initialize password */            password[0] = L'\0';            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FIX: Zeroize the password buffer before reallocating it */            SecureZeroMemory(password, 100 * sizeof(wchar_t));            password = realloc(password, 200 * sizeof(wchar_t));            if (password == NULL) {exit(-1);}            /* Use the password buffer again */            wcscpy(password, L"Nothing to see here");            printWLine(password);            free(password);        }
wchar_t * password = (wchar_t *)malloc(100*sizeof(wchar_t));
wchar_t * password = (wchar_t *)malloc(100*sizeof(wchar_t));
wchar_t
* password = (wchar_t *)malloc(100*sizeof(wchar_t))
*
password
= (wchar_t *)malloc(100*sizeof(wchar_t))
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (password == NULL) {exit(-1);}
password == NULL
password
password
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
size_t passwordLen = 0;
size_t passwordLen = 0;
size_t
size_t
passwordLen = 0
passwordLen
= 0
0
HANDLE hUser;
HANDLE hUser;
HANDLE
HANDLE
hUser
hUser
wchar_t * username = L"User";
wchar_t * username = L"User";
wchar_t
* username = L"User"
*
username
= L"User"
L"User"
wchar_t * domain = L"Domain";
wchar_t * domain = L"Domain";
wchar_t
* domain = L"Domain"
*
domain
= L"Domain"
L"Domain"
password[0] = L'\0';
password[0] = L'\0'
password[0]
password
password
0
L'\0'
if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }
fgetws(password, 100, stdin) == NULL
fgetws(password, 100, stdin)
fgetws
fgetws
password
password
100
stdin
stdin
NULL
NULL
{                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }
printLine("fgetws() failed");
printLine("fgetws() failed")
printLine
printLine
"fgetws() failed"
password[0] = L'\0';
password[0] = L'\0'
password[0]
password
password
0
L'\0'
passwordLen = wcslen(password);
passwordLen = wcslen(password)
passwordLen
passwordLen
wcslen(password)
wcslen
wcslen
password
password
if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }
passwordLen > 0
passwordLen
passwordLen
0
{                password[passwordLen-1] = L'\0';            }
password[passwordLen-1] = L'\0';
password[passwordLen-1] = L'\0'
password[passwordLen-1]
password
password
passwordLen-1
passwordLen
passwordLen
1
L'\0'
if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }
LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0
LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser)
LogonUserW
LogonUserW
username
username
domain
domain
password
password
LOGON32_LOGON_NETWORK
LOGON32_LOGON_NETWORK
LOGON32_PROVIDER_DEFAULT
LOGON32_PROVIDER_DEFAULT
&hUser
hUser
hUser
0
{                printLine("User logged in successfully.");                CloseHandle(hUser);            }
printLine("User logged in successfully.");
printLine("User logged in successfully.")
printLine
printLine
"User logged in successfully."
CloseHandle(hUser);
CloseHandle(hUser)
CloseHandle
CloseHandle
hUser
hUser
{                printLine("Unable to login.");            }
printLine("Unable to login.");
printLine("Unable to login.")
printLine
printLine
"Unable to login."
SecureZeroMemory(password, 100 * sizeof(wchar_t));
SecureZeroMemory(password, 100 * sizeof(wchar_t))
SecureZeroMemory
SecureZeroMemory
password
password
100 * sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

password = realloc(password, 200 * sizeof(wchar_t));
password = realloc(password, 200 * sizeof(wchar_t))
password
password
realloc(password, 200 * sizeof(wchar_t))
realloc
realloc
password
password
200 * sizeof(wchar_t)
200
sizeof(wchar_t)
wchar_t
wchar_t

if (password == NULL) {exit(-1);}
password == NULL
password
password
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(password, L"Nothing to see here");
wcscpy(password, L"Nothing to see here")
wcscpy
wcscpy
password
password
L"Nothing to see here"
printWLine(password);
printWLine(password)
printWLine
printWLine
password
password
free(password);
free(password)
free
free
password
password
-----joern-----
(29,60,0)
(70,66,0)
(34,18,0)
(79,22,0)
(77,87,0)
(90,64,0)
(6,35,0)
(82,51,0)
(72,51,0)
(40,4,0)
(71,97,0)
(22,27,0)
(50,22,0)
(4,80,0)
(96,18,0)
(8,32,0)
(55,51,0)
(47,83,0)
(64,21,0)
(78,97,0)
(45,51,0)
(66,51,0)
(14,66,0)
(15,10,0)
(97,27,0)
(88,83,0)
(84,73,0)
(28,64,0)
(20,58,0)
(64,60,0)
(83,0,0)
(25,21,0)
(23,51,0)
(24,14,0)
(16,65,0)
(44,91,0)
(33,75,0)
(81,51,0)
(89,51,0)
(61,35,0)
(14,27,0)
(35,66,0)
(79,32,0)
(37,30,0)
(14,18,0)
(1,33,0)
(91,27,0)
(59,0,0)
(22,79,0)
(32,8,0)
(56,59,0)
(52,81,0)
(9,8,0)
(86,95,0)
(18,96,0)
(73,27,0)
(58,20,0)
(11,86,0)
(21,64,0)
(92,85,0)
(31,96,0)
(5,26,0)
(30,66,0)
(41,70,0)
(0,59,0)
(60,64,0)
(4,40,0)
(91,12,0)
(27,51,0)
(53,51,0)
(3,68,0)
(59,27,0)
(64,27,0)
(10,12,0)
(38,51,0)
(49,0,0)
(65,75,0)
(91,51,0)
(12,10,0)
(19,27,0)
(48,81,0)
(20,67,0)
(54,32,0)
(7,64,0)
(26,73,0)
(51,43,0)
(18,14,0)
(0,51,0)
(36,64,0)
(42,92,0)
(57,12,0)
(22,50,0)
(93,66,0)
(27,22,0)
(62,51,0)
(2,95,0)
(69,73,0)
(63,58,0)
(76,73,0)
(70,51,0)
(73,26,0)
(30,51,0)
(12,91,0)
(13,51,0)
(74,40,0)
(66,14,0)
(32,79,0)
(17,51,0)
(46,64,0)
(83,88,1)
(97,27,1)
(25,64,1)
(70,41,1)
(63,97,1)
(35,66,1)
(40,74,1)
(33,1,1)
(81,52,1)
(31,34,1)
(89,81,1)
(93,91,1)
(41,35,1)
(22,79,1)
(15,57,1)
(94,39,1)
(79,32,1)
(27,22,1)
(61,66,1)
(59,27,1)
(48,97,1)
(91,12,1)
(88,47,1)
(14,18,1)
(52,48,1)
(64,60,1)
(28,7,1)
(48,20,1)
(16,33,1)
(7,83,1)
(11,26,1)
(58,63,1)
(44,65,1)
(9,54,1)
(37,70,1)
(26,5,1)
(35,6,1)
(60,29,1)
(32,8,1)
(49,2,1)
(76,38,1)
(66,14,1)
(83,0,1)
(84,76,1)
(47,0,1)
(41,4,1)
(46,28,1)
(2,86,1)
(21,64,1)
(0,59,1)
(86,11,1)
(38,55,1)
(1,21,1)
(30,37,1)
(44,92,1)
(73,69,1)
(12,10,1)
(10,15,1)
(97,71,1)
(19,39,1)
(6,61,1)
(56,49,1)
(71,78,1)
(42,21,1)
(36,90,1)
(34,24,1)
(91,27,1)
(24,93,1)
(7,77,1)
(30,66,1)
(64,27,1)
(8,9,1)
(4,40,1)
(55,89,1)
(26,73,1)
(90,46,1)
(54,19,1)
(57,44,1)
(59,56,1)
(18,96,1)
(20,58,1)
(21,25,1)
(22,50,1)
(92,42,1)
(94,30,1)
(29,36,1)
(77,83,1)
(49,26,1)
(14,27,1)
(5,73,1)
(74,35,1)
(78,27,1)
(73,27,1)
(70,66,1)
(96,31,1)
(65,16,1)
(69,84,1)
(2,26,2)
(61,39,2)
(20,58,2)
(69,39,2)
(58,97,2)
(55,39,2)
(64,27,2)
(11,26,2)
(14,27,2)
(26,73,2)
(83,39,2)
(36,39,2)
(6,39,2)
(32,39,2)
(49,39,2)
(65,21,2)
(47,39,2)
(42,21,2)
(54,39,2)
(20,97,2)
(70,66,2)
(14,39,2)
(71,39,2)
(21,64,2)
(22,79,2)
(86,26,2)
(29,39,2)
(59,27,2)
(12,10,2)
(92,21,2)
(64,60,2)
(96,39,2)
(64,39,2)
(76,39,2)
(59,39,2)
(44,39,2)
(79,39,2)
(40,35,2)
(1,21,2)
(70,39,2)
(27,22,2)
(66,14,2)
(8,39,2)
(89,39,2)
(56,39,2)
(10,39,2)
(33,21,2)
(38,39,2)
(15,39,2)
(21,39,2)
(79,32,2)
(12,39,2)
(88,39,2)
(77,83,2)
(18,39,2)
(5,39,2)
(25,39,2)
(30,66,2)
(84,39,2)
(7,39,2)
(27,39,2)
(91,27,2)
(24,39,2)
(93,39,2)
(32,8,2)
(90,39,2)
(73,27,2)
(41,39,2)
(66,39,2)
(4,35,2)
(48,39,2)
(97,39,2)
(97,27,2)
(35,66,2)
(22,39,2)
(34,39,2)
(19,39,2)
(52,39,2)
(0,39,2)
(16,21,2)
(35,39,2)
(37,39,2)
(14,18,2)
(28,39,2)
(18,96,2)
(22,50,2)
(81,39,2)
(0,59,2)
(91,12,2)
(78,39,2)
(63,97,2)
(31,39,2)
(60,39,2)
(4,40,2)
(57,39,2)
(9,39,2)
(74,35,2)
(83,0,2)
(91,39,2)
(30,39,2)
(26,39,2)
(73,39,2)
(46,39,2)
-----------------------------------
(0,passwordLen = wcslen(password)
(1,"User logged in successfully.")
(2,\\\'\\\\0\\\')
(3,if(1)
(4,exit(-1)
(5,NULL)
(6,NULL)
(7,username)
(8,sizeof(wchar_t)
(9,wchar_t)
(10,sizeof(wchar_t)
(11,"fgetws()
(12,100 * sizeof(wchar_t)
(13,if (password == NULL)
(14,realloc(password, 200 * sizeof(wchar_t)
(15,wchar_t)
(16,hUser)
(17,if (password == NULL)
(18,200 * sizeof(wchar_t)
(19,password)
(20,exit(-1)
(21,LogonUserW(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(22,(wchar_t *)
(23,passwordLen)
(24,password)
(25,0)
(26,fgetws(password, 100, stdin)
(27,* password = (wchar_t *)
(28,domain)
(29,hUser)
(30,free(password)
(31,wchar_t)
(32,100*sizeof(wchar_t)
(33,printLine("User logged in successfully.")
(34,200)
(35,password == NULL)
(36,LOGON32_PROVIDER_DEFAULT)
(37,password)
(38,\\\'\\\\0\\\')
(39,1)
(40,-1)
(41,password)
(42,"Unable to login.")
(43,)
(44,password)
(45,password)
(46,password)
(47,passwordLen)
(48,passwordLen)
(49,passwordLen)
(50,wchar_t *)
(51,)
(52,0)
(53,hUser)
(54,100)
(55,"Domain")
(56,password)
(57,100)
(58,-1)
(59,wcslen(password)
(60,&hUser)
(61,password)
(62,if (passwordLen > 0)
(63,1)
(64,LogonUserW(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(65,CloseHandle(hUser)
(66,password = realloc(password, 200 * sizeof(wchar_t)
(67,)
(68,)
(69,stdin)
(70,printWLine(password)
(71,NULL)
(72,if (fgetws(password, 100, stdin)
(73,fgetws(password, 100, stdin)
(74,1)
(75,)
(76,password)
(77,\\\'\\\\0\\\')
(78,password)
(79,malloc(100*sizeof(wchar_t)
(80,)
(81,passwordLen = 0)
(82,if (LogonUserW(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(83,passwordLen > 0)
(84,100)
(85,)
(86,printLine("fgetws()
(87,)
(88,0)
(89,"User")
(90,LOGON32_LOGON_NETWORK)
(91,SecureZeroMemory(password, 100 * sizeof(wchar_t)
(92,printLine("Unable to login.")
(93,password)
(94,RET)
(95,)
(96,sizeof(wchar_t)
(97,password == NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
