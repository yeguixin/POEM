-----label-----
1
-----code-----
void CWE534_Info_Exposure_Debug_Log__w32_char_01_bad()
{
    {
        char password[100] = "";
        size_t passwordLen = 0;
        HANDLE pHandle;
        char * username = "User";
        char * domain = "Domain";
        FILE * pFile = fopen("debug.txt", "a+");
        if (fgets(password, 100, stdin) == NULL)
        {
            printLine("fgets() failed");
            /* Restore NUL terminator if fgets fails */
            password[0] = '\0';
        }
        /* Remove the carriage return from the string that is inserted by fgets() */
        passwordLen = strlen(password);
        if (passwordLen > 0)
        {
            password[passwordLen-1] = '\0';
        }
        /* Use the password in LogonUser() to establish that it is "sensitive" */
        if (LogonUserA(
                    username,
                    domain,
                    password,
                    LOGON32_LOGON_NETWORK,
                    LOGON32_PROVIDER_DEFAULT,
                    &pHandle) != 0)
        {
            printLine("User logged in successfully.");
            CloseHandle(pHandle);
        }
        else
        {
            printLine("Unable to login.");
        }
        /* FLAW: Write sensitive data to the log */
        fprintf(pFile, "User attempted access with password: %s\n", password);
        if (pFile)
        {
            fclose(pFile);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
6,9
6,10
6,11
6,12
6,13
6,14
6,15
6,16
6,17
6,18
7,8
8,9
8,10
10,11
10,12
10,13
12,13
14,15
16,17
17,18
17,19
18,19
20,21
20,22
22,23
24,25
25,26
25,27
26,27
28,29
30,31
31,32
31,33
33,34
33,35
33,36
36,37
38,39
39,40
39,41
41,42
41,43
41,44
44,45
46,47
47,48
47,49
48,49
50,51
50,52
50,53
53,54
54,55
54,56
54,57
55,56
59,60
59,61
60,61
60,62
61,62
61,63
61,64
61,65
62,63
64,65
67,68
69,70
71,72
71,73
72,73
73,74
73,75
74,75
77,78
78,79
78,80
79,80
79,81
80,81
84,85
85,86
85,87
86,87
88,89
88,90
89,90
91,92
93,94
93,95
94,95
94,96
95,96
98,99
99,100
100,101
100,102
101,102
101,103
102,103
104,105
104,106
105,106
109,110
109,111
109,112
110,111
110,112
111,112
111,113
111,114
111,115
111,116
111,117
111,118
112,113
114,115
116,117
118,119
120,121
122,123
124,125
125,126
128,129
128,130
129,130
130,131
130,132
131,132
134,135
135,136
135,137
136,137
138,139
140,141
141,142
142,143
142,144
143,144
146,147
147,148
147,149
147,150
147,151
148,149
150,151
153,154
155,156
155,157
156,157
158,159
159,160
160,161
160,162
161,162
163,164
-----nextToken-----
2,4,9,11,13,15,19,21,23,27,29,32,34,35,37,40,42,43,45,49,51,52,56,57,58,63,65,66,68,70,75,76,81,82,83,87,90,92,96,97,103,106,107,108,113,115,117,119,121,123,126,127,132,133,137,139,144,145,149,151,152,154,157,162,164
-----computeFrom-----
60,61
60,62
78,79
78,80
85,86
85,87
94,95
94,96
100,101
100,102
104,105
104,106
110,111
110,112
-----guardedBy-----
65,81
96,106
126,139
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE534_Info_Exposure_Debug_Log__w32_char_01_bad(){    {        char password[100] = "";        size_t passwordLen = 0;        HANDLE pHandle;        char * username = "User";        char * domain = "Domain";        FILE * pFile = fopen("debug.txt", "a+");        if (fgets(password, 100, stdin) == NULL)        {            printLine("fgets() failed");            /* Restore NUL terminator if fgets fails */            password[0] = '\0';        }        /* Remove the carriage return from the string that is inserted by fgets() */        passwordLen = strlen(password);        if (passwordLen > 0)        {            password[passwordLen-1] = '\0';        }        /* Use the password in LogonUser() to establish that it is "sensitive" */        if (LogonUserA(                    username,                    domain,                    password,                    LOGON32_LOGON_NETWORK,                    LOGON32_PROVIDER_DEFAULT,                    &pHandle) != 0)        {            printLine("User logged in successfully.");            CloseHandle(pHandle);        }        else        {            printLine("Unable to login.");        }        /* FLAW: Write sensitive data to the log */        fprintf(pFile, "User attempted access with password: %s\n", password);        if (pFile)        {            fclose(pFile);        }    }}
void
CWE534_Info_Exposure_Debug_Log__w32_char_01_bad()
CWE534_Info_Exposure_Debug_Log__w32_char_01_bad
{    {        char password[100] = "";        size_t passwordLen = 0;        HANDLE pHandle;        char * username = "User";        char * domain = "Domain";        FILE * pFile = fopen("debug.txt", "a+");        if (fgets(password, 100, stdin) == NULL)        {            printLine("fgets() failed");            /* Restore NUL terminator if fgets fails */            password[0] = '\0';        }        /* Remove the carriage return from the string that is inserted by fgets() */        passwordLen = strlen(password);        if (passwordLen > 0)        {            password[passwordLen-1] = '\0';        }        /* Use the password in LogonUser() to establish that it is "sensitive" */        if (LogonUserA(                    username,                    domain,                    password,                    LOGON32_LOGON_NETWORK,                    LOGON32_PROVIDER_DEFAULT,                    &pHandle) != 0)        {            printLine("User logged in successfully.");            CloseHandle(pHandle);        }        else        {            printLine("Unable to login.");        }        /* FLAW: Write sensitive data to the log */        fprintf(pFile, "User attempted access with password: %s\n", password);        if (pFile)        {            fclose(pFile);        }    }}
{        char password[100] = "";        size_t passwordLen = 0;        HANDLE pHandle;        char * username = "User";        char * domain = "Domain";        FILE * pFile = fopen("debug.txt", "a+");        if (fgets(password, 100, stdin) == NULL)        {            printLine("fgets() failed");            /* Restore NUL terminator if fgets fails */            password[0] = '\0';        }        /* Remove the carriage return from the string that is inserted by fgets() */        passwordLen = strlen(password);        if (passwordLen > 0)        {            password[passwordLen-1] = '\0';        }        /* Use the password in LogonUser() to establish that it is "sensitive" */        if (LogonUserA(                    username,                    domain,                    password,                    LOGON32_LOGON_NETWORK,                    LOGON32_PROVIDER_DEFAULT,                    &pHandle) != 0)        {            printLine("User logged in successfully.");            CloseHandle(pHandle);        }        else        {            printLine("Unable to login.");        }        /* FLAW: Write sensitive data to the log */        fprintf(pFile, "User attempted access with password: %s\n", password);        if (pFile)        {            fclose(pFile);        }    }
char password[100] = "";
char password[100] = "";
char
password[100] = ""
password
[100]
100
= ""
""
size_t passwordLen = 0;
size_t passwordLen = 0;
size_t
size_t
passwordLen = 0
passwordLen
= 0
0
HANDLE pHandle;
HANDLE pHandle;
HANDLE
HANDLE
pHandle
pHandle
char * username = "User";
char * username = "User";
char
* username = "User"
*
username
= "User"
"User"
char * domain = "Domain";
char * domain = "Domain";
char
* domain = "Domain"
*
domain
= "Domain"
"Domain"
FILE * pFile = fopen("debug.txt", "a+");
FILE * pFile = fopen("debug.txt", "a+");
FILE
FILE
* pFile = fopen("debug.txt", "a+")
*
pFile
= fopen("debug.txt", "a+")
fopen("debug.txt", "a+")
fopen
fopen
"debug.txt"
"a+"
if (fgets(password, 100, stdin) == NULL)        {            printLine("fgets() failed");            /* Restore NUL terminator if fgets fails */            password[0] = '\0';        }
fgets(password, 100, stdin) == NULL
fgets(password, 100, stdin)
fgets
fgets
password
password
100
stdin
stdin
NULL
NULL
{            printLine("fgets() failed");            /* Restore NUL terminator if fgets fails */            password[0] = '\0';        }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
password[0] = '\0';
password[0] = '\0'
password[0]
password
password
0
'\0'
passwordLen = strlen(password);
passwordLen = strlen(password)
passwordLen
passwordLen
strlen(password)
strlen
strlen
password
password
if (passwordLen > 0)        {            password[passwordLen-1] = '\0';        }
passwordLen > 0
passwordLen
passwordLen
0
{            password[passwordLen-1] = '\0';        }
password[passwordLen-1] = '\0';
password[passwordLen-1] = '\0'
password[passwordLen-1]
password
password
passwordLen-1
passwordLen
passwordLen
1
'\0'
if (LogonUserA(                    username,                    domain,                    password,                    LOGON32_LOGON_NETWORK,                    LOGON32_PROVIDER_DEFAULT,                    &pHandle) != 0)        {            printLine("User logged in successfully.");            CloseHandle(pHandle);        }        else        {            printLine("Unable to login.");        }
LogonUserA(                    username,                    domain,                    password,                    LOGON32_LOGON_NETWORK,                    LOGON32_PROVIDER_DEFAULT,                    &pHandle) != 0
LogonUserA(                    username,                    domain,                    password,                    LOGON32_LOGON_NETWORK,                    LOGON32_PROVIDER_DEFAULT,                    &pHandle)
LogonUserA
LogonUserA
username
username
domain
domain
password
password
LOGON32_LOGON_NETWORK
LOGON32_LOGON_NETWORK
LOGON32_PROVIDER_DEFAULT
LOGON32_PROVIDER_DEFAULT
&pHandle
pHandle
pHandle
0
{            printLine("User logged in successfully.");            CloseHandle(pHandle);        }
printLine("User logged in successfully.");
printLine("User logged in successfully.")
printLine
printLine
"User logged in successfully."
CloseHandle(pHandle);
CloseHandle(pHandle)
CloseHandle
CloseHandle
pHandle
pHandle
{            printLine("Unable to login.");        }
printLine("Unable to login.");
printLine("Unable to login.")
printLine
printLine
"Unable to login."
fprintf(pFile, "User attempted access with password: %s\n", password);
fprintf(pFile, "User attempted access with password: %s\n", password)
fprintf
fprintf
pFile
pFile
"User attempted access with password: %s\n"
password
password
if (pFile)        {            fclose(pFile);        }
pFile
pFile
{            fclose(pFile);        }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
-----joern-----
(32,42,0)
(10,18,0)
(55,36,0)
(59,36,0)
(15,36,0)
(31,16,0)
(13,68,0)
(38,69,0)
(17,31,0)
(61,23,0)
(35,50,0)
(3,36,0)
(40,68,0)
(8,3,0)
(29,26,0)
(46,79,0)
(4,14,0)
(36,22,0)
(50,66,0)
(77,55,0)
(16,7,0)
(7,36,0)
(53,16,0)
(14,69,0)
(16,53,0)
(74,42,0)
(45,67,0)
(76,36,0)
(37,3,0)
(62,32,0)
(26,56,0)
(23,51,0)
(47,0,0)
(82,36,0)
(65,16,0)
(60,68,0)
(1,79,0)
(1,42,0)
(55,51,0)
(58,84,0)
(57,36,0)
(79,56,0)
(79,1,0)
(5,36,0)
(84,66,0)
(11,32,0)
(48,13,0)
(80,18,0)
(6,26,0)
(56,67,0)
(33,49,0)
(75,1,0)
(70,56,0)
(51,36,0)
(63,7,0)
(34,38,0)
(68,42,0)
(32,14,0)
(43,51,0)
(19,55,0)
(41,7,0)
(78,36,0)
(2,42,0)
(68,13,0)
(55,42,0)
(39,83,0)
(81,36,0)
(18,36,0)
(54,79,0)
(51,23,0)
(16,3,0)
(64,39,0)
(39,51,0)
(67,56,0)
(27,23,0)
(67,42,0)
(1,0,0)
(16,31,0)
(56,36,0)
(12,53,0)
(30,36,0)
(9,16,0)
(0,24,0)
(28,16,0)
(21,55,0)
(25,68,0)
(49,72,0)
(20,36,0)
(16,42,0)
(52,16,0)
(42,36,0)
(44,16,0)
(40,60,1)
(39,64,1)
(16,7,1)
(32,42,1)
(16,3,1)
(70,14,1)
(35,84,1)
(28,65,1)
(11,38,1)
(64,73,1)
(68,40,1)
(26,29,1)
(84,58,1)
(16,42,1)
(18,80,1)
(53,16,1)
(63,41,1)
(52,9,1)
(73,55,1)
(54,75,1)
(43,7,1)
(29,6,1)
(0,47,1)
(33,53,1)
(1,42,1)
(62,11,1)
(46,54,1)
(55,51,1)
(19,21,1)
(44,52,1)
(51,23,1)
(53,12,1)
(6,56,1)
(25,51,1)
(80,10,1)
(45,70,1)
(71,73,1)
(12,16,1)
(34,13,1)
(65,26,1)
(13,68,1)
(55,42,1)
(2,74,1)
(61,43,1)
(8,37,1)
(26,56,1)
(13,48,1)
(23,27,1)
(10,42,1)
(14,4,1)
(21,77,1)
(16,31,1)
(47,1,1)
(27,61,1)
(9,28,1)
(65,0,1)
(4,32,1)
(50,35,1)
(75,26,1)
(68,42,1)
(77,50,1)
(58,53,1)
(3,8,1)
(7,63,1)
(39,51,1)
(77,49,1)
(42,2,1)
(37,18,1)
(41,3,1)
(56,67,1)
(79,56,1)
(60,25,1)
(48,68,1)
(55,19,1)
(71,39,1)
(1,79,1)
(49,33,1)
(70,13,1)
(67,42,1)
(32,62,1)
(38,34,1)
(17,44,1)
(67,45,1)
(79,46,1)
(31,17,1)
(1,42,2)
(79,26,2)
(51,23,2)
(62,13,2)
(58,53,2)
(35,53,2)
(54,26,2)
(11,13,2)
(53,16,2)
(16,42,2)
(34,13,2)
(84,53,2)
(16,7,2)
(55,51,2)
(32,13,2)
(64,73,2)
(1,26,2)
(49,53,2)
(33,53,2)
(50,53,2)
(39,73,2)
(47,26,2)
(0,26,2)
(75,26,2)
(56,67,2)
(14,13,2)
(32,42,2)
(39,51,2)
(55,42,2)
(16,3,2)
(38,13,2)
(46,26,2)
(4,13,2)
(1,79,2)
(68,42,2)
(16,31,2)
(26,56,2)
(13,68,2)
(79,56,2)
(67,42,2)
-----------------------------------
(0,password[passwordLen-1] = \\\'\\\\0\\\')
(1,password[passwordLen-1])
(2,"")
(3,* username = "User")
(4,\\\'\\\\0\\\')
(5,domain)
(6,passwordLen)
(7,* domain = "Domain")
(8,"User")
(9,password)
(10,passwordLen)
(11,password)
(12,0)
(13,fgets(password, 100, stdin)
(14,password[0] = \\\'\\\\0\\\')
(15,if (pFile)
(16,LogonUserA(\\\\n                    username,\\\\n                    domain,\\\\n                    password,\\\\n                    LOGON32_LOGON_NETWORK,\\\\n                    LOGON32_PROVIDER_DEFAULT,\\\\n                    &pHandle)
(17,pHandle)
(18,passwordLen = 0)
(19,password)
(20,if (fgets(password, 100, stdin)
(21,"User attempted access with password: %s\\\\n")
(22,)
(23,fopen("debug.txt", "a+")
(24,)
(25,password)
(26,passwordLen > 0)
(27,"a+")
(28,domain)
(29,0)
(30,username)
(31,&pHandle)
(32,password[0])
(33,"Unable to login.")
(34,"fgets()
(35,pHandle)
(36,)
(37,username)
(38,printLine("fgets()
(39,fclose(pFile)
(40,stdin)
(41,domain)
(42,password[100] = "")
(43,pFile)
(44,LOGON32_PROVIDER_DEFAULT)
(45,password)
(46,1)
(47,\\\'\\\\0\\\')
(48,NULL)
(49,printLine("Unable to login.")
(50,CloseHandle(pHandle)
(51,* pFile = fopen("debug.txt", "a+")
(52,LOGON32_LOGON_NETWORK)
(53,LogonUserA(\\\\n                    username,\\\\n                    domain,\\\\n                    password,\\\\n                    LOGON32_LOGON_NETWORK,\\\\n                    LOGON32_PROVIDER_DEFAULT,\\\\n                    &pHandle)
(54,passwordLen)
(55,fprintf(pFile, "User attempted access with password: %s\\\\n", password)
(56,passwordLen = strlen(password)
(57,passwordLen)
(58,"User logged in successfully.")
(59,pHandle)
(60,100)
(61,"debug.txt")
(62,0)
(63,"Domain")
(64,pFile)
(65,username)
(66,)
(67,strlen(password)
(68,fgets(password, 100, stdin)
(69,)
(70,passwordLen)
(71,RET)
(72,)
(73,pFile)
(74,password)
(75,password)
(76,password)
(77,pFile)
(78,if (LogonUserA(\\\\n                    username,\\\\n                    domain,\\\\n                    password,\\\\n                    LOGON32_LOGON_NETWORK,\\\\n                    LOGON32_PROVIDER_DEFAULT,\\\\n                    &pHandle)
(79,passwordLen-1)
(80,0)
(81,pFile)
(82,if (passwordLen > 0)
(83,)
(84,printLine("User logged in successfully.")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
