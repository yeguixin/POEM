-----label-----
1
-----code-----
void CWE534_Info_Exposure_Debug_Log__w32_char_04_bad()
{
    if(STATIC_CONST_TRUE)
    {
        {
            char password[100] = "";
            size_t passwordLen = 0;
            HANDLE pHandle;
            char * username = "User";
            char * domain = "Domain";
            FILE * pFile = fopen("debug.txt", "a+");
            if (fgets(password, 100, stdin) == NULL)
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                password[0] = '\0';
            }
            /* Remove the carriage return from the string that is inserted by fgets() */
            passwordLen = strlen(password);
            if (passwordLen > 0)
            {
                password[passwordLen-1] = '\0';
            }
            /* Use the password in LogonUser() to establish that it is "sensitive" */
            if (LogonUserA(
                        username,
                        domain,
                        password,
                        LOGON32_LOGON_NETWORK,
                        LOGON32_PROVIDER_DEFAULT,
                        &pHandle) != 0)
            {
                printLine("User logged in successfully.");
                CloseHandle(pHandle);
            }
            else
            {
                printLine("Unable to login.");
            }
            /* FLAW: Write sensitive data to the log */
            fprintf(pFile, "User attempted access with password: %s\n", password);
            if (pFile)
            {
                fclose(pFile);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
9,10
10,11
10,12
10,13
10,14
10,15
10,16
10,17
10,18
10,19
10,20
10,21
10,22
11,12
12,13
12,14
14,15
14,16
14,17
16,17
18,19
20,21
21,22
21,23
22,23
24,25
24,26
26,27
28,29
29,30
29,31
30,31
32,33
34,35
35,36
35,37
37,38
37,39
37,40
40,41
42,43
43,44
43,45
45,46
45,47
45,48
48,49
50,51
51,52
51,53
52,53
54,55
54,56
54,57
57,58
58,59
58,60
58,61
59,60
63,64
63,65
64,65
64,66
65,66
65,67
65,68
65,69
66,67
68,69
71,72
73,74
75,76
75,77
76,77
77,78
77,79
78,79
81,82
82,83
82,84
83,84
83,85
84,85
88,89
89,90
89,91
90,91
92,93
92,94
93,94
95,96
97,98
97,99
98,99
98,100
99,100
102,103
103,104
104,105
104,106
105,106
105,107
106,107
108,109
108,110
109,110
113,114
113,115
113,116
114,115
114,116
115,116
115,117
115,118
115,119
115,120
115,121
115,122
116,117
118,119
120,121
122,123
124,125
126,127
128,129
129,130
132,133
132,134
133,134
134,135
134,136
135,136
138,139
139,140
139,141
140,141
142,143
144,145
145,146
146,147
146,148
147,148
150,151
151,152
151,153
151,154
151,155
152,153
154,155
157,158
159,160
159,161
160,161
162,163
163,164
164,165
164,166
165,166
167,168
-----nextToken-----
2,4,8,13,15,17,19,23,25,27,31,33,36,38,39,41,44,46,47,49,53,55,56,60,61,62,67,69,70,72,74,79,80,85,86,87,91,94,96,100,101,107,110,111,112,117,119,121,123,125,127,130,131,136,137,141,143,148,149,153,155,156,158,161,166,168
-----computeFrom-----
64,65
64,66
82,83
82,84
89,90
89,91
98,99
98,100
104,105
104,106
108,109
108,110
114,115
114,116
-----guardedBy-----
69,85
100,110
130,143
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE534_Info_Exposure_Debug_Log__w32_char_04_bad(){    if(STATIC_CONST_TRUE)    {        {            char password[100] = "";            size_t passwordLen = 0;            HANDLE pHandle;            char * username = "User";            char * domain = "Domain";            FILE * pFile = fopen("debug.txt", "a+");            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Write sensitive data to the log */            fprintf(pFile, "User attempted access with password: %s\n", password);            if (pFile)            {                fclose(pFile);            }        }    }}
void
CWE534_Info_Exposure_Debug_Log__w32_char_04_bad()
CWE534_Info_Exposure_Debug_Log__w32_char_04_bad
{    if(STATIC_CONST_TRUE)    {        {            char password[100] = "";            size_t passwordLen = 0;            HANDLE pHandle;            char * username = "User";            char * domain = "Domain";            FILE * pFile = fopen("debug.txt", "a+");            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Write sensitive data to the log */            fprintf(pFile, "User attempted access with password: %s\n", password);            if (pFile)            {                fclose(pFile);            }        }    }}
if(STATIC_CONST_TRUE)    {        {            char password[100] = "";            size_t passwordLen = 0;            HANDLE pHandle;            char * username = "User";            char * domain = "Domain";            FILE * pFile = fopen("debug.txt", "a+");            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Write sensitive data to the log */            fprintf(pFile, "User attempted access with password: %s\n", password);            if (pFile)            {                fclose(pFile);            }        }    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        {            char password[100] = "";            size_t passwordLen = 0;            HANDLE pHandle;            char * username = "User";            char * domain = "Domain";            FILE * pFile = fopen("debug.txt", "a+");            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Write sensitive data to the log */            fprintf(pFile, "User attempted access with password: %s\n", password);            if (pFile)            {                fclose(pFile);            }        }    }
{            char password[100] = "";            size_t passwordLen = 0;            HANDLE pHandle;            char * username = "User";            char * domain = "Domain";            FILE * pFile = fopen("debug.txt", "a+");            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }            /* FLAW: Write sensitive data to the log */            fprintf(pFile, "User attempted access with password: %s\n", password);            if (pFile)            {                fclose(pFile);            }        }
char password[100] = "";
char password[100] = "";
char
password[100] = ""
password
[100]
100
= ""
""
size_t passwordLen = 0;
size_t passwordLen = 0;
size_t
size_t
passwordLen = 0
passwordLen
= 0
0
HANDLE pHandle;
HANDLE pHandle;
HANDLE
HANDLE
pHandle
pHandle
char * username = "User";
char * username = "User";
char
* username = "User"
*
username
= "User"
"User"
char * domain = "Domain";
char * domain = "Domain";
char
* domain = "Domain"
*
domain
= "Domain"
"Domain"
FILE * pFile = fopen("debug.txt", "a+");
FILE * pFile = fopen("debug.txt", "a+");
FILE
FILE
* pFile = fopen("debug.txt", "a+")
*
pFile
= fopen("debug.txt", "a+")
fopen("debug.txt", "a+")
fopen
fopen
"debug.txt"
"a+"
if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }
fgets(password, 100, stdin) == NULL
fgets(password, 100, stdin)
fgets
fgets
password
password
100
stdin
stdin
NULL
NULL
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
password[0] = '\0';
password[0] = '\0'
password[0]
password
password
0
'\0'
passwordLen = strlen(password);
passwordLen = strlen(password)
passwordLen
passwordLen
strlen(password)
strlen
strlen
password
password
if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }
passwordLen > 0
passwordLen
passwordLen
0
{                password[passwordLen-1] = '\0';            }
password[passwordLen-1] = '\0';
password[passwordLen-1] = '\0'
password[passwordLen-1]
password
password
passwordLen-1
passwordLen
passwordLen
1
'\0'
if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }
LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0
LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle)
LogonUserA
LogonUserA
username
username
domain
domain
password
password
LOGON32_LOGON_NETWORK
LOGON32_LOGON_NETWORK
LOGON32_PROVIDER_DEFAULT
LOGON32_PROVIDER_DEFAULT
&pHandle
pHandle
pHandle
0
{                printLine("User logged in successfully.");                CloseHandle(pHandle);            }
printLine("User logged in successfully.");
printLine("User logged in successfully.")
printLine
printLine
"User logged in successfully."
CloseHandle(pHandle);
CloseHandle(pHandle)
CloseHandle
CloseHandle
pHandle
pHandle
{                printLine("Unable to login.");            }
printLine("Unable to login.");
printLine("Unable to login.")
printLine
printLine
"Unable to login."
fprintf(pFile, "User attempted access with password: %s\n", password);
fprintf(pFile, "User attempted access with password: %s\n", password)
fprintf
fprintf
pFile
pFile
"User attempted access with password: %s\n"
password
password
if (pFile)            {                fclose(pFile);            }
pFile
pFile
{                fclose(pFile);            }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
-----joern-----
(24,61,0)
(61,59,0)
(82,64,0)
(32,31,0)
(28,44,0)
(44,2,0)
(44,25,0)
(51,86,0)
(4,48,0)
(66,86,0)
(22,51,0)
(5,25,0)
(71,65,0)
(81,59,0)
(24,25,0)
(81,38,0)
(3,44,0)
(51,36,0)
(30,59,0)
(6,59,0)
(65,74,0)
(30,81,0)
(45,8,0)
(78,59,0)
(33,48,0)
(2,44,0)
(30,25,0)
(36,51,0)
(7,24,0)
(73,52,0)
(15,2,0)
(48,61,0)
(37,48,0)
(53,49,0)
(54,59,0)
(70,44,0)
(72,59,0)
(35,51,0)
(26,59,0)
(4,8,0)
(10,85,0)
(48,4,0)
(34,81,0)
(21,59,0)
(49,0,0)
(51,25,0)
(23,51,0)
(11,51,0)
(8,46,0)
(80,36,0)
(40,59,0)
(77,20,0)
(67,30,0)
(29,38,0)
(31,59,0)
(69,51,0)
(43,59,0)
(86,59,0)
(87,56,0)
(61,24,0)
(38,81,0)
(75,85,0)
(60,61,0)
(13,53,0)
(84,4,0)
(27,83,0)
(64,61,0)
(17,86,0)
(85,59,0)
(25,59,0)
(51,52,0)
(12,39,0)
(83,0,0)
(63,19,0)
(65,81,0)
(79,25,0)
(9,59,0)
(59,16,0)
(47,38,0)
(42,53,0)
(1,64,0)
(57,87,0)
(55,59,0)
(50,49,0)
(52,51,0)
(53,25,0)
(41,63,0)
(14,30,0)
(68,31,0)
(4,25,0)
(18,30,0)
(20,56,0)
(51,31,0)
(82,1,1)
(51,31,1)
(2,15,1)
(42,13,1)
(18,63,1)
(52,73,1)
(4,48,1)
(53,25,1)
(45,4,1)
(34,31,1)
(33,37,1)
(15,44,1)
(65,81,1)
(44,70,1)
(67,18,1)
(66,17,1)
(30,14,1)
(60,49,1)
(52,51,1)
(60,2,1)
(44,25,1)
(68,86,1)
(81,38,1)
(2,44,1)
(79,62,1)
(18,20,1)
(38,47,1)
(4,25,1)
(86,66,1)
(58,30,1)
(61,24,1)
(5,79,1)
(75,25,1)
(11,35,1)
(25,5,1)
(10,75,1)
(24,25,1)
(51,36,1)
(31,32,1)
(77,87,1)
(84,64,1)
(7,60,1)
(51,25,1)
(71,58,1)
(63,41,1)
(30,25,1)
(64,82,1)
(20,77,1)
(32,68,1)
(13,83,1)
(35,64,1)
(37,84,1)
(41,52,1)
(57,52,1)
(27,2,1)
(47,29,1)
(23,22,1)
(24,7,1)
(22,69,1)
(50,53,1)
(35,8,1)
(73,51,1)
(1,61,1)
(17,85,1)
(69,11,1)
(85,10,1)
(87,57,1)
(76,58,1)
(8,45,1)
(48,61,1)
(76,62,1)
(83,27,1)
(53,42,1)
(48,33,1)
(36,80,1)
(14,67,1)
(80,23,1)
(29,34,1)
(64,61,1)
(49,50,1)
(30,81,1)
(28,81,1)
(70,3,1)
(3,28,1)
(76,65,1)
(65,71,1)
(51,86,1)
(30,62,2)
(61,24,2)
(53,25,2)
(73,62,2)
(80,62,2)
(61,62,2)
(84,64,2)
(70,62,2)
(48,64,2)
(67,62,2)
(8,64,2)
(34,62,2)
(30,81,2)
(51,31,2)
(29,62,2)
(50,2,2)
(51,25,2)
(18,62,2)
(7,62,2)
(44,62,2)
(37,64,2)
(69,62,2)
(41,52,2)
(82,62,2)
(30,25,2)
(52,62,2)
(42,2,2)
(32,62,2)
(28,62,2)
(52,51,2)
(17,62,2)
(85,62,2)
(79,62,2)
(4,25,2)
(14,62,2)
(57,52,2)
(2,62,2)
(86,62,2)
(45,64,2)
(64,62,2)
(31,62,2)
(65,58,2)
(4,48,2)
(10,62,2)
(36,62,2)
(83,2,2)
(63,52,2)
(65,81,2)
(23,62,2)
(3,62,2)
(81,38,2)
(13,2,2)
(51,62,2)
(20,52,2)
(71,58,2)
(4,64,2)
(49,2,2)
(38,62,2)
(22,62,2)
(68,62,2)
(27,2,2)
(51,86,2)
(75,62,2)
(33,64,2)
(44,25,2)
(1,62,2)
(25,62,2)
(47,62,2)
(51,36,2)
(58,62,2)
(15,62,2)
(66,62,2)
(24,62,2)
(81,62,2)
(5,62,2)
(2,44,2)
(24,25,2)
(35,62,2)
(48,61,2)
(87,52,2)
(64,61,2)
(53,2,2)
(77,52,2)
(11,62,2)
(60,62,2)
-----------------------------------
(0,)
(1,passwordLen)
(2,fgets(password, 100, stdin)
(3,100)
(4,password[passwordLen-1])
(5,"")
(6,if (LogonUserA(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &pHandle)
(7,password)
(8,password[passwordLen-1] = \\\'\\\\0\\\')
(9,pHandle)
(10,0)
(11,domain)
(12,if(STATIC_CONST_TRUE)
(13,password)
(14,password)
(15,NULL)
(16,)
(17,username)
(18,pFile)
(19,)
(20,CloseHandle(pHandle)
(21,passwordLen)
(22,LOGON32_LOGON_NETWORK)
(23,LOGON32_PROVIDER_DEFAULT)
(24,strlen(password)
(25,password[100] = "")
(26,password)
(27,"fgets()
(28,password)
(29,"debug.txt")
(30,fprintf(pFile, "User attempted access with password: %s\\\\n", password)
(31,* domain = "Domain")
(32,"Domain")
(33,1)
(34,pFile)
(35,username)
(36,&pHandle)
(37,passwordLen)
(38,fopen("debug.txt", "a+")
(39,)
(40,username)
(41,"Unable to login.")
(42,0)
(43,domain)
(44,fgets(password, 100, stdin)
(45,\\\'\\\\0\\\')
(46,)
(47,"a+")
(48,passwordLen-1)
(49,password[0] = \\\'\\\\0\\\')
(50,\\\'\\\\0\\\')
(51,LogonUserA(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &pHandle)
(52,LogonUserA(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &pHandle)
(53,password[0])
(54,if (passwordLen > 0)
(55,if (fgets(password, 100, stdin)
(56,)
(57,"User logged in successfully.")
(58,pFile)
(59,)
(60,passwordLen)
(61,passwordLen = strlen(password)
(62,STATIC_CONST_TRUE)
(63,printLine("Unable to login.")
(64,passwordLen > 0)
(65,fclose(pFile)
(66,"User")
(67,"User attempted access with password: %s\\\\n")
(68,domain)
(69,password)
(70,stdin)
(71,pFile)
(72,if (pFile)
(73,0)
(74,)
(75,passwordLen)
(76,RET)
(77,pHandle)
(78,pFile)
(79,password)
(80,pHandle)
(81,* pFile = fopen("debug.txt", "a+")
(82,0)
(83,printLine("fgets()
(84,password)
(85,passwordLen = 0)
(86,* username = "User")
(87,printLine("User logged in successfully.")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
