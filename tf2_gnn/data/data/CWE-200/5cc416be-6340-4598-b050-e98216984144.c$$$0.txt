-----label-----
1
-----code-----
void CWE244_Heap_Inspection__w32_wchar_t_realloc_10_bad()
{
    if(globalTrue)
    {
        {
            wchar_t * password = (wchar_t *)malloc(100*sizeof(wchar_t));
            if (password == NULL) {exit(-1);}
            size_t passwordLen = 0;
            HANDLE hUser;
            wchar_t * username = L"User";
            wchar_t * domain = L"Domain";
            /* Initialize password */
            password[0] = L'\0';
            if (fgetws(password, 100, stdin) == NULL)
            {
                printLine("fgetws() failed");
                /* Restore NUL terminator if fgetws fails */
                password[0] = L'\0';
            }
            /* Remove the carriage return from the string that is inserted by fgetws() */
            passwordLen = wcslen(password);
            if (passwordLen > 0)
            {
                password[passwordLen-1] = L'\0';
            }
            /* Use the password in LogonUser() to establish that it is "sensitive" */
            if (LogonUserW(
                        username,
                        domain,
                        password,
                        LOGON32_LOGON_NETWORK,
                        LOGON32_PROVIDER_DEFAULT,
                        &hUser) != 0)
            {
                printLine("User logged in successfully.");
                CloseHandle(hUser);
            }
            else
            {
                printLine("Unable to login.");
            }
            /* FLAW: reallocate password without clearing the password buffer
             * which could leave a copy of the password in memory */
            password = realloc(password, 200 * sizeof(wchar_t));
            if (password == NULL) {exit(-1);}
            /* Zeroize the password */
            SecureZeroMemory(password, 200 * sizeof(wchar_t));
            /* Use the password buffer again */
            wcscpy(password, L"Nothing to see here");
            printWLine(password);
            free(password);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
9,10
10,11
10,12
10,13
10,14
10,15
10,16
10,17
10,18
10,19
10,20
10,21
10,22
10,23
10,24
10,25
10,26
10,27
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
18,20
19,20
19,21
21,22
23,24
23,25
24,25
26,27
26,28
28,29
29,30
29,31
32,33
32,34
33,34
33,35
34,35
36,37
38,39
39,40
40,41
40,42
41,42
43,44
45,46
46,47
46,48
47,48
49,50
49,51
51,52
53,54
54,55
54,56
55,56
57,58
59,60
60,61
60,62
62,63
62,64
62,65
65,66
67,68
68,69
68,70
70,71
70,72
70,73
73,74
75,76
76,77
76,78
77,78
77,79
78,79
82,83
82,84
83,84
83,85
84,85
84,86
84,87
84,88
85,86
87,88
90,91
92,93
94,95
94,96
95,96
96,97
96,98
97,98
100,101
101,102
101,103
102,103
102,104
103,104
107,108
108,109
108,110
109,110
111,112
111,113
112,113
114,115
116,117
116,118
117,118
117,119
118,119
121,122
122,123
123,124
123,125
124,125
124,126
125,126
127,128
127,129
128,129
132,133
132,134
132,135
133,134
133,135
134,135
134,136
134,137
134,138
134,139
134,140
134,141
135,136
137,138
139,140
141,142
143,144
145,146
147,148
148,149
151,152
151,153
152,153
153,154
153,155
154,155
157,158
158,159
158,160
159,160
161,162
163,164
164,165
165,166
165,167
166,167
169,170
170,171
170,172
171,172
173,174
173,175
173,176
174,175
176,177
178,179
178,180
180,181
181,182
181,183
184,185
184,186
185,186
185,187
186,187
188,189
190,191
191,192
192,193
192,194
193,194
195,196
197,198
198,199
198,200
198,201
199,200
201,202
203,204
203,205
205,206
206,207
206,208
209,210
210,211
210,212
210,213
211,212
213,214
216,217
217,218
217,219
218,219
220,221
222,223
223,224
223,225
224,225
226,227
-----nextToken-----
2,4,8,13,15,16,20,22,25,27,30,31,35,37,42,44,48,50,52,56,58,61,63,64,66,69,71,72,74,79,80,81,86,88,89,91,93,98,99,104,105,106,110,113,115,119,120,126,129,130,131,136,138,140,142,144,146,149,150,155,156,160,162,167,168,172,175,177,179,182,183,187,189,194,196,200,202,204,207,208,212,214,215,219,221,225,227
-----computeFrom-----
26,27
26,28
33,34
33,35
76,77
76,78
83,84
83,85
101,102
101,103
108,109
108,110
117,118
117,119
123,124
123,125
127,128
127,129
133,134
133,135
170,171
170,172
178,179
178,180
185,186
185,187
203,204
203,205
-----guardedBy-----
88,104
119,129
149,162
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE244_Heap_Inspection__w32_wchar_t_realloc_10_bad(){    if(globalTrue)    {        {            wchar_t * password = (wchar_t *)malloc(100*sizeof(wchar_t));            if (password == NULL) {exit(-1);}            size_t passwordLen = 0;            HANDLE hUser;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            /* Initialize password */            password[0] = L'\0';            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: reallocate password without clearing the password buffer             * which could leave a copy of the password in memory */            password = realloc(password, 200 * sizeof(wchar_t));            if (password == NULL) {exit(-1);}            /* Zeroize the password */            SecureZeroMemory(password, 200 * sizeof(wchar_t));            /* Use the password buffer again */            wcscpy(password, L"Nothing to see here");            printWLine(password);            free(password);        }    }}
void
CWE244_Heap_Inspection__w32_wchar_t_realloc_10_bad()
CWE244_Heap_Inspection__w32_wchar_t_realloc_10_bad
{    if(globalTrue)    {        {            wchar_t * password = (wchar_t *)malloc(100*sizeof(wchar_t));            if (password == NULL) {exit(-1);}            size_t passwordLen = 0;            HANDLE hUser;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            /* Initialize password */            password[0] = L'\0';            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: reallocate password without clearing the password buffer             * which could leave a copy of the password in memory */            password = realloc(password, 200 * sizeof(wchar_t));            if (password == NULL) {exit(-1);}            /* Zeroize the password */            SecureZeroMemory(password, 200 * sizeof(wchar_t));            /* Use the password buffer again */            wcscpy(password, L"Nothing to see here");            printWLine(password);            free(password);        }    }}
if(globalTrue)    {        {            wchar_t * password = (wchar_t *)malloc(100*sizeof(wchar_t));            if (password == NULL) {exit(-1);}            size_t passwordLen = 0;            HANDLE hUser;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            /* Initialize password */            password[0] = L'\0';            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: reallocate password without clearing the password buffer             * which could leave a copy of the password in memory */            password = realloc(password, 200 * sizeof(wchar_t));            if (password == NULL) {exit(-1);}            /* Zeroize the password */            SecureZeroMemory(password, 200 * sizeof(wchar_t));            /* Use the password buffer again */            wcscpy(password, L"Nothing to see here");            printWLine(password);            free(password);        }    }
globalTrue
globalTrue
{        {            wchar_t * password = (wchar_t *)malloc(100*sizeof(wchar_t));            if (password == NULL) {exit(-1);}            size_t passwordLen = 0;            HANDLE hUser;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            /* Initialize password */            password[0] = L'\0';            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: reallocate password without clearing the password buffer             * which could leave a copy of the password in memory */            password = realloc(password, 200 * sizeof(wchar_t));            if (password == NULL) {exit(-1);}            /* Zeroize the password */            SecureZeroMemory(password, 200 * sizeof(wchar_t));            /* Use the password buffer again */            wcscpy(password, L"Nothing to see here");            printWLine(password);            free(password);        }    }
{            wchar_t * password = (wchar_t *)malloc(100*sizeof(wchar_t));            if (password == NULL) {exit(-1);}            size_t passwordLen = 0;            HANDLE hUser;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            /* Initialize password */            password[0] = L'\0';            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            /* FLAW: reallocate password without clearing the password buffer             * which could leave a copy of the password in memory */            password = realloc(password, 200 * sizeof(wchar_t));            if (password == NULL) {exit(-1);}            /* Zeroize the password */            SecureZeroMemory(password, 200 * sizeof(wchar_t));            /* Use the password buffer again */            wcscpy(password, L"Nothing to see here");            printWLine(password);            free(password);        }
wchar_t * password = (wchar_t *)malloc(100*sizeof(wchar_t));
wchar_t * password = (wchar_t *)malloc(100*sizeof(wchar_t));
wchar_t
* password = (wchar_t *)malloc(100*sizeof(wchar_t))
*
password
= (wchar_t *)malloc(100*sizeof(wchar_t))
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (password == NULL) {exit(-1);}
password == NULL
password
password
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
size_t passwordLen = 0;
size_t passwordLen = 0;
size_t
size_t
passwordLen = 0
passwordLen
= 0
0
HANDLE hUser;
HANDLE hUser;
HANDLE
HANDLE
hUser
hUser
wchar_t * username = L"User";
wchar_t * username = L"User";
wchar_t
* username = L"User"
*
username
= L"User"
L"User"
wchar_t * domain = L"Domain";
wchar_t * domain = L"Domain";
wchar_t
* domain = L"Domain"
*
domain
= L"Domain"
L"Domain"
password[0] = L'\0';
password[0] = L'\0'
password[0]
password
password
0
L'\0'
if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }
fgetws(password, 100, stdin) == NULL
fgetws(password, 100, stdin)
fgetws
fgetws
password
password
100
stdin
stdin
NULL
NULL
{                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }
printLine("fgetws() failed");
printLine("fgetws() failed")
printLine
printLine
"fgetws() failed"
password[0] = L'\0';
password[0] = L'\0'
password[0]
password
password
0
L'\0'
passwordLen = wcslen(password);
passwordLen = wcslen(password)
passwordLen
passwordLen
wcslen(password)
wcslen
wcslen
password
password
if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }
passwordLen > 0
passwordLen
passwordLen
0
{                password[passwordLen-1] = L'\0';            }
password[passwordLen-1] = L'\0';
password[passwordLen-1] = L'\0'
password[passwordLen-1]
password
password
passwordLen-1
passwordLen
passwordLen
1
L'\0'
if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }
LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0
LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser)
LogonUserW
LogonUserW
username
username
domain
domain
password
password
LOGON32_LOGON_NETWORK
LOGON32_LOGON_NETWORK
LOGON32_PROVIDER_DEFAULT
LOGON32_PROVIDER_DEFAULT
&hUser
hUser
hUser
0
{                printLine("User logged in successfully.");                CloseHandle(hUser);            }
printLine("User logged in successfully.");
printLine("User logged in successfully.")
printLine
printLine
"User logged in successfully."
CloseHandle(hUser);
CloseHandle(hUser)
CloseHandle
CloseHandle
hUser
hUser
{                printLine("Unable to login.");            }
printLine("Unable to login.");
printLine("Unable to login.")
printLine
printLine
"Unable to login."
password = realloc(password, 200 * sizeof(wchar_t));
password = realloc(password, 200 * sizeof(wchar_t))
password
password
realloc(password, 200 * sizeof(wchar_t))
realloc
realloc
password
password
200 * sizeof(wchar_t)
200
sizeof(wchar_t)
wchar_t
wchar_t

if (password == NULL) {exit(-1);}
password == NULL
password
password
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
SecureZeroMemory(password, 200 * sizeof(wchar_t));
SecureZeroMemory(password, 200 * sizeof(wchar_t))
SecureZeroMemory
SecureZeroMemory
password
password
200 * sizeof(wchar_t)
200
sizeof(wchar_t)
wchar_t
wchar_t

wcscpy(password, L"Nothing to see here");
wcscpy(password, L"Nothing to see here")
wcscpy
wcscpy
password
password
L"Nothing to see here"
printWLine(password);
printWLine(password)
printWLine
printWLine
password
password
free(password);
free(password)
free
free
password
password
-----joern-----
(47,41,0)
(62,11,0)
(19,89,0)
(95,47,0)
(67,47,0)
(43,32,0)
(34,19,0)
(79,21,0)
(4,77,0)
(62,47,0)
(93,17,0)
(59,10,0)
(53,23,0)
(22,16,0)
(35,0,0)
(33,45,0)
(49,21,0)
(24,51,0)
(26,70,0)
(89,47,0)
(0,47,0)
(64,24,0)
(45,71,0)
(96,47,0)
(10,34,0)
(48,11,0)
(90,21,0)
(0,71,0)
(19,34,0)
(18,47,0)
(8,28,0)
(55,2,0)
(19,3,0)
(38,57,0)
(11,32,0)
(15,21,0)
(83,47,0)
(57,24,0)
(42,47,0)
(23,27,0)
(11,47,0)
(31,71,0)
(32,27,0)
(32,89,0)
(16,47,0)
(86,47,0)
(73,6,0)
(54,75,0)
(94,40,0)
(27,23,0)
(74,47,0)
(2,55,0)
(40,88,0)
(29,97,0)
(78,28,0)
(85,49,0)
(26,7,0)
(39,60,0)
(76,51,0)
(91,70,0)
(37,21,0)
(51,89,0)
(34,10,0)
(89,19,0)
(24,47,0)
(30,2,0)
(25,47,0)
(44,47,0)
(6,97,0)
(71,0,0)
(72,16,0)
(58,79,0)
(3,19,0)
(82,21,0)
(71,45,0)
(75,52,0)
(5,63,0)
(13,92,0)
(21,79,0)
(51,24,0)
(69,50,0)
(60,11,0)
(70,26,0)
(81,36,0)
(28,11,0)
(27,32,0)
(80,62,0)
(1,89,0)
(2,89,0)
(60,47,0)
(56,47,0)
(17,89,0)
(66,17,0)
(61,55,0)
(21,89,0)
(20,57,0)
(14,2,0)
(65,84,0)
(0,11,0)
(32,11,0)
(69,84,0)
(68,27,0)
(63,52,0)
(9,2,0)
(84,69,0)
(21,49,0)
(10,77,0)
(87,21,0)
(77,10,0)
(27,23,1)
(21,89,1)
(82,15,1)
(93,89,1)
(87,37,1)
(43,48,1)
(54,63,1)
(48,40,1)
(84,65,1)
(65,28,1)
(64,55,1)
(28,11,1)
(44,16,1)
(55,2,1)
(60,11,1)
(14,95,1)
(33,31,1)
(17,89,1)
(32,89,1)
(89,19,1)
(78,11,1)
(94,79,1)
(30,14,1)
(80,0,1)
(8,78,1)
(77,4,1)
(70,91,1)
(28,8,1)
(12,46,1)
(12,60,1)
(15,13,1)
(79,58,1)
(37,82,1)
(79,21,1)
(90,87,1)
(20,24,1)
(1,46,1)
(57,24,1)
(85,90,1)
(0,11,1)
(59,1,1)
(75,54,1)
(72,22,1)
(19,3,1)
(62,11,1)
(0,71,1)
(40,94,1)
(35,69,1)
(69,84,1)
(29,6,1)
(17,66,1)
(34,10,1)
(31,35,1)
(21,49,1)
(58,21,1)
(15,57,1)
(73,55,1)
(38,20,1)
(10,77,1)
(71,45,1)
(13,57,1)
(61,2,1)
(35,28,1)
(5,79,1)
(76,64,1)
(55,61,1)
(68,43,1)
(16,72,1)
(66,93,1)
(63,5,1)
(62,80,1)
(22,17,1)
(32,27,1)
(49,85,1)
(2,89,1)
(91,17,1)
(26,70,1)
(51,76,1)
(51,89,1)
(64,29,1)
(48,75,1)
(57,38,1)
(60,39,1)
(22,26,1)
(4,59,1)
(67,44,1)
(53,68,1)
(9,30,1)
(95,67,1)
(6,73,1)
(19,34,1)
(11,32,1)
(39,62,1)
(45,33,1)
(23,53,1)
(24,51,1)
(2,9,1)
(43,46,2)
(19,46,2)
(79,21,2)
(27,46,2)
(8,46,2)
(87,46,2)
(57,46,2)
(68,46,2)
(28,46,2)
(22,46,2)
(90,46,2)
(28,11,2)
(60,46,2)
(16,46,2)
(0,71,2)
(70,17,2)
(2,89,2)
(37,46,2)
(15,46,2)
(63,79,2)
(51,89,2)
(91,17,2)
(27,23,2)
(19,3,2)
(31,46,2)
(64,46,2)
(11,46,2)
(72,46,2)
(82,46,2)
(61,46,2)
(30,46,2)
(69,84,2)
(32,46,2)
(11,32,2)
(34,46,2)
(40,79,2)
(77,46,2)
(35,46,2)
(33,46,2)
(60,11,2)
(57,24,2)
(32,89,2)
(89,46,2)
(78,46,2)
(10,46,2)
(17,89,2)
(79,46,2)
(39,46,2)
(65,28,2)
(0,11,2)
(58,46,2)
(14,46,2)
(13,57,2)
(26,17,2)
(44,46,2)
(62,46,2)
(21,46,2)
(6,55,2)
(19,34,2)
(10,77,2)
(55,46,2)
(85,46,2)
(67,46,2)
(54,79,2)
(5,79,2)
(1,46,2)
(80,46,2)
(53,46,2)
(26,70,2)
(0,46,2)
(89,19,2)
(75,79,2)
(32,27,2)
(48,46,2)
(73,55,2)
(71,46,2)
(38,46,2)
(17,46,2)
(55,2,2)
(94,79,2)
(49,46,2)
(93,46,2)
(29,55,2)
(84,28,2)
(34,10,2)
(21,49,2)
(69,28,2)
(21,89,2)
(62,11,2)
(24,51,2)
(71,45,2)
(66,46,2)
(9,46,2)
(23,46,2)
(24,46,2)
(59,46,2)
(2,46,2)
(4,46,2)
(20,46,2)
(45,46,2)
(51,46,2)
(76,46,2)
(95,46,2)
-----------------------------------
(0,SecureZeroMemory(password, 200 * sizeof(wchar_t)
(1,password)
(2,fgetws(password, 100, stdin)
(3,wchar_t *)
(4,wchar_t)
(5,"User logged in successfully.")
(6,printLine("fgetws()
(7,)
(8,NULL)
(9,stdin)
(10,100*sizeof(wchar_t)
(11,password = realloc(password, 200 * sizeof(wchar_t)
(12,RET)
(13,\\\'\\\\0\\\')
(14,password)
(15,username)
(16,passwordLen = 0)
(17,password == NULL)
(18,if (passwordLen > 0)
(19,(wchar_t *)
(20,passwordLen)
(21,LogonUserW(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(22,passwordLen)
(23,sizeof(wchar_t)
(24,passwordLen = wcslen(password)
(25,if (LogonUserW(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(26,exit(-1)
(27,200 * sizeof(wchar_t)
(28,password == NULL)
(29,\\\'\\\\0\\\')
(30,100)
(31,200)
(32,realloc(password, 200 * sizeof(wchar_t)
(33,wchar_t)
(34,malloc(100*sizeof(wchar_t)
(35,password)
(36,)
(37,password)
(38,0)
(39,password)
(40,printLine("Unable to login.")
(41,)
(42,hUser)
(43,password)
(44,"User")
(45,sizeof(wchar_t)
(46,globalTrue)
(47,)
(48,password)
(49,&hUser)
(50,)
(51,wcslen(password)
(52,)
(53,wchar_t)
(54,hUser)
(55,fgetws(password, 100, stdin)
(56,if (fgetws(password, 100, stdin)
(57,passwordLen > 0)
(58,0)
(59,100)
(60,free(password)
(61,NULL)
(62,printWLine(password)
(63,printLine("User logged in successfully.")
(64,passwordLen)
(65,1)
(66,NULL)
(67,"Domain")
(68,200)
(69,exit(-1)
(70,-1)
(71,200 * sizeof(wchar_t)
(72,0)
(73,"fgetws()
(74,passwordLen)
(75,CloseHandle(hUser)
(76,password)
(77,sizeof(wchar_t)
(78,password)
(79,LogonUserW(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(80,password)
(81,if(globalTrue)
(82,domain)
(83,if (password == NULL)
(84,-1)
(85,hUser)
(86,password)
(87,LOGON32_LOGON_NETWORK)
(88,)
(89,* password = (wchar_t *)
(90,LOGON32_PROVIDER_DEFAULT)
(91,1)
(92,)
(93,password)
(94,"Unable to login.")
(95,\\\'\\\\0\\\')
(96,if (password == NULL)
(97,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
