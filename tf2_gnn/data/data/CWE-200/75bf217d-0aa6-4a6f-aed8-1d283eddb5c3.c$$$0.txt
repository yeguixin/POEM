-----label-----
0
-----code-----
static void good2()
{
    if(1)
    {
        /* FIX: error message is general */
        printLine("Not in path");
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
8,9
9,10
10,11
10,12
11,12
-----nextToken-----
2,4,7,12,13
-----computeFrom-----
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void good2(){    if(1)    {        /* FIX: error message is general */        printLine("Not in path");    }}
static void
good2()
good2
{    if(1)    {        /* FIX: error message is general */        printLine("Not in path");    }}
if(1)    {        /* FIX: error message is general */        printLine("Not in path");    }
1
{        /* FIX: error message is general */        printLine("Not in path");    }
printLine("Not in path");
printLine("Not in path")
printLine
printLine
"Not in path"
-----joern-----
(3,2,0)
(1,6,0)
(2,0,0)
(4,2,1)
(4,5,1)
(2,3,1)
(3,5,1)
(3,5,2)
(2,5,2)
-----------------------------------
(0,)
(1,if(1)
(2,printLine("Not in path")
(3,"Not in path")
(4,RET)
(5,1)
(6,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
