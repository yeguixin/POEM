-----label-----
0
-----code-----
static void good1()
{
    if(0)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        {
            char * password = (char *)malloc(100*sizeof(char));
            if (password == NULL) {exit(-1);}
            size_t passwordLen = 0;
            HANDLE hUser;
            char * username = "User";
            char * domain = "Domain";
            /* Initialize password */
            password[0] = '\0';
            if (fgets(password, 100, stdin) == NULL)
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                password[0] = '\0';
            }
            /* Remove the carriage return from the string that is inserted by fgets() */
            passwordLen = strlen(password);
            if (passwordLen > 0)
            {
                password[passwordLen-1] = '\0';
            }
            /* Use the password in LogonUser() to establish that it is "sensitive" */
            if (LogonUserA(
                        username,
                        domain,
                        password,
                        LOGON32_LOGON_NETWORK,
                        LOGON32_PROVIDER_DEFAULT,
                        &hUser) != 0)
            {
                printLine("User logged in successfully.");
                CloseHandle(hUser);
            }
            else
            {
                printLine("Unable to login.");
            }
            passwordLen = strlen(password);
            /* FIX: Clear password prior to freeing */
            SecureZeroMemory(password, passwordLen * sizeof(char));
            free(password);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
6,9
8,9
9,10
10,11
10,12
11,12
14,15
15,16
15,17
15,18
15,19
15,20
15,21
15,22
15,23
15,24
15,25
15,26
15,27
15,28
15,29
16,17
17,18
17,19
19,20
19,21
19,22
22,23
23,24
23,25
24,25
24,26
26,27
28,29
28,30
29,30
31,32
31,33
33,34
34,35
34,36
37,38
37,39
38,39
38,40
39,40
41,42
43,44
44,45
45,46
45,47
46,47
48,49
50,51
51,52
51,53
52,53
54,55
54,56
56,57
58,59
59,60
59,61
60,61
62,63
64,65
65,66
65,67
67,68
67,69
67,70
70,71
72,73
73,74
73,75
75,76
75,77
75,78
78,79
80,81
81,82
81,83
82,83
82,84
83,84
87,88
87,89
88,89
88,90
89,90
89,91
89,92
89,93
90,91
92,93
95,96
97,98
99,100
99,101
100,101
101,102
101,103
102,103
105,106
106,107
106,108
107,108
107,109
108,109
112,113
113,114
113,115
114,115
116,117
116,118
117,118
119,120
121,122
121,123
122,123
122,124
123,124
126,127
127,128
128,129
128,130
129,130
129,131
130,131
132,133
132,134
133,134
137,138
137,139
137,140
138,139
138,140
139,140
139,141
139,142
139,143
139,144
139,145
139,146
140,141
142,143
144,145
146,147
148,149
150,151
152,153
153,154
156,157
156,158
157,158
158,159
158,160
159,160
162,163
163,164
163,165
164,165
166,167
168,169
169,170
170,171
170,172
171,172
174,175
175,176
175,177
176,177
178,179
178,180
179,180
181,182
183,184
184,185
184,186
184,187
185,186
187,188
189,190
189,191
190,191
192,193
193,194
193,195
196,197
197,198
197,199
198,199
200,201
-----nextToken-----
2,4,7,12,13,18,20,21,25,27,30,32,35,36,40,42,47,49,53,55,57,61,63,66,68,69,71,74,76,77,79,84,85,86,91,93,94,96,98,103,104,109,110,111,115,118,120,124,125,131,134,135,136,141,143,145,147,149,151,154,155,160,161,165,167,172,173,177,180,182,186,188,191,194,195,199,201
-----computeFrom-----
31,32
31,33
38,39
38,40
81,82
81,83
88,89
88,90
106,107
106,108
113,114
113,115
122,123
122,124
128,129
128,130
132,133
132,134
138,139
138,140
175,176
175,177
189,190
189,191
-----guardedBy-----
93,109
124,134
154,167
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void good1(){    if(0)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            char * password = (char *)malloc(100*sizeof(char));            if (password == NULL) {exit(-1);}            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            /* Initialize password */            password[0] = '\0';            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            passwordLen = strlen(password);            /* FIX: Clear password prior to freeing */            SecureZeroMemory(password, passwordLen * sizeof(char));            free(password);        }    }}
static void
good1()
good1
{    if(0)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            char * password = (char *)malloc(100*sizeof(char));            if (password == NULL) {exit(-1);}            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            /* Initialize password */            password[0] = '\0';            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            passwordLen = strlen(password);            /* FIX: Clear password prior to freeing */            SecureZeroMemory(password, passwordLen * sizeof(char));            free(password);        }    }}
if(0)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            char * password = (char *)malloc(100*sizeof(char));            if (password == NULL) {exit(-1);}            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            /* Initialize password */            password[0] = '\0';            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            passwordLen = strlen(password);            /* FIX: Clear password prior to freeing */            SecureZeroMemory(password, passwordLen * sizeof(char));            free(password);        }    }
0
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        {            char * password = (char *)malloc(100*sizeof(char));            if (password == NULL) {exit(-1);}            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            /* Initialize password */            password[0] = '\0';            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            passwordLen = strlen(password);            /* FIX: Clear password prior to freeing */            SecureZeroMemory(password, passwordLen * sizeof(char));            free(password);        }    }
{            char * password = (char *)malloc(100*sizeof(char));            if (password == NULL) {exit(-1);}            size_t passwordLen = 0;            HANDLE hUser;            char * username = "User";            char * domain = "Domain";            /* Initialize password */            password[0] = '\0';            if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }            /* Remove the carriage return from the string that is inserted by fgets() */            passwordLen = strlen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            passwordLen = strlen(password);            /* FIX: Clear password prior to freeing */            SecureZeroMemory(password, passwordLen * sizeof(char));            free(password);        }
char * password = (char *)malloc(100*sizeof(char));
char * password = (char *)malloc(100*sizeof(char));
char
* password = (char *)malloc(100*sizeof(char))
*
password
= (char *)malloc(100*sizeof(char))
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (password == NULL) {exit(-1);}
password == NULL
password
password
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
size_t passwordLen = 0;
size_t passwordLen = 0;
size_t
size_t
passwordLen = 0
passwordLen
= 0
0
HANDLE hUser;
HANDLE hUser;
HANDLE
HANDLE
hUser
hUser
char * username = "User";
char * username = "User";
char
* username = "User"
*
username
= "User"
"User"
char * domain = "Domain";
char * domain = "Domain";
char
* domain = "Domain"
*
domain
= "Domain"
"Domain"
password[0] = '\0';
password[0] = '\0'
password[0]
password
password
0
'\0'
if (fgets(password, 100, stdin) == NULL)            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }
fgets(password, 100, stdin) == NULL
fgets(password, 100, stdin)
fgets
fgets
password
password
100
stdin
stdin
NULL
NULL
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                password[0] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
password[0] = '\0';
password[0] = '\0'
password[0]
password
password
0
'\0'
passwordLen = strlen(password);
passwordLen = strlen(password)
passwordLen
passwordLen
strlen(password)
strlen
strlen
password
password
if (passwordLen > 0)            {                password[passwordLen-1] = '\0';            }
passwordLen > 0
passwordLen
passwordLen
0
{                password[passwordLen-1] = '\0';            }
password[passwordLen-1] = '\0';
password[passwordLen-1] = '\0'
password[passwordLen-1]
password
password
passwordLen-1
passwordLen
passwordLen
1
'\0'
if (LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }
LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0
LogonUserA(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser)
LogonUserA
LogonUserA
username
username
domain
domain
password
password
LOGON32_LOGON_NETWORK
LOGON32_LOGON_NETWORK
LOGON32_PROVIDER_DEFAULT
LOGON32_PROVIDER_DEFAULT
&hUser
hUser
hUser
0
{                printLine("User logged in successfully.");                CloseHandle(hUser);            }
printLine("User logged in successfully.");
printLine("User logged in successfully.")
printLine
printLine
"User logged in successfully."
CloseHandle(hUser);
CloseHandle(hUser)
CloseHandle
CloseHandle
hUser
hUser
{                printLine("Unable to login.");            }
printLine("Unable to login.");
printLine("Unable to login.")
printLine
printLine
"Unable to login."
passwordLen = strlen(password);
passwordLen = strlen(password)
passwordLen
passwordLen
strlen(password)
strlen
strlen
password
password
SecureZeroMemory(password, passwordLen * sizeof(char));
SecureZeroMemory(password, passwordLen * sizeof(char))
SecureZeroMemory
SecureZeroMemory
password
password
passwordLen * sizeof(char)
passwordLen
passwordLen
sizeof(char)
char
char

free(password);
free(password)
free
free
password
password
-----joern-----
(27,64,0)
(105,26,0)
(44,103,0)
(70,83,0)
(91,64,0)
(42,104,0)
(31,26,0)
(72,97,0)
(29,0,0)
(2,64,0)
(11,75,0)
(106,22,0)
(82,68,0)
(16,93,0)
(38,67,0)
(19,58,0)
(62,60,0)
(12,19,0)
(57,20,0)
(83,64,0)
(48,10,0)
(53,24,0)
(26,64,0)
(94,38,0)
(49,62,0)
(22,106,0)
(97,81,0)
(75,67,0)
(104,81,0)
(89,55,0)
(43,93,0)
(35,62,0)
(28,10,0)
(33,67,0)
(10,67,0)
(54,64,0)
(6,64,0)
(103,45,0)
(51,19,0)
(55,91,0)
(55,24,0)
(44,0,0)
(0,29,0)
(34,64,0)
(62,47,0)
(13,47,0)
(67,64,0)
(62,67,0)
(46,90,0)
(3,60,0)
(52,38,0)
(19,64,0)
(0,44,0)
(103,44,0)
(23,33,0)
(80,1,0)
(5,90,0)
(88,64,0)
(4,66,0)
(17,64,0)
(77,10,0)
(56,16,0)
(18,75,0)
(96,64,0)
(91,55,0)
(41,62,0)
(8,45,0)
(9,12,0)
(20,67,0)
(12,20,0)
(65,64,0)
(64,61,0)
(55,89,0)
(91,67,0)
(100,43,0)
(33,24,0)
(10,48,0)
(86,62,0)
(60,64,0)
(106,40,0)
(58,19,0)
(47,62,0)
(85,67,0)
(92,22,0)
(34,67,0)
(38,43,0)
(102,32,0)
(1,21,0)
(45,103,0)
(87,103,0)
(84,73,0)
(39,32,0)
(78,10,0)
(50,91,0)
(75,83,0)
(32,19,0)
(24,64,0)
(14,79,0)
(58,67,0)
(37,58,0)
(73,67,0)
(67,0,0)
(36,34,0)
(101,14,0)
(15,12,0)
(99,62,0)
(62,59,0)
(59,62,0)
(20,12,0)
(62,90,0)
(76,60,0)
(7,73,0)
(95,89,0)
(30,59,0)
(71,48,0)
(90,64,0)
(24,33,0)
(25,64,0)
(98,55,0)
(20,82,0)
(0,67,0)
(74,82,0)
(72,59,1)
(15,9,1)
(100,38,1)
(43,100,1)
(95,98,1)
(55,89,1)
(30,62,1)
(74,20,1)
(90,5,1)
(32,39,1)
(80,59,1)
(5,46,1)
(38,94,1)
(20,67,1)
(7,84,1)
(92,73,1)
(31,73,1)
(89,95,1)
(9,57,1)
(47,13,1)
(58,37,1)
(31,106,1)
(52,16,1)
(41,49,1)
(45,8,1)
(39,102,1)
(84,67,1)
(50,24,1)
(0,44,1)
(94,52,1)
(105,31,1)
(91,55,1)
(55,24,1)
(53,1,1)
(24,33,1)
(63,34,1)
(59,30,1)
(34,36,1)
(87,85,1)
(53,104,1)
(12,15,1)
(75,67,1)
(60,3,1)
(62,67,1)
(49,99,1)
(33,67,1)
(98,50,1)
(62,60,1)
(10,67,1)
(91,67,1)
(104,42,1)
(62,47,1)
(34,67,1)
(73,7,1)
(22,92,1)
(13,86,1)
(37,51,1)
(63,14,1)
(56,48,1)
(18,60,1)
(51,48,1)
(36,91,1)
(19,58,1)
(28,77,1)
(86,41,1)
(48,71,1)
(16,56,1)
(1,80,1)
(97,72,1)
(35,82,1)
(57,32,1)
(14,101,1)
(73,67,1)
(26,105,1)
(102,19,1)
(11,18,1)
(42,97,1)
(51,43,1)
(99,35,1)
(62,90,1)
(10,78,1)
(48,10,1)
(23,53,1)
(83,70,1)
(75,11,1)
(106,22,1)
(59,62,1)
(82,74,1)
(44,103,1)
(67,0,1)
(33,23,1)
(101,69,1)
(32,19,1)
(76,90,1)
(78,28,1)
(38,67,1)
(85,69,1)
(71,10,1)
(0,29,1)
(58,67,1)
(35,32,1)
(103,45,1)
(20,12,1)
(8,87,1)
(70,75,1)
(46,26,1)
(12,19,1)
(3,76,1)
(77,83,1)
(89,69,2)
(3,69,2)
(8,69,2)
(32,19,2)
(0,44,2)
(44,103,2)
(62,60,2)
(55,89,2)
(90,69,2)
(102,69,2)
(98,69,2)
(39,69,2)
(62,90,2)
(34,67,2)
(86,69,2)
(91,69,2)
(67,69,2)
(72,59,2)
(37,69,2)
(106,22,2)
(30,69,2)
(46,69,2)
(73,67,2)
(87,69,2)
(60,69,2)
(41,69,2)
(91,55,2)
(51,69,2)
(95,69,2)
(94,48,2)
(77,69,2)
(5,69,2)
(59,69,2)
(1,59,2)
(28,69,2)
(11,69,2)
(101,69,2)
(20,67,2)
(85,69,2)
(31,69,2)
(50,69,2)
(22,73,2)
(16,48,2)
(74,32,2)
(34,69,2)
(97,59,2)
(24,33,2)
(0,29,2)
(36,69,2)
(62,47,2)
(83,69,2)
(7,69,2)
(48,10,2)
(55,69,2)
(104,59,2)
(70,69,2)
(20,12,2)
(15,32,2)
(91,67,2)
(18,69,2)
(38,67,2)
(84,69,2)
(38,48,2)
(33,67,2)
(20,32,2)
(53,69,2)
(12,32,2)
(56,48,2)
(0,69,2)
(80,59,2)
(99,69,2)
(43,48,2)
(24,69,2)
(10,67,2)
(55,24,2)
(35,69,2)
(58,67,2)
(14,69,2)
(49,69,2)
(9,32,2)
(71,69,2)
(48,69,2)
(32,69,2)
(78,69,2)
(12,19,2)
(62,67,2)
(100,48,2)
(73,69,2)
(26,69,2)
(59,62,2)
(75,67,2)
(42,59,2)
(44,69,2)
(47,69,2)
(58,69,2)
(13,69,2)
(103,69,2)
(105,69,2)
(82,32,2)
(57,32,2)
(52,48,2)
(45,69,2)
(10,69,2)
(67,0,2)
(92,73,2)
(106,73,2)
(33,69,2)
(76,69,2)
(75,69,2)
(62,69,2)
(103,45,2)
(19,58,2)
(23,69,2)
(19,69,2)
-----------------------------------
(0,(char *)
(1,printLine("Unable to login.")
(2,if (fgets(password, 100, stdin)
(3,"Domain")
(4,if(0)
(5,"User")
(6,domain)
(7,NULL)
(8,char)
(9,passwordLen)
(10,fgets(password, 100, stdin)
(11,0)
(12,passwordLen-1)
(13,hUser)
(14,printLine("Benign, fixed string")
(15,1)
(16,printLine("fgets()
(17,password)
(18,password)
(19,passwordLen = strlen(password)
(20,password[passwordLen-1])
(21,)
(22,-1)
(23,password)
(24,passwordLen = strlen(password)
(25,if (password == NULL)
(26,passwordLen = 0)
(27,passwordLen)
(28,100)
(29,char *)
(30,0)
(31,passwordLen)
(32,passwordLen > 0)
(33,strlen(password)
(34,free(password)
(35,username)
(36,password)
(37,password)
(38,password[0])
(39,0)
(40,)
(41,LOGON32_LOGON_NETWORK)
(42,hUser)
(43,password[0] = \\\'\\\\0\\\')
(44,malloc(100*sizeof(char)
(45,sizeof(char)
(46,username)
(47,&hUser)
(48,fgets(password, 100, stdin)
(49,password)
(50,password)
(51,passwordLen)
(52,password)
(53,passwordLen)
(54,if (LogonUserA(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(55,passwordLen * sizeof(char)
(56,"fgets()
(57,password)
(58,strlen(password)
(59,LogonUserA(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(60,* domain = "Domain")
(61,)
(62,LogonUserA(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(63,RET)
(64,)
(65,if (passwordLen > 0)
(66,)
(67,* password = (char *)
(68,)
(69,0)
(70,\\\'\\\\0\\\')
(71,NULL)
(72,"User logged in successfully.")
(73,password == NULL)
(74,\\\'\\\\0\\\')
(75,password[0])
(76,domain)
(77,password)
(78,stdin)
(79,)
(80,"Unable to login.")
(81,)
(82,password[passwordLen-1] = \\\'\\\\0\\\')
(83,password[0] = \\\'\\\\0\\\')
(84,password)
(85,password)
(86,LOGON32_PROVIDER_DEFAULT)
(87,100)
(88,hUser)
(89,sizeof(char)
(90,* username = "User")
(91,SecureZeroMemory(password, passwordLen * sizeof(char)
(92,1)
(93,)
(94,0)
(95,char)
(96,username)
(97,printLine("User logged in successfully.")
(98,passwordLen)
(99,domain)
(100,\\\'\\\\0\\\')
(101,"Benign, fixed string")
(102,passwordLen)
(103,100*sizeof(char)
(104,CloseHandle(hUser)
(105,0)
(106,exit(-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
