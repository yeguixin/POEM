-----label-----
0
-----code-----
static void good1()
{
    int k;
    for(k = 0; k < 1; k++)
    {
        {
            wchar_t password[100] = L"";
            size_t passwordLen = 0;
            HANDLE pHandle;
            wchar_t * username = L"User";
            wchar_t * domain = L"Domain";
            FILE * pFile = fopen("debug.txt", "a+");
            if (fgetws(password, 100, stdin) == NULL)
            {
                printLine("fgetws() failed");
                /* Restore NUL terminator if fgetws fails */
                password[0] = L'\0';
            }
            /* Remove the carriage return from the string that is inserted by fgetws() */
            passwordLen = wcslen(password);
            if (passwordLen > 0)
            {
                password[passwordLen-1] = L'\0';
            }
            /* Use the password in LogonUser() to establish that it is "sensitive" */
            if (LogonUserW(
                        username,
                        domain,
                        password,
                        LOGON32_LOGON_NETWORK,
                        LOGON32_PROVIDER_DEFAULT,
                        &pHandle) != 0)
            {
                printLine("User logged in successfully.");
                CloseHandle(pHandle);
            }
            else
            {
                printLine("Unable to login.");
            }
            /* FIX: Do not write sensitive data to the log */
            fwprintf(pFile, L"User attempted access\n");
            if (pFile)
            {
                fclose(pFile);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
6,7
7,8
7,9
9,10
11,12
11,13
11,14
11,15
12,13
13,14
13,15
14,15
17,18
17,19
18,19
21,22
22,23
24,25
25,26
25,27
25,28
25,29
25,30
25,31
25,32
25,33
25,34
25,35
25,36
25,37
26,27
27,28
27,29
29,30
29,31
29,32
31,32
33,34
35,36
36,37
36,38
37,38
39,40
39,41
41,42
43,44
44,45
44,46
45,46
47,48
49,50
50,51
50,52
52,53
52,54
52,55
55,56
57,58
58,59
58,60
60,61
60,62
60,63
63,64
65,66
66,67
66,68
67,68
69,70
69,71
69,72
72,73
73,74
73,75
73,76
74,75
78,79
78,80
79,80
79,81
80,81
80,82
80,83
80,84
81,82
83,84
86,87
88,89
90,91
90,92
91,92
92,93
92,94
93,94
96,97
97,98
97,99
98,99
98,100
99,100
103,104
104,105
104,106
105,106
107,108
107,109
108,109
110,111
112,113
112,114
113,114
113,115
114,115
117,118
118,119
119,120
119,121
120,121
120,122
121,122
123,124
123,125
124,125
128,129
128,130
128,131
129,130
129,131
130,131
130,132
130,133
130,134
130,135
130,136
130,137
131,132
133,134
135,136
137,138
139,140
141,142
143,144
144,145
147,148
147,149
148,149
149,150
149,151
150,151
153,154
154,155
154,156
155,156
157,158
159,160
160,161
161,162
161,163
162,163
165,166
166,167
166,168
166,169
167,168
169,170
172,173
172,174
173,174
175,176
176,177
177,178
177,179
178,179
180,181
-----nextToken-----
2,4,8,10,15,16,19,20,23,28,30,32,34,38,40,42,46,48,51,53,54,56,59,61,62,64,68,70,71,75,76,77,82,84,85,87,89,94,95,100,101,102,106,109,111,115,116,122,125,126,127,132,134,136,138,140,142,145,146,151,152,156,158,163,164,168,170,171,174,179,181
-----computeFrom-----
13,14
13,15
17,18
17,19
79,80
79,81
97,98
97,99
104,105
104,106
113,114
113,115
119,120
119,121
123,124
123,125
129,130
129,131
-----guardedBy-----
84,100
115,125
145,158
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void good1(){    int k;    for(k = 0; k < 1; k++)    {        {            wchar_t password[100] = L"";            size_t passwordLen = 0;            HANDLE pHandle;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            FILE * pFile = fopen("debug.txt", "a+");            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }            /* FIX: Do not write sensitive data to the log */            fwprintf(pFile, L"User attempted access\n");            if (pFile)            {                fclose(pFile);            }        }    }}
static void
good1()
good1
{    int k;    for(k = 0; k < 1; k++)    {        {            wchar_t password[100] = L"";            size_t passwordLen = 0;            HANDLE pHandle;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            FILE * pFile = fopen("debug.txt", "a+");            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }            /* FIX: Do not write sensitive data to the log */            fwprintf(pFile, L"User attempted access\n");            if (pFile)            {                fclose(pFile);            }        }    }}
int k;
int k;
int
k
k
for(k = 0; k < 1; k++)    {        {            wchar_t password[100] = L"";            size_t passwordLen = 0;            HANDLE pHandle;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            FILE * pFile = fopen("debug.txt", "a+");            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }            /* FIX: Do not write sensitive data to the log */            fwprintf(pFile, L"User attempted access\n");            if (pFile)            {                fclose(pFile);            }        }    }
k = 0;
k = 0
k
k
0
k < 1
k
k
1
k++
k
k
{        {            wchar_t password[100] = L"";            size_t passwordLen = 0;            HANDLE pHandle;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            FILE * pFile = fopen("debug.txt", "a+");            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }            /* FIX: Do not write sensitive data to the log */            fwprintf(pFile, L"User attempted access\n");            if (pFile)            {                fclose(pFile);            }        }    }
{            wchar_t password[100] = L"";            size_t passwordLen = 0;            HANDLE pHandle;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            FILE * pFile = fopen("debug.txt", "a+");            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }            /* FIX: Do not write sensitive data to the log */            fwprintf(pFile, L"User attempted access\n");            if (pFile)            {                fclose(pFile);            }        }
wchar_t password[100] = L"";
wchar_t password[100] = L"";
wchar_t
password[100] = L""
password
[100]
100
= L""
L""
size_t passwordLen = 0;
size_t passwordLen = 0;
size_t
size_t
passwordLen = 0
passwordLen
= 0
0
HANDLE pHandle;
HANDLE pHandle;
HANDLE
HANDLE
pHandle
pHandle
wchar_t * username = L"User";
wchar_t * username = L"User";
wchar_t
* username = L"User"
*
username
= L"User"
L"User"
wchar_t * domain = L"Domain";
wchar_t * domain = L"Domain";
wchar_t
* domain = L"Domain"
*
domain
= L"Domain"
L"Domain"
FILE * pFile = fopen("debug.txt", "a+");
FILE * pFile = fopen("debug.txt", "a+");
FILE
FILE
* pFile = fopen("debug.txt", "a+")
*
pFile
= fopen("debug.txt", "a+")
fopen("debug.txt", "a+")
fopen
fopen
"debug.txt"
"a+"
if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }
fgetws(password, 100, stdin) == NULL
fgetws(password, 100, stdin)
fgetws
fgetws
password
password
100
stdin
stdin
NULL
NULL
{                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }
printLine("fgetws() failed");
printLine("fgetws() failed")
printLine
printLine
"fgetws() failed"
password[0] = L'\0';
password[0] = L'\0'
password[0]
password
password
0
L'\0'
passwordLen = wcslen(password);
passwordLen = wcslen(password)
passwordLen
passwordLen
wcslen(password)
wcslen
wcslen
password
password
if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }
passwordLen > 0
passwordLen
passwordLen
0
{                password[passwordLen-1] = L'\0';            }
password[passwordLen-1] = L'\0';
password[passwordLen-1] = L'\0'
password[passwordLen-1]
password
password
passwordLen-1
passwordLen
passwordLen
1
L'\0'
if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0)            {                printLine("User logged in successfully.");                CloseHandle(pHandle);            }            else            {                printLine("Unable to login.");            }
LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle) != 0
LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &pHandle)
LogonUserW
LogonUserW
username
username
domain
domain
password
password
LOGON32_LOGON_NETWORK
LOGON32_LOGON_NETWORK
LOGON32_PROVIDER_DEFAULT
LOGON32_PROVIDER_DEFAULT
&pHandle
pHandle
pHandle
0
{                printLine("User logged in successfully.");                CloseHandle(pHandle);            }
printLine("User logged in successfully.");
printLine("User logged in successfully.")
printLine
printLine
"User logged in successfully."
CloseHandle(pHandle);
CloseHandle(pHandle)
CloseHandle
CloseHandle
pHandle
pHandle
{                printLine("Unable to login.");            }
printLine("Unable to login.");
printLine("Unable to login.")
printLine
printLine
"Unable to login."
fwprintf(pFile, L"User attempted access\n");
fwprintf(pFile, L"User attempted access\n")
fwprintf
fwprintf
pFile
pFile
L"User attempted access\n"
if (pFile)            {                fclose(pFile);            }
pFile
pFile
{                fclose(pFile);            }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
-----joern-----
(70,11,0)
(59,5,0)
(29,32,0)
(38,0,0)
(21,23,0)
(53,1,0)
(58,11,0)
(39,69,0)
(7,20,0)
(40,42,0)
(48,13,0)
(45,1,0)
(51,11,0)
(16,68,0)
(22,42,0)
(6,71,0)
(11,17,0)
(36,6,0)
(44,13,0)
(19,11,0)
(43,13,0)
(50,11,0)
(27,46,0)
(5,4,0)
(2,1,0)
(4,5,0)
(56,57,0)
(1,26,0)
(68,0,0)
(35,15,0)
(54,39,0)
(33,47,0)
(9,11,0)
(12,66,0)
(37,1,0)
(10,12,0)
(62,26,0)
(61,71,0)
(52,11,0)
(0,11,0)
(72,35,0)
(64,11,0)
(47,11,0)
(32,0,0)
(71,11,0)
(12,71,0)
(71,6,0)
(18,5,0)
(0,32,0)
(14,68,0)
(3,11,0)
(1,37,0)
(8,47,0)
(26,1,0)
(55,37,0)
(34,43,0)
(20,41,0)
(67,69,0)
(46,15,0)
(28,6,0)
(25,11,0)
(65,4,0)
(30,23,0)
(42,13,0)
(49,5,0)
(60,1,0)
(24,1,0)
(55,1,1)
(31,35,1)
(49,18,1)
(16,14,1)
(8,33,1)
(71,6,1)
(29,38,1)
(18,59,1)
(61,51,1)
(62,53,1)
(46,27,1)
(42,13,1)
(27,37,1)
(51,70,1)
(45,24,1)
(28,61,1)
(33,25,1)
(14,0,1)
(43,13,1)
(7,37,1)
(26,62,1)
(34,31,1)
(68,0,1)
(37,55,1)
(35,72,1)
(40,13,1)
(53,45,1)
(68,16,1)
(37,1,1)
(43,34,1)
(2,60,1)
(60,68,1)
(36,28,1)
(6,36,1)
(25,42,1)
(32,29,1)
(13,48,1)
(0,32,1)
(40,43,1)
(48,44,1)
(39,54,1)
(60,56,1)
(67,39,1)
(38,4,1)
(63,42,1)
(31,20,1)
(1,26,1)
(65,5,1)
(5,49,1)
(56,68,1)
(12,71,1)
(10,31,1)
(72,46,1)
(42,22,1)
(47,8,1)
(20,7,1)
(70,47,1)
(12,10,1)
(34,12,1)
(24,2,1)
(22,40,1)
(4,5,1)
(59,71,1)
(38,67,1)
(4,65,1)
(54,4,1)
(43,42,2)
(6,42,2)
(72,37,2)
(32,42,2)
(34,42,2)
(31,42,2)
(47,42,2)
(18,42,2)
(65,42,2)
(5,42,2)
(51,42,2)
(7,37,2)
(33,42,2)
(4,42,2)
(45,42,2)
(16,42,2)
(70,42,2)
(54,4,2)
(59,42,2)
(56,68,2)
(67,4,2)
(24,42,2)
(8,42,2)
(68,42,2)
(36,42,2)
(71,6,2)
(38,42,2)
(2,42,2)
(20,37,2)
(49,42,2)
(43,13,2)
(29,42,2)
(35,37,2)
(53,42,2)
(42,42,2)
(4,5,2)
(61,42,2)
(46,37,2)
(1,26,2)
(55,42,2)
(25,42,2)
(12,71,2)
(40,42,2)
(62,42,2)
(27,37,2)
(0,32,2)
(37,42,2)
(0,42,2)
(71,42,2)
(37,1,2)
(10,31,2)
(22,42,2)
(26,42,2)
(42,13,2)
(1,42,2)
(14,42,2)
(39,4,2)
(68,0,2)
(12,31,2)
(28,42,2)
(60,42,2)
-----------------------------------
(0,passwordLen = wcslen(password)
(1,LogonUserW(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &pHandle)
(2,domain)
(3,passwordLen)
(4,fgetws(password, 100, stdin)
(5,fgetws(password, 100, stdin)
(6,fopen("debug.txt", "a+")
(7,"Unable to login.")
(8,0)
(9,pHandle)
(10,pFile)
(11,)
(12,fclose(pFile)
(13,k = 0)
(14,passwordLen)
(15,)
(16,0)
(17,)
(18,100)
(19,if (passwordLen > 0)
(20,printLine("Unable to login.")
(21,for(k = 0; k < 1; k++)
(22,1)
(23,)
(24,password)
(25,"")
(26,&pHandle)
(27,"User logged in successfully.")
(28,"debug.txt")
(29,password)
(30,k)
(31,pFile)
(32,wcslen(password)
(33,passwordLen)
(34,k)
(35,CloseHandle(pHandle)
(36,"a+")
(37,LogonUserW(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &pHandle)
(38,passwordLen)
(39,printLine("fgetws()
(40,k)
(41,)
(42,k < 1)
(43,k++)
(44,k)
(45,LOGON32_LOGON_NETWORK)
(46,printLine("User logged in successfully.")
(47,passwordLen = 0)
(48,0)
(49,stdin)
(50,if (pFile)
(51,"Domain")
(52,if (LogonUserW(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &pHandle)
(53,LOGON32_PROVIDER_DEFAULT)
(54,"fgetws()
(55,0)
(56,\\\'\\\\0\\\')
(57,)
(58,if (fgetws(password, 100, stdin)
(59,password)
(60,username)
(61,pFile)
(62,pHandle)
(63,RET)
(64,pFile)
(65,NULL)
(66,)
(67,\\\'\\\\0\\\')
(68,passwordLen > 0)
(69,)
(70,"User")
(71,* pFile = fopen("debug.txt", "a+")
(72,pHandle)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
