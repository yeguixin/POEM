-----label-----
1
-----code-----
void CWE535_Info_Exposure_Shell_Error__w32_wchar_t_01_bad()
{
    {
        wchar_t password[100] = L"";
        size_t passwordLen = 0;
        HANDLE pHandle;
        wchar_t * username = L"User";
        wchar_t * domain = L"Domain";
        if (fgetws(password, 100, stdin) == NULL)
        {
            printLine("fgetws() failed");
            /* Restore NUL terminator if fgetws fails */
            password[0] = L'\0';
        }
        /* Remove the carriage return from the string that is inserted by fgetws() */
        passwordLen = wcslen(password);
        if (passwordLen > 0)
        {
            password[passwordLen-1] = L'\0';
        }
        /* Use the password in LogonUser() to establish that it is "sensitive" */
        if (LogonUserW(
                    username,
                    domain,
                    password,
                    LOGON32_LOGON_NETWORK,
                    LOGON32_PROVIDER_DEFAULT,
                    &pHandle) != 0)
        {
            printLine("User logged in successfully.");
            CloseHandle(pHandle);
        }
        else
        {
            printLine("Unable to login.");
        }
        /* FLAW: Write sensitive data to stderr */
        fwprintf(stderr, L"User attempted access with password: %s\n", password);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
6,9
6,10
6,11
6,12
6,13
6,14
6,15
6,16
7,8
8,9
8,10
10,11
10,12
10,13
12,13
14,15
16,17
17,18
17,19
18,19
20,21
20,22
22,23
24,25
25,26
25,27
26,27
28,29
30,31
31,32
31,33
33,34
33,35
33,36
36,37
38,39
39,40
39,41
41,42
41,43
41,44
44,45
46,47
46,48
47,48
47,49
48,49
48,50
48,51
48,52
49,50
51,52
54,55
56,57
58,59
58,60
59,60
60,61
60,62
61,62
64,65
65,66
65,67
66,67
66,68
67,68
71,72
72,73
72,74
73,74
75,76
75,77
76,77
78,79
80,81
80,82
81,82
81,83
82,83
85,86
86,87
87,88
87,89
88,89
88,90
89,90
91,92
91,93
92,93
96,97
96,98
96,99
97,98
97,99
98,99
98,100
98,101
98,102
98,103
98,104
98,105
99,100
101,102
103,104
105,106
107,108
109,110
111,112
112,113
115,116
115,117
116,117
117,118
117,119
118,119
121,122
122,123
122,124
123,124
125,126
127,128
128,129
129,130
129,131
130,131
133,134
134,135
134,136
134,137
134,138
135,136
137,138
140,141
-----nextToken-----
2,4,9,11,13,15,19,21,23,27,29,32,34,35,37,40,42,43,45,50,52,53,55,57,62,63,68,69,70,74,77,79,83,84,90,93,94,95,100,102,104,106,108,110,113,114,119,120,124,126,131,132,136,138,139,141
-----computeFrom-----
47,48
47,49
65,66
65,67
72,73
72,74
81,82
81,83
87,88
87,89
91,92
91,93
97,98
97,99
-----guardedBy-----
52,68
83,93
113,126
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;
-----ast_node-----
void CWE535_Info_Exposure_Shell_Error__w32_wchar_t_01_bad(){    {        wchar_t password[100] = L"";        size_t passwordLen = 0;        HANDLE pHandle;        wchar_t * username = L"User";        wchar_t * domain = L"Domain";        if (fgetws(password, 100, stdin) == NULL)        {            printLine("fgetws() failed");            /* Restore NUL terminator if fgetws fails */            password[0] = L'\0';        }        /* Remove the carriage return from the string that is inserted by fgetws() */        passwordLen = wcslen(password);        if (passwordLen > 0)        {            password[passwordLen-1] = L'\0';        }        /* Use the password in LogonUser() to establish that it is "sensitive" */        if (LogonUserW(                    username,                    domain,                    password,                    LOGON32_LOGON_NETWORK,                    LOGON32_PROVIDER_DEFAULT,                    &pHandle) != 0)        {            printLine("User logged in successfully.");            CloseHandle(pHandle);        }        else        {            printLine("Unable to login.");        }        /* FLAW: Write sensitive data to stderr */        fwprintf(stderr, L"User attempted access with password: %s\n", password);    }}
void
CWE535_Info_Exposure_Shell_Error__w32_wchar_t_01_bad()
CWE535_Info_Exposure_Shell_Error__w32_wchar_t_01_bad
{    {        wchar_t password[100] = L"";        size_t passwordLen = 0;        HANDLE pHandle;        wchar_t * username = L"User";        wchar_t * domain = L"Domain";        if (fgetws(password, 100, stdin) == NULL)        {            printLine("fgetws() failed");            /* Restore NUL terminator if fgetws fails */            password[0] = L'\0';        }        /* Remove the carriage return from the string that is inserted by fgetws() */        passwordLen = wcslen(password);        if (passwordLen > 0)        {            password[passwordLen-1] = L'\0';        }        /* Use the password in LogonUser() to establish that it is "sensitive" */        if (LogonUserW(                    username,                    domain,                    password,                    LOGON32_LOGON_NETWORK,                    LOGON32_PROVIDER_DEFAULT,                    &pHandle) != 0)        {            printLine("User logged in successfully.");            CloseHandle(pHandle);        }        else        {            printLine("Unable to login.");        }        /* FLAW: Write sensitive data to stderr */        fwprintf(stderr, L"User attempted access with password: %s\n", password);    }}
{        wchar_t password[100] = L"";        size_t passwordLen = 0;        HANDLE pHandle;        wchar_t * username = L"User";        wchar_t * domain = L"Domain";        if (fgetws(password, 100, stdin) == NULL)        {            printLine("fgetws() failed");            /* Restore NUL terminator if fgetws fails */            password[0] = L'\0';        }        /* Remove the carriage return from the string that is inserted by fgetws() */        passwordLen = wcslen(password);        if (passwordLen > 0)        {            password[passwordLen-1] = L'\0';        }        /* Use the password in LogonUser() to establish that it is "sensitive" */        if (LogonUserW(                    username,                    domain,                    password,                    LOGON32_LOGON_NETWORK,                    LOGON32_PROVIDER_DEFAULT,                    &pHandle) != 0)        {            printLine("User logged in successfully.");            CloseHandle(pHandle);        }        else        {            printLine("Unable to login.");        }        /* FLAW: Write sensitive data to stderr */        fwprintf(stderr, L"User attempted access with password: %s\n", password);    }
wchar_t password[100] = L"";
wchar_t password[100] = L"";
wchar_t
password[100] = L""
password
[100]
100
= L""
L""
size_t passwordLen = 0;
size_t passwordLen = 0;
size_t
size_t
passwordLen = 0
passwordLen
= 0
0
HANDLE pHandle;
HANDLE pHandle;
HANDLE
HANDLE
pHandle
pHandle
wchar_t * username = L"User";
wchar_t * username = L"User";
wchar_t
* username = L"User"
*
username
= L"User"
L"User"
wchar_t * domain = L"Domain";
wchar_t * domain = L"Domain";
wchar_t
* domain = L"Domain"
*
domain
= L"Domain"
L"Domain"
if (fgetws(password, 100, stdin) == NULL)        {            printLine("fgetws() failed");            /* Restore NUL terminator if fgetws fails */            password[0] = L'\0';        }
fgetws(password, 100, stdin) == NULL
fgetws(password, 100, stdin)
fgetws
fgetws
password
password
100
stdin
stdin
NULL
NULL
{            printLine("fgetws() failed");            /* Restore NUL terminator if fgetws fails */            password[0] = L'\0';        }
printLine("fgetws() failed");
printLine("fgetws() failed")
printLine
printLine
"fgetws() failed"
password[0] = L'\0';
password[0] = L'\0'
password[0]
password
password
0
L'\0'
passwordLen = wcslen(password);
passwordLen = wcslen(password)
passwordLen
passwordLen
wcslen(password)
wcslen
wcslen
password
password
if (passwordLen > 0)        {            password[passwordLen-1] = L'\0';        }
passwordLen > 0
passwordLen
passwordLen
0
{            password[passwordLen-1] = L'\0';        }
password[passwordLen-1] = L'\0';
password[passwordLen-1] = L'\0'
password[passwordLen-1]
password
password
passwordLen-1
passwordLen
passwordLen
1
L'\0'
if (LogonUserW(                    username,                    domain,                    password,                    LOGON32_LOGON_NETWORK,                    LOGON32_PROVIDER_DEFAULT,                    &pHandle) != 0)        {            printLine("User logged in successfully.");            CloseHandle(pHandle);        }        else        {            printLine("Unable to login.");        }
LogonUserW(                    username,                    domain,                    password,                    LOGON32_LOGON_NETWORK,                    LOGON32_PROVIDER_DEFAULT,                    &pHandle) != 0
LogonUserW(                    username,                    domain,                    password,                    LOGON32_LOGON_NETWORK,                    LOGON32_PROVIDER_DEFAULT,                    &pHandle)
LogonUserW
LogonUserW
username
username
domain
domain
password
password
LOGON32_LOGON_NETWORK
LOGON32_LOGON_NETWORK
LOGON32_PROVIDER_DEFAULT
LOGON32_PROVIDER_DEFAULT
&pHandle
pHandle
pHandle
0
{            printLine("User logged in successfully.");            CloseHandle(pHandle);        }
printLine("User logged in successfully.");
printLine("User logged in successfully.")
printLine
printLine
"User logged in successfully."
CloseHandle(pHandle);
CloseHandle(pHandle)
CloseHandle
CloseHandle
pHandle
pHandle
{            printLine("Unable to login.");        }
printLine("Unable to login.");
printLine("Unable to login.")
printLine
printLine
"Unable to login."
fwprintf(stderr, L"User attempted access with password: %s\n", password);
fwprintf(stderr, L"User attempted access with password: %s\n", password)
fwprintf
fwprintf
stderr
stderr
L"User attempted access with password: %s\n"
password
password
-----joern-----
(5,41,0)
(45,42,0)
(41,24,0)
(50,24,0)
(41,33,0)
(1,14,0)
(14,41,0)
(2,20,0)
(37,31,0)
(8,45,0)
(33,41,0)
(35,38,0)
(26,47,0)
(12,22,0)
(24,19,0)
(0,14,0)
(11,31,0)
(21,24,0)
(38,35,0)
(47,44,0)
(17,38,0)
(3,44,0)
(39,38,0)
(16,37,0)
(27,34,0)
(36,44,0)
(44,34,0)
(43,24,0)
(29,24,0)
(25,22,0)
(40,35,0)
(6,28,0)
(18,24,0)
(46,44,0)
(7,13,0)
(44,47,0)
(20,28,0)
(23,11,0)
(30,38,0)
(9,33,0)
(34,44,0)
(15,44,0)
(4,24,0)
(32,24,0)
(10,44,0)
(22,24,0)
(49,24,0)
(5,35,1)
(36,7,1)
(27,44,1)
(8,34,1)
(41,33,1)
(26,15,1)
(39,49,1)
(2,35,1)
(49,21,1)
(17,30,1)
(7,14,1)
(34,27,1)
(12,29,1)
(15,46,1)
(40,38,1)
(9,5,1)
(10,3,1)
(46,10,1)
(38,17,1)
(35,38,1)
(34,44,1)
(14,41,1)
(16,11,1)
(11,23,1)
(21,22,1)
(3,36,1)
(6,20,1)
(37,16,1)
(47,26,1)
(33,9,1)
(30,39,1)
(0,1,1)
(23,34,1)
(48,37,1)
(25,12,1)
(22,25,1)
(48,45,1)
(44,47,1)
(35,40,1)
(5,6,1)
(36,14,1)
(20,2,1)
(14,0,1)
(45,8,1)
(1,41,1)
(44,47,2)
(7,14,2)
(20,35,2)
(6,35,2)
(16,34,2)
(11,34,2)
(41,33,2)
(23,34,2)
(35,38,2)
(2,35,2)
(45,34,2)
(8,34,2)
(34,44,2)
(14,41,2)
(37,34,2)
-----------------------------------
(0,0)
(1,passwordLen)
(2,"fgetws()
(3,domain)
(4,passwordLen)
(5,passwordLen)
(6,\\\'\\\\0\\\')
(7,\\\'\\\\0\\\')
(8,"Unable to login.")
(9,password)
(10,password)
(11,printLine("User logged in successfully.")
(12,passwordLen)
(13,)
(14,passwordLen > 0)
(15,LOGON32_PROVIDER_DEFAULT)
(16,pHandle)
(17,stdin)
(18,if (passwordLen > 0)
(19,)
(20,printLine("fgetws()
(21,"User")
(22,passwordLen = 0)
(23,"User logged in successfully.")
(24,)
(25,0)
(26,pHandle)
(27,0)
(28,)
(29,"")
(30,100)
(31,)
(32,pHandle)
(33,wcslen(password)
(34,LogonUserW(\\\\n                    username,\\\\n                    domain,\\\\n                    password,\\\\n                    LOGON32_LOGON_NETWORK,\\\\n                    LOGON32_PROVIDER_DEFAULT,\\\\n                    &pHandle)
(35,fgetws(password, 100, stdin)
(36,username)
(37,CloseHandle(pHandle)
(38,fgetws(password, 100, stdin)
(39,password)
(40,NULL)
(41,passwordLen = wcslen(password)
(42,)
(43,if (LogonUserW(\\\\n                    username,\\\\n                    domain,\\\\n                    password,\\\\n                    LOGON32_LOGON_NETWORK,\\\\n                    LOGON32_PROVIDER_DEFAULT,\\\\n                    &pHandle)
(44,LogonUserW(\\\\n                    username,\\\\n                    domain,\\\\n                    password,\\\\n                    LOGON32_LOGON_NETWORK,\\\\n                    LOGON32_PROVIDER_DEFAULT,\\\\n                    &pHandle)
(45,printLine("Unable to login.")
(46,LOGON32_LOGON_NETWORK)
(47,&pHandle)
(48,RET)
(49,"Domain")
(50,if (fgetws(password, 100, stdin)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
