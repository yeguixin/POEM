-----label-----
0
-----code-----
static void good1()
{
    if(0)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        {
            wchar_t password[100] = L"";
            size_t passwordLen = 0;
            HANDLE hUser;
            wchar_t * username = L"User";
            wchar_t * domain = L"Domain";
            if (fgetws(password, 100, stdin) == NULL)
            {
                printLine("fgetws() failed");
                /* Restore NUL terminator if fgetws fails */
                password[0] = L'\0';
            }
            /* Remove the carriage return from the string that is inserted by fgetws() */
            passwordLen = wcslen(password);
            if (passwordLen > 0)
            {
                password[passwordLen-1] = L'\0';
            }
            /* Use the password in LogonUser() to establish that it is "sensitive" */
            if (LogonUserW(
                        username,
                        domain,
                        password,
                        LOGON32_LOGON_NETWORK,
                        LOGON32_PROVIDER_DEFAULT,
                        &hUser) != 0)
            {
                printLine("User logged in successfully.");
                CloseHandle(hUser);
            }
            else
            {
                printLine("Unable to login.");
            }
            passwordLen = wcslen(password);
            /* FIX: Clear password prior to release from stack */
            SecureZeroMemory(password, passwordLen * sizeof(wchar_t));
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
6,9
8,9
9,10
10,11
10,12
11,12
14,15
15,16
15,17
15,18
15,19
15,20
15,21
15,22
15,23
15,24
15,25
15,26
16,17
17,18
17,19
19,20
19,21
19,22
21,22
23,24
25,26
26,27
26,28
27,28
29,30
29,31
31,32
33,34
34,35
34,36
35,36
37,38
39,40
40,41
40,42
42,43
42,44
42,45
45,46
47,48
48,49
48,50
50,51
50,52
50,53
53,54
55,56
55,57
56,57
56,58
57,58
57,59
57,60
57,61
58,59
60,61
63,64
65,66
67,68
67,69
68,69
69,70
69,71
70,71
73,74
74,75
74,76
75,76
75,77
76,77
80,81
81,82
81,83
82,83
84,85
84,86
85,86
87,88
89,90
89,91
90,91
90,92
91,92
94,95
95,96
96,97
96,98
97,98
97,99
98,99
100,101
100,102
101,102
105,106
105,107
105,108
106,107
106,108
107,108
107,109
107,110
107,111
107,112
107,113
107,114
108,109
110,111
112,113
114,115
116,117
118,119
120,121
121,122
124,125
124,126
125,126
126,127
126,128
127,128
130,131
131,132
131,133
132,133
134,135
136,137
137,138
138,139
138,140
139,140
142,143
143,144
143,145
144,145
146,147
146,148
147,148
149,150
151,152
152,153
152,154
152,155
153,154
155,156
157,158
157,159
158,159
160,161
161,162
161,163
-----nextToken-----
2,4,7,12,13,18,20,22,24,28,30,32,36,38,41,43,44,46,49,51,52,54,59,61,62,64,66,71,72,77,78,79,83,86,88,92,93,99,102,103,104,109,111,113,115,117,119,122,123,128,129,133,135,140,141,145,148,150,154,156,159,162,163
-----computeFrom-----
56,57
56,58
74,75
74,76
81,82
81,83
90,91
90,92
96,97
96,98
100,101
100,102
106,107
106,108
143,144
143,145
157,158
157,159
-----guardedBy-----
61,77
92,102
122,135
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;
-----ast_node-----
static void good1(){    if(0)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            wchar_t password[100] = L"";            size_t passwordLen = 0;            HANDLE hUser;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            passwordLen = wcslen(password);            /* FIX: Clear password prior to release from stack */            SecureZeroMemory(password, passwordLen * sizeof(wchar_t));        }    }}
static void
good1()
good1
{    if(0)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            wchar_t password[100] = L"";            size_t passwordLen = 0;            HANDLE hUser;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            passwordLen = wcslen(password);            /* FIX: Clear password prior to release from stack */            SecureZeroMemory(password, passwordLen * sizeof(wchar_t));        }    }}
if(0)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            wchar_t password[100] = L"";            size_t passwordLen = 0;            HANDLE hUser;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            passwordLen = wcslen(password);            /* FIX: Clear password prior to release from stack */            SecureZeroMemory(password, passwordLen * sizeof(wchar_t));        }    }
0
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        {            wchar_t password[100] = L"";            size_t passwordLen = 0;            HANDLE hUser;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            passwordLen = wcslen(password);            /* FIX: Clear password prior to release from stack */            SecureZeroMemory(password, passwordLen * sizeof(wchar_t));        }    }
{            wchar_t password[100] = L"";            size_t passwordLen = 0;            HANDLE hUser;            wchar_t * username = L"User";            wchar_t * domain = L"Domain";            if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }            /* Remove the carriage return from the string that is inserted by fgetws() */            passwordLen = wcslen(password);            if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }            /* Use the password in LogonUser() to establish that it is "sensitive" */            if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }            passwordLen = wcslen(password);            /* FIX: Clear password prior to release from stack */            SecureZeroMemory(password, passwordLen * sizeof(wchar_t));        }
wchar_t password[100] = L"";
wchar_t password[100] = L"";
wchar_t
password[100] = L""
password
[100]
100
= L""
L""
size_t passwordLen = 0;
size_t passwordLen = 0;
size_t
size_t
passwordLen = 0
passwordLen
= 0
0
HANDLE hUser;
HANDLE hUser;
HANDLE
HANDLE
hUser
hUser
wchar_t * username = L"User";
wchar_t * username = L"User";
wchar_t
* username = L"User"
*
username
= L"User"
L"User"
wchar_t * domain = L"Domain";
wchar_t * domain = L"Domain";
wchar_t
* domain = L"Domain"
*
domain
= L"Domain"
L"Domain"
if (fgetws(password, 100, stdin) == NULL)            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }
fgetws(password, 100, stdin) == NULL
fgetws(password, 100, stdin)
fgetws
fgetws
password
password
100
stdin
stdin
NULL
NULL
{                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                password[0] = L'\0';            }
printLine("fgetws() failed");
printLine("fgetws() failed")
printLine
printLine
"fgetws() failed"
password[0] = L'\0';
password[0] = L'\0'
password[0]
password
password
0
L'\0'
passwordLen = wcslen(password);
passwordLen = wcslen(password)
passwordLen
passwordLen
wcslen(password)
wcslen
wcslen
password
password
if (passwordLen > 0)            {                password[passwordLen-1] = L'\0';            }
passwordLen > 0
passwordLen
passwordLen
0
{                password[passwordLen-1] = L'\0';            }
password[passwordLen-1] = L'\0';
password[passwordLen-1] = L'\0'
password[passwordLen-1]
password
password
passwordLen-1
passwordLen
passwordLen
1
L'\0'
if (LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0)            {                printLine("User logged in successfully.");                CloseHandle(hUser);            }            else            {                printLine("Unable to login.");            }
LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser) != 0
LogonUserW(                        username,                        domain,                        password,                        LOGON32_LOGON_NETWORK,                        LOGON32_PROVIDER_DEFAULT,                        &hUser)
LogonUserW
LogonUserW
username
username
domain
domain
password
password
LOGON32_LOGON_NETWORK
LOGON32_LOGON_NETWORK
LOGON32_PROVIDER_DEFAULT
LOGON32_PROVIDER_DEFAULT
&hUser
hUser
hUser
0
{                printLine("User logged in successfully.");                CloseHandle(hUser);            }
printLine("User logged in successfully.");
printLine("User logged in successfully.")
printLine
printLine
"User logged in successfully."
CloseHandle(hUser);
CloseHandle(hUser)
CloseHandle
CloseHandle
hUser
hUser
{                printLine("Unable to login.");            }
printLine("Unable to login.");
printLine("Unable to login.")
printLine
printLine
"Unable to login."
passwordLen = wcslen(password);
passwordLen = wcslen(password)
passwordLen
passwordLen
wcslen(password)
wcslen
wcslen
password
password
SecureZeroMemory(password, passwordLen * sizeof(wchar_t));
SecureZeroMemory(password, passwordLen * sizeof(wchar_t))
SecureZeroMemory
SecureZeroMemory
password
password
passwordLen * sizeof(wchar_t)
passwordLen
passwordLen
sizeof(wchar_t)
wchar_t
wchar_t

-----joern-----
(15,54,0)
(19,37,0)
(62,63,0)
(14,44,0)
(60,50,0)
(48,37,0)
(42,34,0)
(52,61,0)
(13,4,0)
(8,21,0)
(37,4,0)
(64,57,0)
(7,11,0)
(4,2,0)
(55,17,0)
(66,10,0)
(12,4,0)
(44,14,0)
(25,48,0)
(36,8,0)
(3,14,0)
(65,26,0)
(10,63,0)
(9,28,0)
(30,62,0)
(20,44,0)
(6,61,0)
(26,4,0)
(59,21,0)
(43,15,0)
(54,15,0)
(0,21,0)
(22,14,0)
(61,52,0)
(45,50,0)
(37,48,0)
(17,15,0)
(16,4,0)
(33,21,0)
(41,26,0)
(21,8,0)
(1,40,0)
(61,4,0)
(5,4,0)
(56,39,0)
(38,14,0)
(32,21,0)
(49,60,0)
(39,21,0)
(23,4,0)
(29,4,0)
(57,47,0)
(58,34,0)
(18,1,0)
(24,21,0)
(17,4,0)
(51,52,0)
(46,4,0)
(35,4,0)
(15,37,0)
(34,61,0)
(15,17,0)
(21,39,0)
(31,54,0)
(55,37,1)
(34,42,1)
(10,66,1)
(18,8,1)
(30,10,1)
(46,5,1)
(21,39,1)
(24,34,1)
(41,65,1)
(17,15,1)
(8,21,1)
(5,26,1)
(19,1,1)
(53,17,1)
(6,44,1)
(64,27,1)
(26,41,1)
(49,44,1)
(0,33,1)
(48,25,1)
(56,0,1)
(20,14,1)
(9,34,1)
(33,59,1)
(34,61,1)
(19,62,1)
(31,43,1)
(42,58,1)
(62,30,1)
(6,45,1)
(14,38,1)
(22,3,1)
(25,19,1)
(59,32,1)
(45,60,1)
(16,27,1)
(60,49,1)
(61,52,1)
(15,54,1)
(32,24,1)
(57,64,1)
(37,48,1)
(43,55,1)
(58,61,1)
(44,14,1)
(1,18,1)
(15,37,1)
(53,57,1)
(3,46,1)
(54,31,1)
(66,8,1)
(51,6,1)
(52,51,1)
(36,21,1)
(24,9,1)
(44,20,1)
(8,36,1)
(65,16,1)
(38,22,1)
(39,56,1)
(34,27,2)
(39,27,2)
(21,27,2)
(15,54,2)
(22,27,2)
(33,27,2)
(44,27,2)
(5,27,2)
(61,27,2)
(44,14,2)
(17,27,2)
(37,27,2)
(3,27,2)
(43,27,2)
(61,52,2)
(6,27,2)
(46,27,2)
(57,27,2)
(37,48,2)
(51,27,2)
(21,39,2)
(54,27,2)
(17,15,2)
(15,27,2)
(58,27,2)
(24,27,2)
(19,27,2)
(30,8,2)
(34,61,2)
(55,27,2)
(15,37,2)
(49,44,2)
(32,27,2)
(52,27,2)
(36,27,2)
(66,8,2)
(10,8,2)
(62,8,2)
(42,27,2)
(8,21,2)
(9,34,2)
(48,27,2)
(31,27,2)
(60,44,2)
(20,27,2)
(26,27,2)
(64,27,2)
(14,27,2)
(16,27,2)
(1,8,2)
(18,8,2)
(59,27,2)
(41,27,2)
(65,27,2)
(0,27,2)
(38,27,2)
(25,27,2)
(56,27,2)
(45,44,2)
(8,27,2)
-----------------------------------
(0,LOGON32_PROVIDER_DEFAULT)
(1,printLine("Unable to login.")
(2,)
(3,password)
(4,)
(5,"User")
(6,passwordLen)
(7,if(0)
(8,LogonUserW(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(9,\\\'\\\\0\\\')
(10,printLine("User logged in successfully.")
(11,)
(12,if (passwordLen > 0)
(13,hUser)
(14,fgetws(password, 100, stdin)
(15,passwordLen * sizeof(wchar_t)
(16,"")
(17,SecureZeroMemory(password, passwordLen * sizeof(wchar_t)
(18,"Unable to login.")
(19,passwordLen)
(20,NULL)
(21,LogonUserW(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(22,100)
(23,if (fgetws(password, 100, stdin)
(24,username)
(25,password)
(26,passwordLen = 0)
(27,0)
(28,)
(29,passwordLen)
(30,hUser)
(31,wchar_t)
(32,domain)
(33,LOGON32_LOGON_NETWORK)
(34,passwordLen > 0)
(35,if (LogonUserW(\\\\n                        username,\\\\n                        domain,\\\\n                        password,\\\\n                        LOGON32_LOGON_NETWORK,\\\\n                        LOGON32_PROVIDER_DEFAULT,\\\\n                        &hUser)
(36,0)
(37,passwordLen = wcslen(password)
(38,stdin)
(39,&hUser)
(40,)
(41,0)
(42,0)
(43,passwordLen)
(44,fgetws(password, 100, stdin)
(45,\\\'\\\\0\\\')
(46,"Domain")
(47,)
(48,wcslen(password)
(49,"fgetws()
(50,)
(51,password)
(52,wcslen(password)
(53,RET)
(54,sizeof(wchar_t)
(55,password)
(56,hUser)
(57,printLine("Benign, fixed string")
(58,passwordLen)
(59,password)
(60,printLine("fgetws()
(61,passwordLen = wcslen(password)
(62,CloseHandle(hUser)
(63,)
(64,"Benign, fixed string")
(65,passwordLen)
(66,"User logged in successfully.")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
